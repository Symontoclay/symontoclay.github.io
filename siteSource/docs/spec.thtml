<h1 class='center-h'>Language Specification</h1>

<ContentsPlace/>

<h2 class='center-h' data-href='Introduction_chapter'>
Introduction
</h2>

<LinkToContent/>

<p>
This is manual for SymOntoClay DSL.
</p>

<p>
This document contains all implemented grammar. 
You can use It.
</p>

<p>
SymOntoClay DSL is in development now. 
So new parts will be added here right after implementation and internal testing. 
I will try to do this as soon as possible.
</p>

<h2 class='center-h' data-href='Notation_chapter'>
Notation
</h2>

<LinkToContent/>

<p>
The syntax is specified using <ico target='Wikipedia'/><a href='https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form'>Extended Backus-Naur Form (EBNF)</a>.
</p>

<h2 class='center-h' data-href='Source_code_representation_chapter'>
Source code representation
</h2>

<LinkToContent/>

<p>
There are two views of source code file: as set of characters and as set of code entities.
</p>

<h3 class='center-h' data-href='Symbols_chapter'>
Symbols
</h3>

<LinkToContent/>

<h4 class='center-h' data-href='Characters_chapter'>
Characters
</h4>

<LinkToContent/>

<p>
Source code is Unicode text encoded in <ico target='Wikipedia'/><a href='https://en.wikipedia.org/wiki/UTF-8'>UTF-8</a>.
</p>

<gr>
<EBNFCDECL name='Newline'/> = /* the Unicode code point U+000A */ .
<EBNFCDECL name='UnicodeChar'/> = /* an arbitrary Unicode code point except <EBNFC name='Newline'/> */ .
</gr>

<h4 class='center-h' data-href='Letters_and_digits_chapter'>
Letters and digits
</h4>

<LinkToContent/>

<p>
The underscore character _ (U+005F) is considered a letter.
</p>

<gr>
<EBNFCDECL name='Letter'/> = "A" ... "Z" | "a" ... "z" | "_" .
<EBNFCDECL name='DecimalDigit'/> = "0" … "9" .
</gr>

<h3 class='center-h' data-href='Kind_of_source_code_files_chapter'>
Kind of source code files
</h3>

<LinkToContent/>

<p>
There are different kinds of source code files which can contain different code entities.
</p>

<gr>
<EBNFCDECL name='SourceCodeFileContent'/> = <GEBNFC name='SourceCodeFileContent' kind='or'/> .
</gr>

<h4 class='center-h' data-href='World_source_code_file_chapter'>
World source code file
</h4>

<LinkToContent/>

<p>
The file contains <a href='#World_chapter'>World declaration</a>.
There can be only one World declaration in the file.
Also this file can contain other content which is allowed in <a href='#Class_source_code_file_chapter'>Class source code file</a>.
</p>

<gr>
<EBNFCDECL name='WorldSourceCodeFileContent' groups='SourceCodeFileContent'/> = [ <EBNFC name='ClassSourceCodeFileContent'/> ] <GEBNFC name='WorldSourceCodeFileContent' kind='op_and'/> [ <EBNFC name='ClassSourceCodeFileContent'/> ] .
</gr>

<h4 class='center-h' data-href='App_source_code_file_chapter'>
App source code file
</h4>

<LinkToContent/>

<p>
The file contains <a href='#App_chapter'>App declaration</a>.
There can be only one App declaration in the file.
Also this file can contain other content which is allowed in <a href='#Class_source_code_file_chapter'>Class source code file</a>.
</p>

<gr>
<EBNFCDECL name='AppSourceCodeFileContent' groups='SourceCodeFileContent'/> = [ <EBNFC name='ClassSourceCodeFileContent'/> ] <GEBNFC name='AppSourceCodeFileContent' kind='op_and'/> [ <EBNFC name='ClassSourceCodeFileContent'/> ] .
</gr>

<h4 class='center-h' data-href='Class_source_code_file_chapter'>
Class source code file
</h4>

<LinkToContent/>

<p>
The file contains all possible code entities, except <a href='#World_chapter'>World</a> and <a href='#App_chapter'>App</a> declarations.
There exist special source code files for these code entities.
But content of Class source code file can be included into <a href='#World_source_code_file_chapter'>World</a> and <a href='#App_source_code_file_chapter'>App</a> source code files.
</p>

<gr>
<EBNFCDECL name='ClassSourceCodeFileContent' groups='SourceCodeFileContent'/> = <GEBNFC name='ClassSourceCodeFileContent' kind='op_and'/> .
</gr>

<h2 class='center-h' data-href='Lexical_elements_chapter'>
Lexical elements
</h2>

<LinkToContent/>

<h3 class='center-h' data-href='Comments_chapter'>
Comments
</h3>

<LinkToContent/>

<p>
SymOntoClay supports both single and multiline comments.
It is a programmer-readable explanation or annotation of source code like in many other programming languages.
Also It helps to cut temporarily unused code fragments.
</p>

<gr>
<EBNFCDECL name='SingleLineComment'/> = "//" [{ <EBNFC name='UnicodeChar'/> }] <EBNFC name='NewLine'/> .
</gr>

<code data-lng='soc'>
//@r = @b = 1;
</code>

<gr>
<EBNFCDECL name='MultiLineComment'/> = "/*" [{ <EBNFC name='UnicodeChar'/> }] "*/" .
</gr>

<code data-lng='soc'>
 /*@r = @b = 1;
@bx >> @>log;*/
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Comments'>here</a>.
</p>

<h3 class='center-h' data-href='Tokens_chapter'>
Tokens
</h3>

<LinkToContent/>

<p>
Tokens form the vocabulary of the SymOntoClay DSL.
There are four classes: identifiers, keywords, operators and punctuation, and literals. 
</p>

<h3 class='center-h' data-href='Identifiers_chapter'>
Identifiers
</h3>

<LinkToContent/>

<p>
Identifiers name code entities.
</p>

<p>
Since SymOntoClay has many kinds of code entities, I have decided It will be better to recognize kind of code entity by identifier.
So SymOntoClay has many kinds of identifiers with different prefixes.
Each of these identifiers has Its own meaning in code. 
</p>

<gr>
<EBNFCDECL name='Identifier'/> = <GEBNFC name='Identifier' kind='or' /> .
</gr>

<h4 class='center-h' data-href='ConceptIdentifier_chapter'>
Concept identifier
</h4>

<LinkToContent/>

<p>
Names a concept.
</p>

<gr>
<EBNFCDECL name='ConceptIdentifier' groups='Identifier;TypeIdentifier;ConstExpr;ValueExpr'/> = <TEBNFC name='BaseIdentifier'/> .
</gr>

<code data-lng='soc'>
a
_a
a2
aB
ab_1
Great_Britain
`Great Britain`
</code>

<h4 class='center-h' data-href='InstanceIdentifier_chapter'>
Instance identifier
</h4>

<LinkToContent/>

<p>
Names an instance of concept.
</p>

<gr>
<EBNFCDECL name='InstanceIdentifier' groups='Identifier;TypeIdentifier;ConstExpr;ValueExpr'/> = "#" <TEBNFC name='BaseIdentifier'/> .
</gr>

<code data-lng='soc'>
#123
</code>

<h4 class='center-h' data-href='VarIdentifier_chapter'>
Variable identifier
</h4>

<LinkToContent/>

<p>
Names a <a href='#Variable_chapter'>variable</a>.
</p>

<gr>
<EBNFCDECL name='VarIdentifier' groups='Identifier;ValueExpr'/> = "@" <TEBNFC name='BaseIdentifier'/> .
</gr>

<code data-lng='soc'>
@a
</code>

<h4 class='center-h' data-href='SysVarIdentifier_chapter'>
System variable identifier
</h4>

<LinkToContent/>

<p>
Names a <a href='#System_variable_chapter'>system variable</a>
</p>

<gr>
<EBNFCDECL name='SysVarIdentifier' groups='Identifier;ValueExpr'/> = "@@" <TEBNFC name='BaseIdentifier'/> .
</gr>

<code data-lng='soc'>
@@host
</code>

<h4 class='center-h' data-href='LogicVarIdentifier_chapter'>
Logic variable identifier
</h4>

<LinkToContent/>

<p>
Names special variable for <a href='#Logic_rule_chapter'>Logic rule</a> or <a href='#Fact_chapter'>Fact</a>.
</p>

<gr>
<EBNFCDECL name='LogicVarIdentifier' groups='Identifier'/> = "$" <TEBNFC name='BaseIdentifier'/> .
</gr>

<code data-lng='soc'>
$x
</code>

<h4 class='center-h' data-href='ChannelIdentifier_chapter'>
Channel identifier
</h4>

<LinkToContent/>

<p>
Names <a href='#Channel_chapter'>Channel</a>.
</p>

<gr>
<EBNFCDECL name='ChannelIdentifier' groups='Identifier;ValueExpr'/> = "@>" <TEBNFC name='BaseIdentifier'/> .
</gr>

<code data-lng='soc'>
@>log
</code>

<h3 class='center-h' data-href='Keywords_chapter'>
Keywords
</h3>

<LinkToContent/>

<p>
Some words is used as keywords in syntax.
But the words can be used as identifiers in other places. 
</p>

<keywords cols='4'>
    <kw name='app'/>
	<kw name='class'/>
	<kw name='world'/>
	<kw name='is'/>
	<kw name='on'/>
	<kw name='use'/>
	<kw name='not'/>
	<kw name='select'/>
	<kw name='insert'/>
	<kw name='linvar'/>
	<kw name='for'/>
	<kw name='range'/>
	<kw name='terms'/>
	<kw name='constraints'/>
	<kw name='inheritance'/>
	<kw name='relation'/>
	<kw name='inh'/>
	<kw name='rel'/>
	<kw name='null'/>
</keywords>

<h3 class='center-h' data-href='Operators_and_punctuation_chapter'>
Operators and punctuation
</h3>

<LinkToContent/>

<p>
The following character sequences represent <a href='#Operators_chapter'>operators</a> and punctuation:
</p>

<items cols='4'>
    <item value='?'/>
	<item value='='/>
	<item value='&'/>
	<item value='|'/>
	<item value='!'/>
	<item value='>'/>
	<item value='>='/>
	<item value='<'/>
	<item value='<='/>
	<item value='>>'/>
	<item value='=>'/>
	<item value='->'/>
	<item value=':>'/>
	<item value=':'/>
	<item value=';'/>
	<item value=','/>
	<item value='('/>
	<item value=')'/>
	<item value='['/>
	<item value=']'/>
	<item value='{'/>
	<item value='}'/>
	<item value='{:'/>
	<item value=':}'/>
</items>

<h3 class='center-h' data-href='Integer_literal_chapter'>
Integer literal
</h3>

<LinkToContent/>

<p>
An integer literal is a sequence of digits representing an <a href='#Constant_expression_chapter'>integer constant</a>.
Now integer literal has only decimal base.
</p>

<gr>
<EBNFCDECL name='IntegerLiteral' groups='NumberExpr'/> = <EBNFC name='DecimalDigit'/> [ { <EBNFC name='DecimalDigit'/> } ] .
</gr>

<code data-lng='soc'>
42
</code>

<h3 class='center-h' data-href='Floating_point_literal_chapter'>
Floating-point literal
</h3>

<LinkToContent/>

<p>
A floating-point literal is a decimal or hexadecimal representation of a <a href='#Constant_expression_chapter'>floating-point constant</a>.
</p>

<p>
A floating-point literal consists of an integer part (decimal digits), a decimal point and a fractional part (decimal digits).
Now floating-point literal has only decimal base.
</p>

<gr>
<EBNFCDECL name='FloatPointLiteral' groups='NumberExpr'/> = (  <EBNFC name='DecimalDigit'/> [ { <EBNFC name='DecimalDigit'/> } ] ) "." (  <EBNFC name='DecimalDigit'/> [ { <EBNFC name='DecimalDigit'/> } ] ) .
</gr>

<code data-lng='soc'>
36.6
</code>

<h3 class='center-h' data-href='String_literal_chapter'>
String literal
</h3>

<LinkToContent/>

<p>
A string literal represents a <a href='#Constant_expression_chapter'>string constant</a> obtained from concatenating a sequence of characters.
</p>

<gr>
<EBNFCDECL name='StringLiteral' groups='ConstExpr;ValueExpr'/> = (""" <EBNFC name='UnicodeChar'/> [{ <EBNFC name='UnicodeChar'/> }] """) | ("'" <EBNFC name='UnicodeChar'/> [{ <EBNFC name='UnicodeChar'/> }] "'") .
</gr>

<code data-lng='soc'>
"abc"
'abc'
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Hello_world'>here</a>.
</p>

<h3 class='center-h' data-href='NULL_literal_chapter'>
NULL literal
</h3>

<LinkToContent/>

<p>
The <b>NULL</b> literal represents special value which means unknown or undefined data.
</p>

<gr>
<EBNFCDECL name='NullLiteral' groups='ConstExpr;ValueExpr'/> = "null" .
</gr>

<code data-lng='soc'>
@a = null;
</code>

<code data-lng='soc'>
{: age(#Tom, null) :}
</code>

<h2 class='center-h' data-href='Objects_declaration_chapter'>
Objects declaration
</h2>

<LinkToContent/>

<p>
Everything is an object.
The classical type-instance relationship is using, but there is not strict and fundamental distinction between the two.
</p>

<p>
Some objects have a special meaning.
So Class represents a general concept which can have many instances.
</p>

<p>
Some objects have special engine support to make writing code easier and faster, or as entry point locators.
</p>

<h3 class='center-h' data-href='Class_chapter'>
Class
</h3>

<LinkToContent/>

<p>
Represents a general concept which can have many instances.
</p>

<p>
In general, It is similar to the concept 'class' in other OOP languages.
</p>

<gr>
<EBNFCDECL name='ClassDeclSet' groups='ClassSourceCodeFileContent'/> = <TEBNFC name='DeclSet' param = 'ClassDecl'/> .
<EBNFCDECL name='ClassDecl'/> = "class" <EBNFC name='ConceptIdentifier'/> [ <EBNFC name='InheritanceDecl'/> ] <br/> "{"<br/> [ <TEBNFC name='DeclSet' param = 'ClassBodyContent'/> ] <br/> "}" .
<EBNFCDECL name='ClassBodyContent'/> = <GEBNFC name='ClassBodyContent' kind='op_and'/> .
</gr>

<code data-lng='soc'>
class exampleClass
{
}
</code>

<code data-lng='soc'>
class exampleClass is human, [0.1] animal
{
}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Logic_queries_Example_1'>here</a>.
</p>

<h3 class='center-h' data-href='App_chapter'>
App
</h3>

<LinkToContent/>

<p>
It is root object and entry point of <a href='/docs/engine_concepts/index.html#Common_concepts_App'>App</a>.
</p>

<gr>
<EBNFCDECL name='AppIdentifier'/> = <GEBNFC name='TypeIdentifier' kind='or'/> .
<EBNFCDECL name='AppDecl' groups='AppSourceCodeFileContent'/> = "app" <EBNFC name='AppIdentifier'/> [ <EBNFC name='InheritanceDecl'/> ] <br/> "{"<br/> [ <TEBNFC name='DeclSet' param = 'AppBodyContent'/> ] <br/> "}" .
<EBNFCDECL name='AppBodyContent'/> = [ <GEBNFC name='AppBodyContent' kind='op_and'/> ] .
</gr>

<code data-lng='soc'>
app PeaceKeeper
{
    on Init => 
	{
    }
}
</code>

<code data-lng='soc'>
app PeaceKeeper is human
{
    on Init => 
	{
    }
}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Hello_world'>here</a>.
</p>

<h3 class='center-h' data-href='World_chapter'>
World
</h3>

<LinkToContent/>

<p>
It is root object of <a href='/docs/engine_concepts/index.html#Common_concepts_World'>World</a>.
</p>

<gr>
<EBNFCDECL name='WorldIdentifier'/> = <GEBNFC name='TypeIdentifier' kind='or'/> .
<EBNFCDECL name='WorldDecl' groups='WorldSourceCodeFileContent'/> = "world" <EBNFC name='WorldIdentifier'/> [ <EBNFC name='InheritanceDecl'/> ] <br/> "{"<br/> [ <TEBNFC name='DeclSet' param = 'WorldBodyContent'/> ] <br/> "}" .
<EBNFCDECL name='WorldBodyContent'/> = <GEBNFC name='WorldBodyContent' kind='op_and'/> .
</gr>

<code data-lng='soc'>
world `Lost town`
{
}
</code>

<h3 class='center-h' data-href='Waypoint_chapter'>
Waypoint
</h3>

<LinkToContent/>

<p>
Represents a point in space, abstracting from the game engine's coordinate system.
</p>

<p>
Coordinates of points are presented in a more convenient way, similar to that is used by people in everyday life.
</p>

<p>
Now It is supported the coordinate system what is similar to Polar coordinate system.
The radial coordinate is the distance from center of NPC to target.
And the angular coordinate (in degrees only) starts from the sagittal plane of NPC in front of the NPC.
</p>

<p>
SymOntoClay engine provides mapping to the game engine's coordinate system.
</p>

<gr>
<EBNFCDECL name='WaypointDecl' groups='Expr'/> = "#@" "[" ( <EBNFC name='WaypointDistance'/> "," <EBNFC name='WaypointAngleInDegrees'/> ) | ( <EBNFC name='WaypointDistance'/> ) "]" .
<EBNFCDECL name='WaypointDistance'/> = <EBNFC name='NumberExpr'/> .
<EBNFCDECL name='WaypointAngleInDegrees'/> = <EBNFC name='NumberExpr'/> .
</gr>

<code data-lng='soc'>
#@[25, 30]
#@[25]
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Calling_host_method_Synchronous'>here</a>.
</p>

<h3 class='center-h' data-href='Linguistic_variable_chapter'>
Linguistic variable
</h3>

<LinkToContent/>

<p>
Provides non-numeric fuzzy values.
</p>

<p>
You can read more details in <ico t='w'/><a href='https://en.wikipedia.org/wiki/Fuzzy_logic#Linguistic_variables'>here</a>.
</p>

<gr>
<EBNFCDECL name='LinguisticVariableDeclSet' groups='ClassSourceCodeFileContent;ClassBodyContent;AppSourceCodeFileContent;WorldBodyContent'/> = <TEBNFC name='DeclSet' param = 'LinguisticVariableDecl'/> .
<EBNFCDECL name='LinguisticVariableDecl'/> = "linvar" <EBNFC name='ConceptIdentifier'/> [ "for" <EBNFC name='LinguisticVariableDomainDecl'/> ] <br/> "{"<br/> [ <EBNFC name='LinguisticVariableBodyContent'/> ] <br/> "}" .
<EBNFCDECL name='LinguisticVariableDomainDecl'/> = "range" ( "(" | "[" ) ( "-∞" | "*" | <EBNFC name='NumberExpr'/> ) "," ( "+∞" | "*" | <EBNFC name='NumberExpr'/> ) ( ")" | "]" ) .
<EBNFCDECL name='LinguisticVariableBodyContent'/> = <GEBNFC name='LinguisticVariableBodyContent' kind='or'/> .
<EBNFCDECL name='LinguisticVariableFullBodyContent' groups='LinguisticVariableBodyContent'/> = <GEBNFC name='LinguisticVariableFullBodyContent' kind='op_and'/> .
<EBNFCDECL name='LinguisticVariableShortBodyContent' groups='LinguisticVariableBodyContent'/> = <EBNFC name='LinguisticVariableTermsItemsSet'/> .
<EBNFCDECL name='LinguisticVariableTermIdentifier'/> = <EBNFC name='ConceptIdentifier'/> .
<EBNFCDECL name='LinguisticVariableTermsDeclSet' groups='LinguisticVariableFullBodyContent'/> = <TEBNFC name='DeclSet' param = 'LinguisticVariableTermsDecl'/> .
<EBNFCDECL name='LinguisticVariableTermsDecl'/> = "terms" ":"<br/> <EBNFC name='LinguisticVariableTermsItemsSet'/> .
<EBNFCDECL name='LinguisticVariableTermsItemsSet'/> = <TEBNFC name='DeclSet' param = 'LinguisticVariableTermsItem'/> .
<EBNFCDECL name='LinguisticVariableTermsItem'/> = <EBNFC name='LinguisticVariableTermIdentifier'/> "=" <EBNFC name='PredefinedFuzzyMembershipFunction'/> ";" .
<EBNFCDECL name='LinguisticVariableConstraintsDeclSet' groups='LinguisticVariableFullBodyContent'/> = <TEBNFC name='DeclSet' param = 'LinguisticVariableConstraintsDecl'/> .
<EBNFCDECL name='LinguisticVariableConstraintsDecl'/> = "constraints" ":"<br/> <EBNFC name='LinguisticVariableConstraintsItemsSet'/> .
<EBNFCDECL name='LinguisticVariableConstraintsItemsSet'/> = <TEBNFC name='DeclSet' param = 'LinguisticVariableConstraintsItem'/> .
<EBNFCDECL name='LinguisticVariableConstraintsItem'/> = "for" ( <EBNFC name='LinguisticVariableConstraintsItemForInheritance'/> | <EBNFC name='LinguisticVariableConstraintsItemForRelation'/> ) ";" .
<EBNFCDECL name='LinguisticVariableConstraintsItemForInheritance'/> = "inheritance" | "inh" .
<EBNFCDECL name='LinguisticVariableConstraintsItemForRelation'/> = ( "relation" | "rel" ) <EBNFC name='ConceptIdentifier'/> .
</gr>

<code data-lng='soc'>
linvar age for range (0, 150]
{
    constraints:
	    for inheritance;
	    for relation age;

    terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<code data-lng='soc'>
linvar logic for range [0, 1]
{
    constraints:
	    for inheritance;

	terms:
		minimal = L(0, 0.1);
		low = Trapezoid(0, 0.05, 0.3, 0.45);
		middle = Trapezoid(0.3, 0.4, 0.6, 0.7);
		high = Trapezoid(0.55, 0.7, 0.95, 1);
		maximal = S(0.9, 1);
}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Linguistic_variable'>here</a>.
</p>

<h4 class='center-h' data-href='Linguistic_variable_Terms_chapter'>
Terms
</h4>

<LinkToContent/>

<p>
Terms are non-numeric fuzzy values.
</p>

<p>
Term combines its name and membership function.
See <EBNFC name='LinguisticVariableTermsItem'/> in SymOntoClay's garammar description.
</p>

<p>
SymOntoClay still doesn't contain means for full defining function's body.
The means will be added in the future, but now you can use <a href='#Linguistic_variable_Predefined_membership_functions_chapter'>Predefined membership functions</a> instead of manual defining.
</p>

<p>
Each term must be terminated by ";".
</p>

<code data-lng='soc'>
linvar logic
{
	terms:
		minimal = L(0, 0.1);
		low = Trapezoid(0, 0.05, 0.3, 0.45);
		middle = Trapezoid(0.3, 0.4, 0.6, 0.7);
		high = Trapezoid(0.55, 0.7, 0.95, 1);
		maximal = S(0.9, 1);
}
</code>

<p>
If Linguistic variable consists only of terms, the terms can be put directly into body of the Linguistic variable.
</p>

<code data-lng='soc'>
linvar logic
{
	minimal = L(0, 0.1);
	low = Trapezoid(0, 0.05, 0.3, 0.45);
	middle = Trapezoid(0.3, 0.4, 0.6, 0.7);
	high = Trapezoid(0.55, 0.7, 0.95, 1);
	maximal = S(0.9, 1);
}
</code>

<p>
A term can be used in <EBNFC name='FuzzyExpr'/> as <EBNFC name='NonNumericFuzzyExpr'/>.
It looks as using usual <a href='#ConceptIdentifier'>concept</a> instead of <a href='#NumberExpr'>numeric value</a>.
</p>

<code data-lng='soc'>
app PeaceKeeper is [middle] exampleClass
{
}
</code>

<code data-lng='soc'>
{: age(#Tom, `teenager`) :}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Inheritance'>here</a> and <a href='/docs/lng_examples/index.html#Logic_queries_Example_5'>here</a>.
</p>

<p>
Terms can be combined with <a href='#Linguistic_variable_Predefined_operators_chapter'>fuzzy operators</a>.
</p> 

<code data-lng='soc'>
app PeaceKeeper is [very middle] exampleClass
{
}
</code>

<code data-lng='soc'>
{: age(#Tom, very `teenager`) :}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Inheritance'>here</a> and <a href='/docs/lng_examples/index.html#Logic_queries_Example_5'>here</a>.
</p>

<h4 class='center-h' data-href='Linguistic_variable_Predefined_membership_functions_chapter'>
Predefined membership functions
</h4>

<LinkToContent/>

<p>
SymOntoClay still doesn't contain means for full defining function's body.
The means will be added in the future, but now you can use <a href='#Linguistic_variable_Predefined_membership_functions_chapter'>Predefined membership functions</a> instead of manual defining.
</p>

<gr>
<EBNFCDECL name='PredefinedFuzzyMembershipFunction'/> = <GEBNFC name='PredefinedFuzzyMembershipFunctions' kind='or'/> .
</gr>

<p>
There exist few predefined standard membership functions in the SymOntoClay.
I am going to add more functions in the future.
</p>

<h5 class='center-h' data-href='Linguistic_variable_Predefined_membership_function_L_Function_chapter'>
L Function
</h5>

<LinkToContent/>

<gr>
<EBNFCDECL name='LFuzzyMembershipFunction' groups='PredefinedFuzzyMembershipFunctions'/> = "L" "(" <EBNFC name='A_LFuzzyMembershipFunctionParameter'/> "," <EBNFC name='B_LFuzzyMembershipFunctionParameter'/> ")" .
<EBNFCDECL name='A_LFuzzyMembershipFunctionParameter'/> = <EBNFC name='NumberExpr'/> .
<EBNFCDECL name='B_LFuzzyMembershipFunctionParameter'/> = <EBNFC name='NumberExpr'/> .
</gr>

<p>
<math xmlns='http://www.w3.org/1998/Math/MathML'>
    <mrow>
        <mrow>
		    <mi> F </mi>
			<mo> ( </mo>
			<mrow>
			    <mi> x </mi>
				<mo> , </mo>
				<mi> a </mi>
				<mo> , </mo>
				<mi> b </mi>
			</mrow>
			<mo> ) </mo>
	    </mrow>
		<mo>=</mo>		
		<math xmlns='http://www.w3.org/1998/Math/MathML'>
		    <mo>{</mo>
		    <mtable>
		        <mtr>
		            <mtd>
		            	<mn>1</mn>
		            </mtd>
					<mtd>
						<mtext>&nbsp;if&nbsp;</mtext>
						<mrow>
                            <mi>x</mi>
                            <mo>&le;</mo>
                            <mi>a</mi>
                        </mrow>
					</mtd>
                </mtr>
                <mtr>
                    <mtd>
		                <mfrac>
						    <mrow>
							    <mi>b</mi>
							    <mo> - </mo>
								<mi>x</mi>
							</mrow>
						    <mrow>
								<mi>b</mi>
							    <mo> - </mo>
							    <mi>a</mi>
							</mrow>						
						</mfrac>
	
		            </mtd>
					<mtd>
						<mtext>&nbsp;if&nbsp;</mtext>
						<mrow>
							<mi>a</mi>
							<mo>&lt;</mo>
                            <mi>x</mi>
                            <mo>&le;</mo>
                            <mi>b</mi>
                        </mrow>
					</mtd>
		        </mtr>
				<mtr>
                    <mtd>
					    <mn>0</mn>
		            </mtd>
					<mtd>
						<mtext>&nbsp;if&nbsp;</mtext>
						<mrow>
                            <mi>x</mi>
                            <mo>&gt;</mo>
                            <mi>b</mi>
                        </mrow>					
					</mtd>					
		        </mtr>
		    </mtable>
		</math>
    </mrow>
</math>
</p>

<img src='/docs/LFunction.svg' alt='L Function graph' class='centered-img'>

<code data-lng='soc'>
linvar age
{
	`teenager` = L(5, 10);
}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Linguistic_variable_Predefined_membership_function_L_Function'>here</a>.
</p>

<h5 class='center-h' data-href='Linguistic_variable_Predefined_membership_function_Trapezoid_Function_chapter'>
Trapezoid Function
</h5>

<LinkToContent/>

<gr>
<EBNFCDECL name='TrapezoidFuzzyMembershipFunction' groups='PredefinedFuzzyMembershipFunctions'/> = "Trapezoid" "(" <EBNFC name='A_TrapezoidFuzzyMembershipFunctionParameter'/> "," <EBNFC name='B_TrapezoidFuzzyMembershipFunctionParameter'/> "," <EBNFC name='C_TrapezoidFuzzyMembershipFunctionParameter'/> "," <EBNFC name='D_TrapezoidFuzzyMembershipFunctionParameter'/> ")" .
<EBNFCDECL name='A_TrapezoidFuzzyMembershipFunctionParameter'/> = <EBNFC name='NumberExpr'/> .
<EBNFCDECL name='B_TrapezoidFuzzyMembershipFunctionParameter'/> = <EBNFC name='NumberExpr'/> .
<EBNFCDECL name='C_TrapezoidFuzzyMembershipFunctionParameter'/> = <EBNFC name='NumberExpr'/> .
<EBNFCDECL name='D_TrapezoidFuzzyMembershipFunctionParameter'/> = <EBNFC name='NumberExpr'/> .
</gr>

<p>
<math xmlns='http://www.w3.org/1998/Math/MathML'>
    <mrow>
        <mrow>
		    <mi> F </mi>
			<mo> ( </mo>
			<mrow>
			    <mi> x </mi>
				<mo> , </mo>
				<mi> a </mi>
				<mo> , </mo>
				<mi> b </mi>
				<mo> , </mo>
				<mi> c </mi>
				<mo> , </mo>
				<mi> d </mi>
			</mrow>
			<mo> ) </mo>
	    </mrow>
		<mo>=</mo>		
		<math xmlns='http://www.w3.org/1998/Math/MathML'>
		    <mo>{</mo>
		    <mtable>
		        <mtr>
		            <mtd>
                        <mn> 0 </mn>
		            </mtd>
					<mtd>
                        <mtext>&nbsp;if&nbsp;</mtext>
						<mrow>
                            <mi>x</mi>
                            <mo>&le;</mo>
                            <mi>a</mi>						    
						</mrow>
						<mtext>&nbsp;or&nbsp;</mtext>
						<mrow>
						    <mi>x</mi>
                            <mo>&ge;</mo>
                            <mi>d</mi>
						</mrow>						
		            </mtd>
                </mtr>
                <mtr>
                    <mtd>
		                <mfrac>
						    <mrow>
							    <mi>x</mi>
                                <mo>-</mo>
                                <mi>a</mi>
							</mrow>
						    <mrow>
							    <mi>b</mi>
                                <mo>-</mo>
                                <mi>a</mi>							
							</mrow>							
						</mfrac>
		            </mtd>
					<mtd>
                        <mtext>&nbsp;if&nbsp;</mtext>
						<mrow>
						    <mi>x</mi>
							<mo>&isin;</mo>
							<mfenced close="]">
                                <mi> a </mi>
                                <mi> b </mi>
                            </mfenced>
						</mrow>						
		            </mtd>					
		        </mtr>
				<mtr>
                    <mtd>
		                <mn> 1 </mn>
		            </mtd>
					<mtd>
                        <mtext>&nbsp;if&nbsp;</mtext>
						<mrow>
						    <mi>x</mi>
							<mo>&isin;</mo>
							<mfenced>
                                <mi> b </mi>
                                <mi> c </mi>
                            </mfenced>						
						</mrow>						
		            </mtd>					
		        </mtr>
				<mtr>
                    <mtd>
		                <mfrac>
						    <mrow>
							    <mi>d</mi>
                                <mo>-</mo>
                                <mi>x</mi>
							</mrow>
						    <mrow>
							    <mi>d</mi>
                                <mo>-</mo>
                                <mi>c</mi>
							</mrow>							
						</mfrac>		                
		            </mtd>
					<mtd>
                        <mtext>&nbsp;if&nbsp;</mtext>
						<mrow>
						    <mi>x</mi>
							<mo>&isin;</mo>
							<mfenced>
                                <mi> c </mi>
                                <mi> d </mi>
                            </mfenced>						
						</mrow>						
		            </mtd>
		        </mtr>
		    </mtable>
		</math>
    </mrow>
</math>
</p>

<img src='/docs/TrapezoidFunction.svg' alt='Trapezoid Function graph' class='centered-img'>

<code data-lng='soc'>
linvar age
{
    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Linguistic_variable_Predefined_membership_function_Trapezoid_Function'>here</a>.
</p>

<h5 class='center-h' data-href='Linguistic_variable_Predefined_membership_function_S_Function_chapter'>
S Function
</h5>

<LinkToContent/>

<gr>
<EBNFCDECL name='SFuzzyMembershipFunction' groups='PredefinedFuzzyMembershipFunctions'/> = "S" "(" (( <EBNFC name='A_SFuzzyMembershipFunctionParameter'/> "," <EBNFC name='B_SFuzzyMembershipFunctionParameter'/> ) | ( <EBNFC name='A_SFuzzyMembershipFunctionParameter'/> "," <EBNFC name='M_SFuzzyMembershipFunctionParameter'/> "," <EBNFC name='B_SFuzzyMembershipFunctionParameter'/> ) ")" .
<EBNFCDECL name='A_SFuzzyMembershipFunctionParameter'/> = <EBNFC name='NumberExpr'/> .
<EBNFCDECL name='M_SFuzzyMembershipFunctionParameter'/> = <EBNFC name='NumberExpr'/> .
<EBNFCDECL name='B_SFuzzyMembershipFunctionParameter'/> = <EBNFC name='NumberExpr'/> .
</gr>

<p>
<math xmlns='http://www.w3.org/1998/Math/MathML'>
    <mrow>
        <mrow>
            <mi> F </mi>
			<mo> ( </mo>
			<mrow>
			    <mi> x </mi>
				<mo> , </mo>
				<mi> a </mi>
				<mo> , </mo>
				<mi> m </mi>
				<mo> , </mo>
				<mi> b </mi>
			</mrow>
			<mo> ) </mo>
	    </mrow>
		<mo>=</mo>		
		<math xmlns='http://www.w3.org/1998/Math/MathML'>
		    <mo>{</mo>
		    <mtable>
		        <mtr>
		            <mtd>
		                <mn> 0 </mn>
		            </mtd>
					<mtd>
                        <mtext>&nbsp;if&nbsp;</mtext>
						<mrow>
                            <mi>x</mi>
                            <mo>&le;</mo>
                            <mi>a</mi>						
						</mrow>						
		            </mtd>					
                </mtr>
                <mtr>
                    <mtd>
					    <mrow>
		                    <mn> 2 </mn>							
							<msup>
							    <mfenced>
							        <mfrac>
								        <mrow>
									        <mi>x</mi>
                                            <mo>-</mo>
                                            <mi>a</mi>
                                        </mrow>
								        <mrow>
									        <mi>b</mi>
                                            <mo>-</mo>
                                            <mi>a</mi>									
                                        </mrow>									
								    </mfrac>
								</mfenced>
								<mn>2</mn>
							</msup>
						</mrow>
		            </mtd>
					<mtd>
                        <mtext>&nbsp;if&nbsp;</mtext>
						<mrow>
						    <mi>x</mi>
							<mo>&isin;</mo>
							<mfenced close="]">
                                <mi> a </mi>
                                <mi> m </mi>
                            </mfenced>						
						</mrow>						
		            </mtd>					
		        </mtr>
				<mtr>
                    <mtd>
		                <mrow>
  						    <mn> 1 </mn>
							<mo>-</mo>
					        <mrow>
		                        <mn> 2 </mn>							
							    <msup>
							        <mfenced>
							            <mfrac>
								            <mrow>
									            <mi>x</mi>
                                                <mo>-</mo>
                                                <mi>a</mi>
                                            </mrow>
								            <mrow>
									            <mi>b</mi>
                                                <mo>-</mo>
                                                <mi>a</mi>									
                                            </mrow>									
								        </mfrac>
								    </mfenced>
								    <mn>2</mn>
							    </msup>
						    </mrow>							
						</mrow>
		            </mtd>
					<mtd>
                        <mtext>&nbsp;if&nbsp;</mtext>
						<mrow>
						    <mi>x</mi>
							<mo>&isin;</mo>
							<mfenced>
                                <mi> m </mi>
                                <mi> b </mi>
                            </mfenced>
						</mrow>						
		            </mtd>					
		        </mtr>
				<mtr>
                    <mtd>
		                <mn> 1 </mn>
		            </mtd>
					<mtd>
                        <mtext>&nbsp;if&nbsp;</mtext>
						<mrow>
                            <mi>x</mi>
                            <mo>&ge;</mo>
                            <mi>b</mi>
						</mrow>						
		            </mtd>					
		        </mtr>
		    </mtable>
		</math>
    </mrow>
</math>
</p>

<p>
The count of params can be reduced to 
<math xmlns='http://www.w3.org/1998/Math/MathML'>
    <mrow>
        <mi> F </mi>
		<mo> ( </mo>
		<mrow>
			<mi> x </mi>
			<mo> , </mo>
			<mi> a </mi>
			<mo> , </mo>
			<mi> b </mi>
		</mrow>
		<mo> ) </mo>	
	</mrow>
</math>.
In this case 
<math xmlns='http://www.w3.org/1998/Math/MathML'>
    <mrow>
	    <mi> m </mi>
		<mo> = </mo>
		<mfrac>
		    <mrow>
			    <mi> a </mi>
			    <mo> + </mo>
			    <mi> b </mi>
			</mrow>
		    <mrow>
			    <mn>2</mn>
			</mrow>			
		</mfrac>
	</mrow>
</math>.
</p>

<img src='/docs/SFunction.svg' alt='S Function graph' class='centered-img'>

<code data-lng='soc'>
linvar age
{
    `teenager` = S(12, 17, 22);
}
</code>

<code data-lng='soc'>
linvar age
{
    `teenager` = S(12, 22);
}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Linguistic_variable_Predefined_membership_function_S_Function'>here</a>.
</p>

<h4 class='center-h' data-href='Linguistic_variable_Predefined_operators_chapter'>
Predefined operators
</h4>

<LinkToContent/>

<p>
Fuzzy logic allows us to add special logic operators to usual logic operators <a href='#AndOp_chapter'><b>and</b></a>, <a href='#OrOp_chapter'><b>or</b></a>, <a href='#NotOp_chapter'><b>not</b></a>.
The additional unary operators modify result of membership function.
</p>

<p>
SymOntoClay still doesn't contain means for full defining function's body.
The means will be added in the future, but now you can use Predefined operators instead of manual defining.
</p>

<gr>
<EBNFCDECL name='PredefinedFuzzyOpsIdentifier'/> = <GEBNFC name='PredefinedFuzzyOpsIdentifier' kind='or'/> .
</gr>

<p>
Operators can be used only in combination with <a href='#Linguistic_variable_Terms_chapter'>terms</a>.
</p>

<code data-lng='soc'>
app PeaceKeeper is [very middle] exampleClass
{
}
</code>

<code data-lng='soc'>
{: age(#Tom, very `teenager`) :}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Inheritance'>here</a> and <a href='/docs/lng_examples/index.html#Logic_queries_Example_5'>here</a>.
</p>

<h5 class='center-h' data-href='Linguistic_variable_Predefined_operator_Very_chapter'>
Very
</h5>

<LinkToContent/>

<gr>
<EBNFCDECL name='VeryFuzzyOpIdentifier' groups='PredefinedFuzzyOpsIdentifier'/> = "very" .
</gr>

<p>
<math xmlns='http://www.w3.org/1998/Math/MathML'>
    <mrow>
	    <mrow>
	        <mi> F </mi>
		    <mo> ( </mo>
			<mi> x </mi>
			<mo> ) </mo>
		</mrow>
		<mo> = </mo>
		<msup>
		    <mi>x</mi>
			<mn>2</mn>
		</msup>
	</mrow>
</math>
</p>

<code data-lng='soc'>
app PeaceKeeper is [very middle] exampleClass
{
}
</code>

<code data-lng='soc'>
{: age(#Tom, very `teenager`) :}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Inheritance'>here</a> and <a href='/docs/lng_examples/index.html#Logic_queries_Example_5'>here</a>.
</p>

<h4 class='center-h' data-href='Linguistic_variable_Domain_of_a_linguistic_variable_chapter'>
Domain of a linguistic variable
</h4>

<LinkToContent/>

<p>
Defines base set for linguistic variable.
Thems are mapped to the set by membership functions.
</p>

<p>
Each linguistic variable has its own domain.
</p>

<p>
If linguistic variable doesn't have explicitly defined domain, the linguistic variable has implicit domain from -∞ to +∞.
</p>

<p>
You can define domain of linguistic variable explicitly by keyword <b>range</b>.
See <EBNFC name='LinguisticVariableDomainDecl'/> in SymOntoClay's garammar description.
</p>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Linguistic_variable_With_Ranges'>here</a>.
</p>

<p>
Defining custom domain (range) for linguistic variable will be helpful for using terms of different linguistic variables with the same mames but different membership functions.
For example, the term <b>near</b> can be different for distances on a table, in a room and in Space.
Domain (range) allows us using term <b>near</b> as pure name without namespaces or something else.
</p>

<p>
This range is from negative infinity to positive infinity (Unbounded at both ends):
</p>

<code data-lng='soc'>
linvar age for range (-∞, +∞)
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<p>
This range is also from negative infinity to positive infinity:
</p>

<code data-lng='soc'>
linvar age for range (*, *)
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<p>
This range is open.
</p>

<code data-lng='soc'>
linvar age for range (0, 150)
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<p>
This range is closed.
</p>

<code data-lng='soc'>
linvar age for range [0, 150]
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<p>
This range is left-open and right-closed.
</p>

<code data-lng='soc'>
linvar age for range (0, 150]
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<p>
This range is left-closed and right-open.
</p>

<code data-lng='soc'>
linvar age for range [0, 150)
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<h4 class='center-h' data-href='Linguistic_variable_constraints_chapter'>
Constraints
</h4>

<LinkToContent/>

<p>
Defines conditions when the linguistic variable should be used.
</p>

<p>
Now you can define:
    <ul>
	    <li>
		    Using terms of linguistic variable for operations with inheritance.
		</li>
        <li>
		    Using terms of linguistic variable only in concrete <a href='#PredicateOp_chapter'>logic relations</a>.
		</li>
	</ul>
</p>

<code data-lng='soc'>
linvar age
{
    constraints:
	    for inheritance;
	    for relation age;

    terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<code data-lng='soc'>
linvar age
{
    constraints:
        for inh;
        for rel age;

    terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Linguistic_variable_With_constraints'>here</a>.
</p>

<p>
Constraint for inheritance also generates constraint for relation "is" automatically.
</p>

<p>
Constraint for for relation "is" also generates constraint for inheritance automatically.
</p>

<h4 class='center-h' data-href='Linguistic_variable_defuzzification_chapter'>
Defuzzification
</h4>

<LinkToContent/>

<p>
Defuzzification transforms term of lingiustic variables (non numeric value) into numeric value.
</p>

<p>
You can read more details in <ico t='w'/><a href='https://en.wikipedia.org/wiki/Defuzzification'>here</a>.
</p>

<p>
There are many different methods of defuzzification.
SymOntoClay uses Centre of Gravity (CoG) for defuzzification.
</p>

<h5 class='center-h' data-href='Linguistic_variable_defuzzification_Centre_of_Gravity_chapter'>
Centre of Gravity (CoG)
</h5>

<LinkToContent/>

<p>
Centre of Gravity (CoG) calculates by formula:
</p>

<p>
<math xmlns='http://www.w3.org/1998/Math/MathML'>
    <mrow>
	    <mi> y </mi>
		<mo> = </mo>
		<mfrac>
		    <mrow>
                <mrow>
                    <munderover>
                        <mo>&int;</mo>
                        <mi>max</mi>
                        <mi>min</mi>
                    </munderover>
                </mrow>
				<mi>x</mi>
				<mi>&mu;</mi>
				<mfenced>
				    <mi>x</mi>
				</mfenced>
				<mi>dx</mi>
			</mrow>
		    <mrow>
                <mrow>
                    <munderover>
                        <mo>&int;</mo>
                        <mi>max</mi>
                        <mi>min</mi>
                    </munderover>
                </mrow>
				<mi>&mu;</mi>
				<mfenced>
				    <mi>x</mi>
				</mfenced>
				<mi>dx</mi>
			</mrow>
		</mfrac>
	</mrow>
</math>
</p>

<p>
If term of linguistic variable is used with fuzzy operators,
<math xmlns='http://www.w3.org/1998/Math/MathML'>
    <mrow>
		<mi>&mu;</mi>
		<mfenced>
			<mi>x</mi>
		</mfenced>
	</mrow>
</math> 
must be combination of membership function and opertors.
</p>

<h2 class='center-h' data-href='Common_objects_parts_chapter'>
Common objects’ parts
</h2>

<LinkToContent/>

<p>
The following parts can be in all or almost all kinds of objects.
</p>

<h3 class='center-h' data-href='Inheritance_chapter'>
Inheritance
</h3>

<LinkToContent/>

<p>
SymOntoClay DSL has multiple fuzzy prototype-based inheritance.
</p>

<p>
That is, one object can have many “is a” relationships with other objects.
A <b>descendant object</b> is related to a <b>base object</b> by the “is a” relationship, and is not its clone.
</p>

<gr>
<EBNFCDECL name='InheritanceDecl'/> = "is" <EBNFC name='InheritanceDeclItem'/> [ { "," <EBNFC name='InheritanceDeclItem'/> } ] .
<EBNFCDECL name='InheritanceDeclItem'/> = <TEBNFC name='InheritanceDeclItem'/> .
</gr>

<p>
Additionally each relation has a float-point rank in range from 0 to 1.
1 is the highest rank, and 0 indicates the total absence of an "is a" relationship between these objects.
By default the inheritance rank equals 1.
</p>

<p>
In operations using inheritance, the total inheritance rank between two objects is calculated by formula:
</p>

<p>
<math xmlns='http://www.w3.org/1998/Math/MathML'>
    <mrow>
        <mrow>
            <msub>
                <mi>Rank</mi>
                <mi>total</mi>
            </msub>
        </mrow>
        <mo>=</mo>
        <mrow>
            <munderover>
                <mo>∏</mo>
                <mrow>
                    <mi>i</mi>
                    <mo>=</mo>
                    <mn>1</mn>
                </mrow>
                <mi>n</mi>
            </munderover>
        </mrow>
        <msub>
            <mi>Rank</mi>
            <mi>i</mi>
        </msub>
    </mrow>
</math>
</p>

<p>
In this formula
<math xmlns='http://www.w3.org/1998/Math/MathML'>
    <mrow>
        <msub>
            <mi>Rank</mi>
            <mi>i</mi>
        </msub>
    </mrow>
</math>
is inheritance rank of one link in the entire inheritance chain between two objects.
</p>

<p>
If inheritance has formed a rhombus, and there are several chains with different rank, then rank of chain with the minimum count of chain elements is taken.
</p>

<p>
Inheritance relationship can be read with <a href='#IsOp_chapter'>operator &quot;is&quot;</a>, and It can be changed run time with <a href='#UseIsStatement_chapter'>&quot;use is&quot; statement</a>.
</p>

<h3 class='center-h' data-href='Trigger_chapter'>
Trigger
</h3>

<LinkToContent/>

<p>
A trigger is a code that is automatically executed in response to certain events.
</p>

<p>
Now both Logic coditional and Lifecycle triggers are available. 
In the future I am going to develop other kinds of triggers.
</p>

<gr>
<EBNFCDECL name='TriggersContent' groups='ClassBodyContent;AppSourceCodeFileContent'/> = "on" ( <EBNFC name='LifecycleTriggerIdentifier'/> | <EBNFC name='TriggersLogicСondition'/> ) "=>" <br/> "{" <br/> <EBNFC name='StatementsSet'/> <br/> "}" .
</gr>

<h4 class='center-h' data-href='Lifecycle_triggers_chapter'>
Life cycle triggers
</h4>

<LinkToContent/>

<p>
Every object has a life cycle.
</p>

<p>
If there exist inheritance relation between object, then life cycle triggers of base object execute before the life cycle triggers of descendant object.
</p>

<gr>
<EBNFCDECL name='LifecycleTriggerIdentifier'/> = <GEBNFC name='LifecycleTriggerIdentifier' kind='or' /> .
</gr>

<h5 class='center-h' data-href='Init_Lifecycle_trigger_chapter'>
Init
</h5>

<LinkToContent/>

<p>
Initializes an object. 
It is like a constructor in other programming languages.
</p>

<p>
Init trigger of <a href='#App_chapter'>App</a> is a first code which is executed for the App.
So It is an entrypoint of the App.
</p>

<gr>
<EBNFCDECL name='InitLifecycleTriggerIdentifier' groups='LifecycleTriggerIdentifier'/> = "Init" .
</gr>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Hello_world'>here</a>.
</p>

<h4 class='center-h' data-href='Logic_сonditional_triggers_chapter'>
Logic сonditional triggers
</h4>

<LinkToContent/>

<p>
Logic сonditional trigger fires when logic condition is <b>true</b> and trigger is reset.
Trigger resets when the logic condition is <b>false</b>.
</p>

<gr>
<EBNFCDECL name='TriggersLogicСondition'/> = <EBNFC name='LogicRuleDecl'/> [ <EBNFC name='BindingVariablesDecl'/> ] .
<EBNFCDECL name='BindingVariablesDecl'/> = "(" <EBNFC name='BindingVariableItemDecl'/> [ { "," <EBNFC name='BindingVariableItemDecl'/> } ] ")" .
<EBNFCDECL name='BindingVariableItemDecl'/> = <EBNFC name='SourceBoundVariable'/> ">>" <EBNFC name='DestBoundVariable'/> .
<EBNFCDECL name='SourceBoundVariable'/> = <EBNFC name='LogicVarExpr'/> .
<EBNFCDECL name='DestBoundVariable'/> = <EBNFC name='VarExpr'/> .
</gr>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Logic_сonditional_triggers'>here</a>.
</p>

<h5 class='center-h' data-href='Logic_сonditional_triggers_Binding_variables_chapter'>
Binding variables
</h5>

<LinkToContent/>

<complete_me/>

<h2 class='center-h' data-href='Logic_programming_chapter'>
Logic programming
</h2>

<LinkToContent/>

<complete_me/>

<h3 class='center-h' data-href='Fact_chapter'>
Fact
</h3>

<LinkToContent/>

<p>
Represents knowledge in declarative way.
It is an element of Logic programming.
</p>

<p>
Now the fact is a predicate sentence with small syntactic sugar for better inclusion into SymOntoClay DSL.
</p>

<p>
For example, expression &quot;cat (#Alisa)&quot; is equivalent to &quot;#Alisa is a cat&quot;.
</p>

<p>
In the future, I am going to move away from the predicate form to a more human-readable one.
In this case, the predicate form will be saved as an alternative way of describing.
</p>

<gr>
<EBNFCDECL name='FactDeclSet' groups='ClassSourceCodeFileContent;ClassBodyContent;AppSourceCodeFileContent;WorldBodyContent'/> = <TEBNFC name='DeclSet' param = 'FactDecl'/> .
<EBNFCDECL name='FactDecl'/> = "{:" ( <EBNFC name='FactSection'/> | <EBNFC name='FactSentence'/> ) ":}" .
<EBNFCDECL name='FactSection'/> = [ ">:" ] "{" <EBNFC name='FactSentence'/> "}" .
<EBNFCDECL name='FactSentence'/> = <EBNFC name='LogicExpr'/> .
</gr>

<code data-lng='soc'>
{: male(#Tom) :}
{: >:{ male(#Tom) } :}
{: parent(#Piter, #Tom) :}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Logic_queries'>here</a>.
</p>

<h3 class='center-h' data-href='Logic_rule_chapter'>
Logic rule
</h3>

<LinkToContent/>

<p>
Represents a logic conclusion rule.
It allows to find and use facts which are not defined explicitly.
It is an element of Logic programming.
</p>

<p>
A rule defines relation between two sets of facts during logic conclusion.
</p>

<p>
Logic searching uses depth-first search (DFS) with backtracking.
</p>

<p>
A rule consists of head (<EBNFC name='LogicRulePrimarySection'/>) and body (<EBNFC name='LogicRuleSecondarySection'/>).
The head is true if the body is true.
Both head and body are predicate sentences with small syntactic sugar for better inclusion into SymOntoClay DSL.
</p>

<p>
In the future, I am going to move away from the predicate form to a more human-readable one.
In this case, the predicate form will be saved as an alternative way of describing.
</p>

<p>
Conjunctions can only appear in the body, not in the head of a rule.
Only special <a href='#LogicRuleVarIdentifier_chapter'>variables</a> can be used in the rule, the scope of which is limited by this rule.
</p>

<p>
Now logic searching happens when the <a href='#SelectOp_chapter'>select operator</a> is only called explicitly.
In the future, the area of using logic searching (conclusion) in SymOntoClay will be significantly expanded.
</p>

<gr>
<EBNFCDECL name='LogicRuleDeclSet' groups='ClassSourceCodeFileContent;ClassBodyContent;AppSourceCodeFileContent;WorldBodyContent'/> = <TEBNFC name='DeclSet' param = 'LogicRuleDecl'/> .
<EBNFCDECL name='LogicRuleDecl'/> = "{:" <EBNFC name='LogicRulePrimarySection'/> <EBNFC name='ImplicationSymbol'/> <EBNFC name='LogicRuleSecondarySection'/> ":}" .
<EBNFCDECL name='LogicRulePrimarySection'/> = [ ">:" ] "{" <EBNFC name='LogicRuleSentence'/> "}" .
<EBNFCDECL name='LogicRuleSecondarySection'/> = "{" <EBNFC name='LogicRuleSentence'/> "}" .
<EBNFCDECL name='ImplicationSymbol'/> = "->" .
<EBNFCDECL name='LogicRuleSentence'/> = <EBNFC name='LogicExpr'/> .
</gr>

<code data-lng='soc'>
{: {son($x, $y)} -> { male($x) & parent($y, $x) } :}
{: >: {son($x, $y)} -> { male($x) & parent($y, $x) } :}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Logic_queries'>here</a>.
</p>

<h3 class='center-h' data-href='Semantic_of_Logic_sentence_chapter'>
Semantic of Logic sentence
</h3>

<LinkToContent/>

<complete_me/>

<h2 class='center-h' data-href='Expressions_chapter'>
Expressions
</h2>

<LinkToContent/>

<p>
An expression specifies the computation of a value by applying operators and methods to operands.
</p>

<gr>
<EBNFCDECL name='Expr'/> = <GEBNFC name='Expr' kind='or'/> .
<EBNFCDECL name='ValueExpr'/> = <GEBNFC name='ValueExpr' kind='or'/> .
</gr>

<h3 class='center-h' data-href='Constant_expression_chapter'>
Constant expression
</h3>

<LinkToContent/>

<p>
Constant expressions may contain only literals and are evaluated at compile time.
</p>

<gr>
<EBNFCDECL name='ConstExpr' groups='Expr'/> = <GEBNFC name='ConstExpr' kind='or'/> .
<EBNFCDECL name='NumberExpr' groups='ConstExpr;ValueExpr'/> = <GEBNFC name='NumberExpr' kind='or'/> .
</gr>

<code data-lng='soc'>
25
30.2
"abc"
</code>

<h3 class='center-h' data-href='Fuzzy_expression_chapter'>
Fuzzy expression
</h3>

<LinkToContent/>

<complete_me/>

<gr>
<EBNFCDECL name='FuzzyExpr' groups='ConstExpr;ValueExpr'/> = <GEBNFC name='FuzzyExpr' kind='or'/> .
<EBNFCDECL name='NumericFuzzyExpr' groups='FuzzyExpr'/> = <EBNFC name='NumberExpr'/> .
<EBNFCDECL name='NonNumericFuzzyExpr' groups='FuzzyExpr'/> = [ { <EBNFC name='PredefinedFuzzyOpsIdentifier'/> } ] <EBNFC name='LinguisticVariableTermIdentifier'/> .
</gr>

<h3 class='center-h' data-href='Logic_expression_chapter'>
Logic expression
</h3>

<LinkToContent/>

<complete_me/>

<gr>
<EBNFCDECL name='LogicExpr'/> = <GEBNFC name='LogicExpr' kind='or'/> .
</gr>

<complete_me/>

<h3 class='center-h' data-href='Grouping_expression_chapter'>
Grouping
</h3>

<LinkToContent/>

<complete_me/>

<gr>
<EBNFCDECL name='LogicGroupingExpr' groups='LogicExpr'/> = "(" <EBNFC name='LogicExpr'/> ")" .
</gr>

<complete_me/>

<h3 class='center-h' data-href='Variable_chapter'>
Variable
</h3>

<LinkToContent/>

<p>
A variable is a storage location for holding a value.
</p>

<p>
Both reading and writing are allowed for variables.
</p>

<p>
Default value of variable is <b>NULL</b>.
</p>

<gr>
<EBNFCDECL name='VarExpr' groups='Expr'/> = <EBNFC name='VarIdentifier'/> .
</gr>

<code data-lng='soc'>
@x
@`target value`
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Variables'>here</a>.
</p>

<h3 class='center-h' data-href='System_variable_chapter'>
System variable
</h3>

<LinkToContent/>

<p>
It's a special variable, which value is only written by engine.
</p>

<p>
Only reading is allowed for system variables.
</p>

<gr>
<EBNFCDECL name='SysVarExpr' groups='Expr'/> = <EBNFC name='SysVarIdentifier'/> .
</gr>

<code data-lng='soc'>
@@host
</code>

<h4 class='center-h' data-href='Available_system_variables_chapter'>
Available system variables
</h4>

<LinkToContent/>

<h5 class='center-h' data-href='Self_system_variable_chapter'>
@@self
</h5>

<LinkToContent/>

<p>
Contains a link to the current <a href='#App_chapter'>App</a>.
</p>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Inheritance'>here</a>.
</p>

<h5 class='center-h' data-href='Host_system_variable_chapter'>
@@host
</h5>

<LinkToContent/>

<p>
Contains a link to the C# methods of this <a href='#App_chapter'>App</a> which are defined at the Unity3D level of the NPC logic or Thing.
</p>

<p>
Allows to call low-level C# methods for interaction with Unity3D.
</p>

<p>
It does nothing when It launched with the "CLI run".
</p>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Calling_host_method_Synchronous'>here</a>.
</p>

<h3 class='center-h' data-href='Logic_variable_chapter'>
Logic variable
</h3>

<LinkToContent/>

<complete_me/>

<gr>
<EBNFCDECL name='LogicVarExpr'/> = <EBNFC name='LogicVarIdentifier'/> .
</gr>

<complete_me/>

<h3 class='center-h' data-href='Channel_chapter'>
Channel
</h3>

<LinkToContent/>

<p>
Channels are a conduit through which you can send and receive values with the stream operator.
</p>

<p>
Now only sending has been implemented.
</p>

<gr>
<EBNFCDECL name='ChannelExpr' groups='Expr'/> = <EBNFC name='ChannelIdentifier'/> .
</gr>

<h4 class='center-h' data-href='Available_system_channels_chapter'>
Available system channels
</h4>

<LinkToContent/>

<h5 class='center-h' data-href='Log_system_channel_chapter'>
@>log
</h5>

<LinkToContent/>

<p>
A channel for writing information to the log in text form.
</p>

<p>
Logging targets are determined by the engine settings.
</p>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Hello_world'>here</a>.
</p>

<h3 class='center-h' data-href='Operators_chapter'>
Operators
</h3>

<LinkToContent/>

<p>
Operators combine operands into expressions.
</p>

<h4 class='center-h' data-href='OperatorPrecedence_chapter'>
Operator precedence
</h4>

<LinkToContent/>

<p>
<table class='std-table' style='width: 400px;' border='1' cellspacing='0'>
    <tr>
	    <th class='center-h'>Precedence</th>
		<th class='center-h'>Operators</th>
		<th class='center-h'>Associativity</th>
    </tr>
	<tr>
	    <th rowspan='5' class='center-h'>
		2
		<p><small>highest</small></p>
		</th>
	    <td>.</td>
	    <td rowspan='5'>Left-to-right</td>	
	</tr>
	<tr>
	    <td>()</td>
	</tr>
	<tr>
	    <td>select</td>
	</tr>
	<tr>
	    <td>?</td>
	</tr>
	<tr>
	    <td>insert</td>
	</tr>
		<tr>
	    <th class='center-h'>3</th>
	    <td>!</td>
		<td>Left-to-right</td>
	</tr>	
	<tr>
	    <th rowspan='4' class='center-h'>9</th>
	    <td>&gt;</td>
	    <td rowspan='4'>Left-to-right</td>
	</tr>
	<tr>
	    <td>&gt;=</td>
	</tr>
	<tr>
	    <td>&lt;</td>
	</tr>
	<tr>
	    <td>&lt;=</td>
	</tr>	
	<tr>
	    <th rowspan='3' class='center-h'>10</th>
	    <td>is</td>
	    <td rowspan='3'>Left-to-right</td>
	</tr>
	<tr>
	    <td>is not</td>
	</tr>
	<tr>
	    <td>use is</td>
	</tr>
	<tr>
	    <th class='center-h'>14</th>
	    <td>&amp;</td>
		<td>Left-to-right</td>
	</tr>
	<tr>
	    <th class='center-h'>15</th>
	    <td>|</td>
		<td>Left-to-right</td>
	</tr>
	<tr>
	    <th class='center-h'>16</th>
	    <td>&gt;&gt;</td>
	    <td>Left-to-right</td>
	</tr>
	<tr>
	    <th class='center-h'>17</th>
	    <td>=</td>
	    <td>Right-to-left</td>
	</tr>
	<tr>
	    <th class='center-h'>18</th>
	    <td>,</td>
	    <td>Left-to-right</td>
	</tr>	
</table>
<p>

<h3 class='center-h' data-href='Assignment_operators_chapter'>
Assignment operators
</h3>

<LinkToContent/>

<h4 class='center-h' data-href='AssignmentOp_chapter'>
Operator "="
</h4>

<LinkToContent/>

<p>
Associativity: Right-to-left.
</p>

<p>
Writes a value from the right operand to the left operand and returns the value of the right operand, which can be used in further calculations.
</p>

<p>
The left operand must be a variable.
</p>

<gr>
<EBNFCDECL name='AssignmentOpExpr' groups='Expr'/> = <TEBNFC name='BinaryOp' param = '='/> .
</gr>

<code data-lng='soc'>
@x = 1;
@r = @b = 1;
</code>

<h3 class='center-h' data-href='Relational_operators_chapter'>
Relational operators
</h3>

<LinkToContent/>

<h4 class='center-h' data-href='IsOp_chapter'>
Operator "is"
</h4>

<LinkToContent/>

<p>
Returns <a href='#Inheritance_chapter'>inheritance rank</a>.
The left operand contains a checked object.
The right-hand operand contains a possible base object.
</p>

<gr>
<EBNFCDECL name='IsOpExpr' groups='Expr'/> = <TEBNFC name='IsOpExprBody'/> .
<EBNFCDECL name='LogicIsOpExpr' groups='LogicExpr'/> = <EBNFC name='LogicIsOpExprBranch'/> "is" [ "not" ] <EBNFC name='LogicIsOpExprBranch'/> .
<EBNFCDECL name='LogicIsOpExprBranch'/> = <EBNFC name='ConstExpr'/> | <EBNFC name='LogicVarExpr'/> .
</gr>

<code data-lng='soc'>
exampleClass is human >> @>log;
</code>

<p>
Using "not" returns 1 if inheritance relationship is not exist between two operands otherwise returns 0.
</p>

<code data-lng='soc'>
exampleClass is not human >> @>log;
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Inheritance'>here</a>.
</p>

<h4 class='center-h' data-href='PredicateOp_chapter'>
Predicate
</h4>

<LinkToContent/>

<complete_me/>

<gr>
<EBNFCDECL name='PredicateIdentifier'/> = <EBNFC name='ConceptIdentifier'/> | <EBNFC name='LogicVarExpr'/> .
<EBNFCDECL name='PredicateOp' groups='LogicExpr'/> = <EBNFC name='PredicateIdentifier'/> "(" <EBNFC name='PredicateParameter'/> [ { "," <EBNFC name='PredicateParameter'/> } ] ")" .
<EBNFCDECL name='PredicateParameter'/> = <EBNFC name='ConstExpr'/> | <EBNFC name='LogicVarExpr'/> .
</gr>

<complete_me/>

<h4 class='center-h' data-href='MoreOp_chapter'>
Operator "&gt;"
</h4>

<LinkToContent/>

<complete_me/>

<gr>
<EBNFCDECL name='MoreOpExpr' groups='LogicExpr'/> = <TEBNFC name='LogicBinaryOp' param = '&gt;'/> .
</gr>

<complete_me/>

<h4 class='center-h' data-href='MoreOrEqvOp_chapter'>
Operator "&gt;="
</h4>

<LinkToContent/>

<complete_me/>

<gr>
<EBNFCDECL name='MoreOrEqvOpExpr' groups='LogicExpr'/> = <TEBNFC name='LogicBinaryOp' param = '&gt;='/> .
</gr>

<complete_me/>

<h4 class='center-h' data-href='LessOp_chapter'>
Operator "&lt;"
</h4>

<LinkToContent/>

<complete_me/>

<gr>
<EBNFCDECL name='LessOpExpr' groups='LogicExpr'/> = <TEBNFC name='LogicBinaryOp' param = '&lt;'/> .
</gr>

<complete_me/>

<h4 class='center-h' data-href='LessOrEqvOp_chapter'>
Operator "&lt;="
</h4>

<LinkToContent/>

<complete_me/>

<gr>
<EBNFCDECL name='LessOrEqvOpExpr' groups='LogicExpr'/> = <TEBNFC name='LogicBinaryOp' param = '&lt;='/> .
</gr>

<complete_me/>

<h3 class='center-h' data-href='LogicOp_chapter'>
    Logic operators
</h3>

<LinkToContent/>

<h4 class='center-h' data-href='AndOp_chapter'>
    Operator "&"
</h4>

<LinkToContent/>

<p>
Оperator of logical conjunction.
</p>

<gr>
<EBNFCDECL name='AndOpExpr' groups='LogicExpr'/> = <TEBNFC name='LogicBinaryOp' param = '&'/> .
</gr>

<code data-lng='soc'>
male($x) & parent($y, $x)
</code>

<h4 class='center-h' data-href='OrOp_chapter'>
Operator "|"
</h4>

<LinkToContent/>

<complete_me/>

<gr>
<EBNFCDECL name='OrOpExpr' groups='LogicExpr'/> = <TEBNFC name='LogicBinaryOp' param = '|'/> .
</gr>

<complete_me/>

<h4 class='center-h' data-href='NotOp_chapter'>
Operator "!"
</h4>

<LinkToContent/>

<complete_me/>

<gr>
<EBNFCDECL name='NotOp' groups='LogicExpr'/> = <TEBNFC name='LogicUnaryOp' param = '!'/> .
</gr>

<complete_me/>

<h3 class='center-h' data-href='Member_access_operators_chapter'>
Member access operators
</h3>

<LinkToContent/>

<h4 class='center-h' data-href='PointerOp_chapter'>
Operator "."
</h4>

<LinkToContent/>

<p>
Gets a reference to a member (specified in the right operand) of an object (specified in the left operand).
</p>

<p>
The right-hand operand must contain the member's identifier.
</p>

<gr>
<EBNFCDECL name='PointerOpExpr' groups='Expr' /> = <TEBNFC name='BinaryOp' param = '.'/> .
</gr>

<code data-lng='soc'>
@@host.`go`
</code>

<h3 class='center-h' data-href='Call_operators_chapter'>
Call operators
</h3>

<LinkToContent/>

<h4 class='center-h' data-href='CallOp_chapter'>
Operator "()"
</h4>

<LinkToContent/>

<p>
Calls an object (or member reference) with parameters specified in round brackets.
</p>

<p>
Whether a call is synchronous or asynchronous is determined by the presence of a &quot;~&quot; before the opening round bracket of the parameter list.
</p>

<gr>
<EBNFCDECL name='CallOpExpr'/> = <EBNFC name='Expr'/> [ "~" ] "(" [ <EBNFC name='NamedParamsOfCallOpExprSet'/> ] ")" .
<EBNFCDECL name='NamedParamsOfCallOpExprSet'/> = <EBNFC name='NamedParamOfCallOpExpr'/> [ { "," <EBNFC name='NamedParamOfCallOpExpr'/> } ] .
<EBNFCDECL name='NamedParamOfCallOpExpr'/> =  <EBNFC name='ConceptIdentifier'/> ":" <EBNFC name='Expr'/> .
</gr>

<p>
A synchronous call is made when there is no &quot;~&quot;.
In this case, the operator returns directly the result of the called method.
</p>

<code data-lng='soc'>
@@host.`go`(to: #@[25, 30]);
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Calling_host_method_Synchronous'>here</a>.
</p>

<p>
An asynchronous call is made when &quot;~&quot; is present.
In this case, the operator returns a reference to the object representing the asynchronous operation.
Working with asynchronous operations will be designed in details in the future.
</p>

<code data-lng='soc'>
@@host.`go`~(to: #@[25, 30]);
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Calling_host_method_Asynchronous'>here</a>.
</p>

<h3 class='center-h' data-href='Stream_operators_chapter'>
Stream operators
</h3>

<LinkToContent/>

<h4 class='center-h' data-href='StreamOp_chapter'>
Operator ">>"
</h4>

<LinkToContent/>

<p>
Copies data from a source (<EBNFC name='SourceOfStreamOpExpr'/>) to a destination <EBNFC name='DestOfStreamOpExpr'/>.
</p>

<p>
The source (<EBNFC name='SourceOfStreamOpExpr'/>) cannot be a <a href='#Channel_chapter'>channel</a>.
The destination (<EBNFC name='DestOfStreamOpExpr'/>) must only be a <a href='#Channel_chapter'>channel</a>.
</p>

<p>
In the future I am going to extend the functionality of this operator.
</p>

<gr>
<EBNFCDECL name='SourceOfStreamOpExpr'/> = <EBNFC name='Expr'/> .
<EBNFCDECL name='DestOfStreamOpExpr'/> = <EBNFC name='Expr'/> .
<EBNFCDECL name='LeftRightStreamOpExpr' groups='Expr'/> = <EBNFC name='SourceOfStreamOpExpr'/> ">>" <EBNFC name='DestOfStreamOpExpr'/> .
</gr>

<code data-lng='soc'>
"End" >> @>log;
select {: son($x, $y) :} >> @>log;
</code>

<h3 class='center-h' data-href='Data_source_operators_chapter'>
Data source operators
</h3>

<LinkToContent/>

<h4 class='center-h' data-href='SelectOp_chapter'>
select (Operator "?")
</h4>

<LinkToContent/>

<p>
Performs a logical search and returns an object which contains the results of the search.
</p>

<p>
Now the result of a logical search can only be logged for demonstrating this search.
In the future, I am going to develop means for practical using results of logical searching in game development.
</p>

<gr>
<EBNFCDECL name='SelectOpExpr' groups='Expr'/> = ( "select" | "?" ) ( <EBNFC name='FactDecl'/> ) .
</gr>

<p>
Searched values are defined by the <a href='#QuestionVarIdentifier_chapter'>question variables</a> in the searching query.
</p>

<code data-lng='soc'>
select {: son($x, $y) :} >> @>log;
</code>

<console>
&lt;yes&gt;
$y = #piter; $x = #tom
</console>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Logic_queries_Example_1'>here</a>.
</p>

<code data-lng='soc'>
? {: son($x, $y) :} >> @>log;
</code>

<console>
&lt;yes&gt;
$y = #piter; $x = #tom
</console>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Logic_queries_Example_1'>here</a>.
</p>

<p>
<a href='#QuestionVarIdentifier_chapter'>Question variables</a> can be used for searching <a href='#Fact_chapter'>predicates</a>.
</p>

<code data-lng='soc'>
? {: $z(#Alisa_12, $x) :} >> @>log;
</code>

<console>
&lt;yes&gt;
$z = can(bird,fly); $x = fly
</console>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Logic_queries_Example_2'>here</a>.
</p>

<p>
In the absence of <a href='#QuestionVarIdentifier_chapter'>question variables</a>, only general result will be obtained: is it possible or not to find such facts in the knowledge database.
</p>

<code data-lng='soc'>
? {: can(#Alisa_12, fly) :} >> @>log;
</code>

<console>
&lt;yes&gt;
</console>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Logic_queries_Example_2'>here</a>.
</p>

<h4 class='center-h' data-href='InsertOp_chapter'>
insert
</h4>

<LinkToContent/>

<p>
Writes a <a href='#Fact_chapter'>fact</a> into the knowledge storage of current <a href='#App_chapter'>App</a>. 
Returns the added fact.
</p>

<gr>
<EBNFCDECL name='InsertOpExpr' groups='Expr'/> = "insert" <EBNFC name='FactDecl'/> .
</gr>

<code data-lng='soc'>
insert {: >: { bird (#1234) } :};
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Logic_queries_Example_3'>here</a>.
</p>

<h2 class='center-h' data-href='Statements_chapter'>
Statements
</h2>

<LinkToContent/>

<p>
Statements control execution.
</p>

<gr>
<EBNFCDECL name='StatementsSet'/> = <TEBNFC name='DeclSet' param = 'Statement'/> .
<EBNFCDECL name='Statement'/> = <GEBNFC name='Statement' kind='or' /> .
</gr>

<h3 class='center-h' data-href='Expression_statement_chapter'>
Expression statement
</h3>

<LinkToContent/>

<p>
Executes an expression line.
</p>

<gr>
<EBNFCDECL name='ExpressionStatement' groups='Statement'/> = <EBNFC name='Expr'/> ";" .
</gr>

<code data-lng='soc'>
@@host.`go`~(to: #@[25, 30]);
</code>

<h3 class='center-h' data-href='UseIsStatement_chapter'>
"use is" statement
</h3>

<LinkToContent/>

<p>
Sets an inheritance relationship (&quot;is a&quot;) between two objects.
</p>

<gr>
<EBNFCDECL name='UseIsOpExpr' groups='Statement'/> = "use" <TEBNFC name='IsOpExprBody'/> .
</gr>

<code data-lng='soc'>
use @@self is linux;
use exampleClass is human;
use exampleClass is [0.5] human;
use #`Alisa 12` is [0.6] human;
</code>

<p>
Using &quot;not&quot; removes the inheritance relationship.
</p>

<code data-lng='soc'>
use exampleClass is not human;
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Inheritance'>here</a>.
</p>

<div class='templates'>
    <TEBNFCDECL name='BaseIdentifier'>
	    (( <EBNFC name='Letter'/> { <EBNFC name='Letter'/> | <EBNFC name='DecimalDigit'/> } ) | ( "`" { <EBNFC name='UnicodeChar'/> } "`"))
	</TEBNFCDECL>
	
	<TEBNFCDECL name='DeclSet' param='_ExprType'>
	    <EBNFC name='_ExprType'/> [{ <EBNFC name='_ExprType'/> }]
	</TEBNFCDECL>
	
	<TEBNFCDECL name='BinaryOp' param='_OpLiteral'>
	    <TEBNFC name='BinaryOp_2' param = '"_OpLiteral"'/>
	</TEBNFCDECL>
	
	<TEBNFCDECL name='BinaryOp_2' param='_OpLiteral'>
	    <TEBNFC name='BinaryOp_base' param = '_OpLiteral' param2="<EBNFC name='Expr'/>"/>
	</TEBNFCDECL>
	
	<TEBNFCDECL name='LogicBinaryOp' param='_OpLiteral'>
	    <TEBNFC name='LogicBinaryOp_2' param = '"_OpLiteral"'/>
	</TEBNFCDECL>
	
	<TEBNFCDECL name='LogicBinaryOp_2' param='_OpLiteral'>
	    <TEBNFC name='BinaryOp_base' param = '_OpLiteral' param2="<EBNFC name='LogicExpr'/>"/>
	</TEBNFCDECL>
	
	<TEBNFCDECL name='BinaryOp_base' param='_OpLiteral' param2='_ExpType'>
	    _ExpType _OpLiteral _ExpType
	</TEBNFCDECL>
	
	<TEBNFCDECL name='LogicUnaryOp' param='_OpLiteral'>
	    <TEBNFC name='LogicUnaryOp_2' param = '"_OpLiteral"' param2="<EBNFC name='LogicExpr'/>"/>
	</TEBNFCDECL>
	
	<TEBNFCDECL name='LogicUnaryOp_2' param='_OpLiteral'>
	    <TEBNFC name='UnaryOp_base' param = '_OpLiteral' param2="<EBNFC name='LogicExpr'/>"/>
	</TEBNFCDECL>
	
	<TEBNFCDECL name='UnaryOp_base' param='_OpLiteral' param2='_ExpType'>
	    _OpLiteral _ExpType
	</TEBNFCDECL>	
	
	<TEBNFCDECL name='InheritanceDeclItem'>
	    [ "[" <EBNFC name='FuzzyExpr'/> "]" ] ( <GEBNFC name='TypeIdentifier' kind='or'/> )
	</TEBNFCDECL>
	
	<TEBNFCDECL name='IsOpExprBody'>
	    ( <GEBNFC name='TypeIdentifier' kind='or'/> ) "is" ( ( <TEBNFC name='InheritanceDeclItem'/> ) | ( [ "not" ] ( <GEBNFC name='TypeIdentifier' kind='or'/> ) ) )
	</TEBNFCDECL>
</div>

<a href='/docs/lng_examples/index.html#'></a>

<!--
<h2 class='center-h' data-href=''>

</h2>

<h3 class='center-h' data-href=''>

</h3>

<h4 class='center-h' data-href=''>

</h4>

<h2 class='center-h' data-href='_chapter'>

</h2>

<h3 class='center-h' data-href='_chapter'>

</h3>

<LinkToContent/>

<h4 class='center-h' data-href='_chapter'>

</h4>

<h5 class='center-h' data-href='_chapter'>

</h5>

<p>

</p>

<complete_me/>

<code data-lng='soc'>

</code>

<code data-lng='soc' example-href='/docs/lng_examples/.zip'>

</code>

<console>

</console>

<gr>
<EBNFCDECL name='' groups=''/> =  .
</gr>

<gr>
<EBNFCDECL name=''/> =  .
</gr>

<GEBNFC name='' kind=''/>

<EBNFC name=''/>

<TEBNFC name=''/>

-->
