<h1 class='center-h'>Language Specification</h1>

<ContentsPlace/>

<h2 class='center-h' data-href='Introduction_chapter'>
Introduction
</h2>

<LinkToContent/>

<p>
This is manual for SymOntoClay DSL.
</p>

<p>
This document contains all implemented grammar. 
You can use It.
</p>

<p>
SymOntoClay DSL is in development now. 
So new parts will be added here right after implementation and internal testing. 
I will try to do this as soon as possible.
</p>

<h2 class='center-h' data-href='Notation_chapter'>
Notation
</h2>

<LinkToContent/>

<p>
The syntax is specified using <ico target='Wikipedia'/><a href='https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form'>Extended Backus-Naur Form (EBNF)</a>.
</p>

<h2 class='center-h' data-href='Source_code_representation_chapter'>
Source code representation
</h2>

<LinkToContent/>

<p>
There are two views of source code file: as set of characters and as set of code entities.
</p>

<h3 class='center-h' data-href='Symbols_chapter'>
Symbols
</h3>

<LinkToContent/>

<h4 class='center-h' data-href='Characters_chapter'>
Characters
</h4>

<LinkToContent/>

<p>
Source code is Unicode text encoded in <ico target='Wikipedia'/><a href='https://en.wikipedia.org/wiki/UTF-8'>UTF-8</a>.
</p>

<gr>
<EBNFCDECL name='Newline'/> = /* the Unicode code point U+000A */ .
<EBNFCDECL name='UnicodeChar'/> = /* an arbitrary Unicode code point except <EBNFC name='Newline'/> */ .
</gr>

<h4 class='center-h' data-href='Letters_and_digits_chapter'>
Letters and digits
</h4>

<LinkToContent/>

<p>
The underscore character _ (U+005F) is considered a letter.
</p>

<gr>
<EBNFCDECL name='Letter'/> = "A" ... "Z" | "a" ... "z" | "_" .
<EBNFCDECL name='DecimalDigit'/> = "0" … "9" .
</gr>

<h3 class='center-h' data-href='Kind_of_source_code_files_chapter'>
Kind of source code files
</h3>

<LinkToContent/>

<p>
There are different kinds of source code files which can contain different code entities.
</p>

<gr>
<EBNFCDECL name='SourceCodeFileContent'/> = <GEBNFC name='SourceCodeFileContent' kind='or'/> .
</gr>

<h4 class='center-h' data-href='World_source_code_file_chapter'>
World source code file
</h4>

<LinkToContent/>

<p>
The file contains <a href='#World_chapter'>World declaration</a>.
There can be only one World declaration in the file.
Also this file can contain other content which is allowed in <a href='#Class_source_code_file_chapter'>Class source code file</a>.
</p>

<gr>
<EBNFCDECL name='WorldSourceCodeFileContent' groups='SourceCodeFileContent'/> = [ <EBNFC name='ClassSourceCodeFileContent'/> ] <GEBNFC name='WorldSourceCodeFileContent' kind='op_and'/> [ <EBNFC name='ClassSourceCodeFileContent'/> ] .
</gr>

<h4 class='center-h' data-href='App_source_code_file_chapter'>
App source code file
</h4>

<LinkToContent/>

<p>
The file contains <a href='#App_chapter'>App declaration</a>.
There can be only one App declaration in the file.
Also this file can contain other content which is allowed in <a href='#Class_source_code_file_chapter'>Class source code file</a>.
</p>

<gr>
<EBNFCDECL name='AppSourceCodeFileContent' groups='SourceCodeFileContent'/> = [ <EBNFC name='ClassSourceCodeFileContent'/> ] <GEBNFC name='AppSourceCodeFileContent' kind='op_and'/> [ <EBNFC name='ClassSourceCodeFileContent'/> ] .
</gr>

<h4 class='center-h' data-href='Class_source_code_file_chapter'>
Class source code file
</h4>

<LinkToContent/>

<p>
The file contains all possible code entities, except <a href='#World_chapter'>World</a> and <a href='#App_chapter'>App</a> declarations.
There exist special source code files for these code entities.
But content of Class source code file can be included into <a href='#World_source_code_file_chapter'>World</a> and <a href='#App_source_code_file_chapter'>App</a> source code files.
</p>

<gr>
<EBNFCDECL name='ClassSourceCodeFileContent' groups='SourceCodeFileContent'/> = <GEBNFC name='ClassSourceCodeFileContent' kind='op_and'/> .
</gr>

<h2 class='center-h' data-href='Lexical_elements_chapter'>
Lexical elements
</h2>

<LinkToContent/>

<h3 class='center-h' data-href='Comments_chapter'>
Comments
</h3>

<LinkToContent/>

<p>
SymOntoClay supports both single and multiline comments.
It is a programmer-readable explanation or annotation of source code like in many other programming languages.
Also It helps to cut temporarily unused code fragments.
</p>

<gr>
<EBNFCDECL name='SingleLineComment'/> = "//" [{ <EBNFC name='UnicodeChar'/> }] <EBNFC name='NewLine'/> .
</gr>

<code data-lng='soc'>
//@r = @b = 1;
</code>

<gr>
<EBNFCDECL name='MultiLineComment'/> = "/*" [{ <EBNFC name='UnicodeChar'/> }] "*/" .
</gr>

<code data-lng='soc'>
 /*@r = @b = 1;
@bx >> @>log;*/
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Comments'>here</a>.
</p>

<h3 class='center-h' data-href='Tokens_chapter'>
Tokens
</h3>

<LinkToContent/>

<p>
Tokens form the vocabulary of the SymOntoClay DSL.
There are four classes: identifiers, keywords, operators and punctuation, and literals. 
</p>

<h3 class='center-h' data-href='Identifiers_chapter'>
Identifiers
</h3>

<LinkToContent/>

<p>
Identifiers name code entities.
</p>

<p>
Since SymOntoClay has many kinds of code entities, I have decided It will be better to recognize kind of code entity by identifier.
So SymOntoClay has many kinds of identifiers with different prefixes.
Each of these identifiers has Its own meaning in code. 
</p>

<gr>
<EBNFCDECL name='Identifier'/> = <GEBNFC name='Identifier' kind='or' /> .
</gr>

<h4 class='center-h' data-href='ConceptIdentifier_chapter'>
Concept identifier
</h4>

<LinkToContent/>

<p>
Names a concept (or type).
</p>

<gr>
<EBNFCDECL name='ConceptIdentifier' groups='Identifier;TypeIdentifier;ConstExpr;ValueExpr;ConditionalEntityExpr'/> = <TEBNFC name='BaseIdentifier'/> .
</gr>

<code data-lng='soc'>
a
_a
a2
aB
ab_1
Great_Britain
`Great Britain`
</code>

<h5 class='center-h' data-href='Predefined_concept_identifiers_chapter'>
Predefined concept identifiers
</h5>

<LinkToContent/>

<p>
Some concepts are predefined and reperesent code entities.
</p>

<ul>
    <li>
	    <b><a href='#App_chapter'>app</a></b>
	</li>
	
    <li>
	    <b><a href='#Class_chapter'>class</a></b>
	</li>

    <li>
	    <b><a href='#World_chapter'>world</a></b>
	</li>

    <li>
	    <b><a href='#Fuzzy_expression_chapter'>fuzzy</a></b>
	</li>

    <li>
	    <b><a href='#NumberExpr'>number</a></b>
	</li>

    <li>
	    <b><a href='#String_literal_chapter'>string</a></b>
	</li>
	
	<li>
	    <b><a href='#Fuzzy_expression_chapter'>true</a></b>
	</li>
	
	<li>
	    <b><a href='#Fuzzy_expression_chapter'>false</a></b>
	</li>
</ul>

<h4 class='center-h' data-href='InstanceIdentifier_chapter'>
Instance identifier
</h4>

<LinkToContent/>

<p>
Names an instance of concept.
</p>

<gr>
<EBNFCDECL name='InstanceIdentifier' groups='Identifier;TypeIdentifier;ConstExpr;ValueExpr'/> = "#" <TEBNFC name='BaseIdentifier'/> .
</gr>

<code data-lng='soc'>
#123
</code>

<h4 class='center-h' data-href='VarIdentifier_chapter'>
Variable identifier
</h4>

<LinkToContent/>

<p>
Names a <a href='#Variable_chapter'>variable</a>.
</p>

<gr>
<EBNFCDECL name='VarIdentifier' groups='Identifier;ValueExpr'/> = "@" <TEBNFC name='BaseIdentifier'/> .
</gr>

<code data-lng='soc'>
@a
</code>

<h4 class='center-h' data-href='SysVarIdentifier_chapter'>
System variable identifier
</h4>

<LinkToContent/>

<p>
Names a <a href='#System_variable_chapter'>system variable</a>
</p>

<gr>
<EBNFCDECL name='SysVarIdentifier' groups='Identifier;ValueExpr'/> = "@@" <TEBNFC name='BaseIdentifier'/> .
</gr>

<code data-lng='soc'>
@@host
</code>

<h4 class='center-h' data-href='LogicVarIdentifier_chapter'>
Logic variable identifier
</h4>

<LinkToContent/>

<p>
Names special variable for <a href='#Logic_rule_chapter'>Logic rule</a> or <a href='#Fact_chapter'>Fact</a>.
</p>

<gr>
<EBNFCDECL name='LogicVarIdentifier' groups='Identifier'/> = "$" <TEBNFC name='BaseIdentifier'/> .
</gr>

<code data-lng='soc'>
$x
</code>

<h4 class='center-h' data-href='ChannelIdentifier_chapter'>
Channel identifier
</h4>

<LinkToContent/>

<p>
Names <a href='#Channel_chapter'>Channel</a>.
</p>

<gr>
<EBNFCDECL name='ChannelIdentifier' groups='Identifier;ValueExpr'/> = "@>" <TEBNFC name='BaseIdentifier'/> .
</gr>

<code data-lng='soc'>
@>log
</code>

<h3 class='center-h' data-href='Keywords_chapter'>
Keywords
</h3>

<LinkToContent/>

<p>
Some words is used as keywords in syntax.
But the words can be used as identifiers in other places. 
</p>

<keywords cols='4'>
    <kw name='app'/>
	<kw name='class'/>
	<kw name='world'/>
	<kw name='is'/>
	<kw name='on'/>
	<kw name='use'/>
	<kw name='not'/>
	<kw name='select'/>
	<kw name='insert'/>
	<kw name='linvar'/>
	<kw name='for'/>
	<kw name='range'/>
	<kw name='terms'/>
	<kw name='constraints'/>
	<kw name='inheritance'/>
	<kw name='relation'/>
	<kw name='inh'/>
	<kw name='rel'/>
	<kw name='null'/>
	<kw name='fun'/>
	<kw name='error'/>
	<kw name='try'/>
	<kw name='catch'/>
	<kw name='where'/>
	<kw name='else'/>
	<kw name='ensure'/>
	<kw name='action'/>
	<kw name='op'/>
	<kw name='complete'/>
	<kw name='break'/>
	<kw name='await'/>
	<kw name='alias'/>	
	<kw name='repeat'/>
	<kw name='while'/>
	<kw name='continue'/>
	<kw name='return'/>
	<kw name='if'/>
	<kw name='elif'/>
	<kw name='true'/>
	<kw name='false'/>
	<kw name='var'/>
	<kw name='default'/>
	<kw name='state'/>
	<kw name='enter'/>
	<kw name='leave'/>
	<kw name='states'/>
	<kw name='as'/>
</keywords>

<h3 class='center-h' data-href='Operators_and_punctuation_chapter'>
Operators and punctuation
</h3>

<LinkToContent/>

<p>
The following character sequences represent <a href='#Operators_chapter'>operators</a> and punctuation:
</p>

<items cols='4'>
    <item value='?'/>
	<item value='='/>
	<item value='+'/>
	<item value='-'/>
	<item value='*'/>
	<item value='/'/>
	<item value='&'/>
	<item value='|'/>
	<item value='!'/>
	<item value='>'/>
	<item value='>='/>
	<item value='<'/>
	<item value='<='/>
	<item value='>>'/>
	<item value='=>'/>
	<item value='->'/>
	<item value=':>'/>
	<item value=':'/>
	<item value=';'/>
	<item value=','/>
	<item value='('/>
	<item value=')'/>
	<item value='['/>
	<item value=']'/>
	<item value='{'/>
	<item value='}'/>
	<item value='{:'/>
	<item value=':}'/>
</items>

<h3 class='center-h' data-href='Integer_literal_chapter'>
Integer literal
</h3>

<LinkToContent/>

<p>
An integer literal is a sequence of digits representing an <a href='#Constant_expression_chapter'>integer constant</a>.
Now integer literal has only decimal base.
</p>

<gr>
<EBNFCDECL name='IntegerLiteral' groups='NumberExpr'/> = <EBNFC name='DecimalDigit'/> [ { <EBNFC name='DecimalDigit'/> } ] .
</gr>

<code data-lng='soc'>
42
</code>

<h3 class='center-h' data-href='Floating_point_literal_chapter'>
Floating-point literal
</h3>

<LinkToContent/>

<p>
A floating-point literal is a decimal representation of a <a href='#Constant_expression_chapter'>floating-point constant</a>.
</p>

<p>
A floating-point literal consists of an integer part (decimal digits), a decimal point and a fractional part (decimal digits).
Now floating-point literal has only decimal base.
</p>

<gr>
<EBNFCDECL name='FloatPointLiteral' groups='NumberExpr'/> = (  <EBNFC name='DecimalDigit'/> [ { <EBNFC name='DecimalDigit'/> } ] ) "." (  <EBNFC name='DecimalDigit'/> [ { <EBNFC name='DecimalDigit'/> } ] ) .
</gr>

<code data-lng='soc'>
36.6
</code>

<h3 class='center-h' data-href='String_literal_chapter'>
String literal
</h3>

<LinkToContent/>

<p>
A string literal represents a <a href='#Constant_expression_chapter'>string constant</a> obtained from concatenating a sequence of characters.
</p>

<gr>
<EBNFCDECL name='StringLiteral' groups='ConstExpr;ValueExpr'/> = (""" <EBNFC name='UnicodeChar'/> [{ <EBNFC name='UnicodeChar'/> }] """) | ("'" <EBNFC name='UnicodeChar'/> [{ <EBNFC name='UnicodeChar'/> }] "'") .
</gr>

<code data-lng='soc'>
"abc"
'abc'
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Hello_world'>here</a>.
</p>

<h3 class='center-h' data-href='NULL_literal_chapter'>
NULL literal
</h3>

<LinkToContent/>

<p>
The <b>NULL</b> literal represents special value which means unknown or undefined data.
</p>

<gr>
<EBNFCDECL name='NullLiteral' groups='ConstExpr;ValueExpr;LogicExpr;ImperativeLogicExpr'/> = "null" .
</gr>

<code data-lng='soc'>
@a = null;
</code>

<code data-lng='soc'>
{: age(#Tom, null) :}
</code>

<h2 class='center-h' data-href='Objects_declaration_chapter'>
Objects declaration
</h2>

<LinkToContent/>

<p>
Everything is an object.
The classical type-instance relationship is using, but there is not strict and fundamental distinction between the two.
</p>

<p>
Some objects have a special meaning.
For example <b>Class</b> represents a general concept which can have many instances.
</p>

<p>
Some objects have special engine support to make writing code easier and faster, or as entry point locators.
</p>

<h3 class='center-h' data-href='Class_chapter'>
Class
</h3>

<LinkToContent/>

<p>
Represents a general concept which can have many instances.
</p>

<p>
In general, It is similar to the concept 'class' in other OOP languages.
</p>

<gr>
<EBNFCDECL name='ClassDeclSet' groups='ClassSourceCodeFileContent'/> = <TEBNFC name='DeclSet' param = 'ClassDecl'/> .
<EBNFCDECL name='ClassDecl'/> = "class" <EBNFC name='ConceptIdentifier'/> [ <EBNFC name='InheritanceDecl'/> ] <br/> "{"<br/> [ <TEBNFC name='DeclSet' param = 'ClassBodyContent'/> ] <br/> "}" .
<EBNFCDECL name='ClassBodyContent'/> = <GEBNFC name='ClassBodyContent' kind='op_and'/> .
</gr>

<code data-lng='soc'>
class exampleClass
{
}
</code>

<code data-lng='soc'>
class exampleClass is human, [0.1] animal
{
}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Logic_queries_Example_1'>here</a>.
</p>

<h3 class='center-h' data-href='App_chapter'>
App
</h3>

<LinkToContent/>

<p>
It is root object and entry point of <a href='/docs/engine_concepts/index.html#Common_concepts_App'>App</a>.
</p>

<gr>
<EBNFCDECL name='AppIdentifier'/> = <GEBNFC name='TypeIdentifier' kind='or'/> .
<EBNFCDECL name='AppDecl' groups='AppSourceCodeFileContent'/> = "app" <EBNFC name='AppIdentifier'/> [ <EBNFC name='InheritanceDecl'/> ] <br/> "{"<br/> [ <TEBNFC name='DeclSet' param = 'AppBodyContent'/> ] <br/> "}" .
<EBNFCDECL name='AppBodyContent'/> = [ <GEBNFC name='AppBodyContent' kind='op_and'/> ] .
</gr>

<code data-lng='soc'>
app PeaceKeeper
{
    on Init => 
	{
    }
}
</code>

<code data-lng='soc'>
app PeaceKeeper is human
{
    on Init => 
	{
    }
}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Hello_world'>here</a>.
</p>

<h3 class='center-h' data-href='World_chapter'>
World
</h3>

<LinkToContent/>

<p>
It is root object of <a href='/docs/engine_concepts/index.html#Common_concepts_World'>World</a>.
</p>

<gr>
<EBNFCDECL name='WorldIdentifier'/> = <GEBNFC name='TypeIdentifier' kind='or'/> .
<EBNFCDECL name='WorldDecl' groups='WorldSourceCodeFileContent'/> = "world" <EBNFC name='WorldIdentifier'/> [ <EBNFC name='InheritanceDecl'/> ] <br/> "{"<br/> [ <TEBNFC name='DeclSet' param = 'WorldBodyContent'/> ] <br/> "}" .
<EBNFCDECL name='WorldBodyContent'/> = <GEBNFC name='WorldBodyContent' kind='op_and'/> .
</gr>

<code data-lng='soc'>
world `Lost town`
{
}
</code>

<h3 class='center-h' data-href='Conditional_entity_chapter'>
Conditional entity
</h3>

<LinkToContent/>

<p>
Conditional entity represents an entity from the world around, which is described by condition.
During code execution the condition entity will be resolved to concrete entity from the world around, which is fit to the condition.
</p>

<gr>
<EBNFCDECL name='ConditionalEntityDecl' groups='Expr'/> = ( "#@(" <EBNFC name='ConditionalEntityExpr'/> ")" ) | ( "#@{:" ( <EBNFC name='FactSection'/> | <EBNFC name='FactSentence'/> ) ":}" ) .
<EBNFCDECL name='ConditionalEntityExpr'/> = <GEBNFC name='ConditionalEntityExpr' kind='or'/> .
</gr>

<code data-lng='soc'>
#@(barrel);
#@{: barrel($_) :}
#@(hold(I, this) & weapon)
#@(hold(I, this) & (weapon & dog) )
#@(hold(#a, this) & (weapon & dog) )
#@(color = black)
#@{: >: { barrel($_) } :}
</code>

<p>
There exist two kind of expression for conditional entity:
    <ul>
	    <li>
		    Short expression also called <a href='#ConditionalEntityExpr'>ConditionalEntityExpr</a>
		</li>
		
		<li>
		    Fact with <a href='#this_logic_variable_chapter'>special logic variable $_</a>
		</li>
	</ul>
</p>

<p>
The short expression is more graceful for describing conditional entity.
But fact can describe conditional entity more precisely and with contractions which are absent in short expression now. 
</p>

<p>
During resolving short expression is converted to fact.
The following expressions describe the same condition:
</p>

<code data-lng='soc'>
#@(barrel);
#@{: barrel($_) :}
#@{: >: { barrel($_) } :}
</code>

<p>
Concept <b>this</b> is converted to <b>$_</b>:
</p>

<code data-lng='soc'>
#@(hold(I, this) & weapon)
#@{: hold(I, $_) & weapon($_) :}
</code>

<p>
Example of using:
</p>

<code data-lng='soc'>
@@host.take(#@(gun));
</code>

<h3 class='center-h' data-href='Waypoint_chapter'>
Waypoint
</h3>

<LinkToContent/>

<p>
Represents a point in space, abstracting from the game engine's coordinate system.
</p>

<p>
Coordinates of points are presented in a more convenient way, similar to that is used by people in everyday life.
</p>

<p>
Now It is supported the coordinate system what is similar to Polar coordinate system.
The radial coordinate is the distance from center of NPC to target.
And the angular coordinate (in degrees only) starts from the sagittal plane of NPC in front of the NPC.
</p>

<p>
SymOntoClay engine provides mapping to the game engine's coordinate system.
</p>

<gr>
<EBNFCDECL name='WaypointDecl' groups='Expr'/> = "#@" "[" ( <EBNFC name='WaypointDistance'/> "," <EBNFC name='WaypointAngleInDegrees'/> ) | ( <EBNFC name='WaypointDistance'/> ) "]" .
<EBNFCDECL name='WaypointDistance'/> = <EBNFC name='NumberExpr'/> .
<EBNFCDECL name='WaypointAngleInDegrees'/> = <EBNFC name='NumberExpr'/> .
</gr>

<code data-lng='soc'>
#@[25, 30]
#@[25]
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Calling_host_method_Synchronous'>here</a>.
</p>

<h3 class='center-h' data-href='Linguistic_variable_chapter'>
Linguistic variable
</h3>

<LinkToContent/>

<p>
Provides non-numeric fuzzy values.
</p>

<p>
You can read more details in <ico t='w'/><a href='https://en.wikipedia.org/wiki/Fuzzy_logic#Linguistic_variables'>here</a>.
</p>

<gr>
<EBNFCDECL name='LinguisticVariableDeclSet' groups='ClassSourceCodeFileContent;ClassBodyContent;AppSourceCodeFileContent;WorldBodyContent;ActionBodyContent'/> = <TEBNFC name='DeclSet' param = 'LinguisticVariableDecl'/> .
<EBNFCDECL name='LinguisticVariableDecl'/> = "linvar" <EBNFC name='ConceptIdentifier'/> [ "for" <EBNFC name='LinguisticVariableDomainDecl'/> ] <br/> "{"<br/> [ <EBNFC name='LinguisticVariableBodyContent'/> ] <br/> "}" .
<EBNFCDECL name='LinguisticVariableDomainDecl'/> = "range" ( "(" | "[" ) ( "-∞" | "*" | <EBNFC name='NumberExpr'/> ) "," ( "+∞" | "*" | <EBNFC name='NumberExpr'/> ) ( ")" | "]" ) .
<EBNFCDECL name='LinguisticVariableBodyContent'/> = <GEBNFC name='LinguisticVariableBodyContent' kind='or'/> .
<EBNFCDECL name='LinguisticVariableFullBodyContent' groups='LinguisticVariableBodyContent'/> = <GEBNFC name='LinguisticVariableFullBodyContent' kind='op_and'/> .
<EBNFCDECL name='LinguisticVariableShortBodyContent' groups='LinguisticVariableBodyContent'/> = <EBNFC name='LinguisticVariableTermsItemsSet'/> .
<EBNFCDECL name='LinguisticVariableTermIdentifier'/> = <EBNFC name='ConceptIdentifier'/> .
<EBNFCDECL name='LinguisticVariableTermsDeclSet' groups='LinguisticVariableFullBodyContent'/> = <TEBNFC name='DeclSet' param = 'LinguisticVariableTermsDecl'/> .
<EBNFCDECL name='LinguisticVariableTermsDecl'/> = "terms" ":"<br/> <EBNFC name='LinguisticVariableTermsItemsSet'/> .
<EBNFCDECL name='LinguisticVariableTermsItemsSet'/> = <TEBNFC name='DeclSet' param = 'LinguisticVariableTermsItem'/> .
<EBNFCDECL name='LinguisticVariableTermsItem'/> = <EBNFC name='LinguisticVariableTermIdentifier'/> "=" <EBNFC name='PredefinedFuzzyMembershipFunction'/> ";" .
<EBNFCDECL name='LinguisticVariableConstraintsDeclSet' groups='LinguisticVariableFullBodyContent'/> = <TEBNFC name='DeclSet' param = 'LinguisticVariableConstraintsDecl'/> .
<EBNFCDECL name='LinguisticVariableConstraintsDecl'/> = "constraints" ":"<br/> <EBNFC name='LinguisticVariableConstraintsItemsSet'/> .
<EBNFCDECL name='LinguisticVariableConstraintsItemsSet'/> = <TEBNFC name='DeclSet' param = 'LinguisticVariableConstraintsItem'/> .
<EBNFCDECL name='LinguisticVariableConstraintsItem'/> = "for" ( <EBNFC name='LinguisticVariableConstraintsItemForInheritance'/> | <EBNFC name='LinguisticVariableConstraintsItemForRelation'/> ) ";" .
<EBNFCDECL name='LinguisticVariableConstraintsItemForInheritance'/> = "inheritance" | "inh" .
<EBNFCDECL name='LinguisticVariableConstraintsItemForRelation'/> = ( "relation" | "rel" ) <EBNFC name='ConceptIdentifier'/> .
</gr>

<code data-lng='soc'>
linvar age for range (0, 150]
{
    constraints:
	    for inheritance;
	    for relation age;

    terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<code data-lng='soc'>
linvar logic for range [0, 1]
{
    constraints:
	    for inheritance;

	terms:
		minimal = L(0, 0.1);
		low = Trapezoid(0, 0.05, 0.3, 0.45);
		middle = Trapezoid(0.3, 0.4, 0.6, 0.7);
		high = Trapezoid(0.55, 0.7, 0.95, 1);
		maximal = S(0.9, 1);
}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Linguistic_variable'>here</a>.
</p>

<h4 class='center-h' data-href='Linguistic_variable_Terms_chapter'>
Terms
</h4>

<LinkToContent/>

<p>
Terms are non-numeric fuzzy values.
</p>

<p>
Term combines its name and membership function.
See <EBNFC name='LinguisticVariableTermsItem'/> in SymOntoClay's garammar description.
</p>

<p>
SymOntoClay still doesn't contain means for full defining function's body.
The means will be added in the future, but now you can use <a href='#Linguistic_variable_Predefined_membership_functions_chapter'>Predefined membership functions</a> instead of manual defining.
</p>

<p>
Each term must be terminated by ";".
</p>

<code data-lng='soc'>
linvar logic
{
	terms:
		minimal = L(0, 0.1);
		low = Trapezoid(0, 0.05, 0.3, 0.45);
		middle = Trapezoid(0.3, 0.4, 0.6, 0.7);
		high = Trapezoid(0.55, 0.7, 0.95, 1);
		maximal = S(0.9, 1);
}
</code>

<p>
If Linguistic variable consists only of terms, the terms can be put directly into body of the Linguistic variable.
</p>

<code data-lng='soc'>
linvar logic
{
	minimal = L(0, 0.1);
	low = Trapezoid(0, 0.05, 0.3, 0.45);
	middle = Trapezoid(0.3, 0.4, 0.6, 0.7);
	high = Trapezoid(0.55, 0.7, 0.95, 1);
	maximal = S(0.9, 1);
}
</code>

<p>
A term can be used in <EBNFC name='FuzzyExpr'/> as <EBNFC name='NonNumericFuzzyExpr'/>.
It looks as using usual <a href='#ConceptIdentifier'>concept</a> instead of <a href='#NumberExpr'>numeric value</a>.
</p>

<code data-lng='soc'>
app PeaceKeeper is [middle] exampleClass
{
}
</code>

<code data-lng='soc'>
{: age(#Tom, `teenager`) :}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Inheritance'>here</a> and <a href='/docs/lng_examples/index.html#Logic_queries_Example_5'>here</a>.
</p>

<p>
Terms can be combined with <a href='#Linguistic_variable_Predefined_operators_chapter'>fuzzy operators</a>.
</p> 

<code data-lng='soc'>
app PeaceKeeper is [very middle] exampleClass
{
}
</code>

<code data-lng='soc'>
{: age(#Tom, very `teenager`) :}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Inheritance'>here</a> and <a href='/docs/lng_examples/index.html#Logic_queries_Example_5'>here</a>.
</p>

<h4 class='center-h' data-href='Linguistic_variable_Predefined_membership_functions_chapter'>
Predefined membership functions
</h4>

<LinkToContent/>

<p>
SymOntoClay still doesn't contain means for full defining function's body.
The means will be added in the future, but now you can use <a href='#Linguistic_variable_Predefined_membership_functions_chapter'>Predefined membership functions</a> instead of manual defining.
</p>

<gr>
<EBNFCDECL name='PredefinedFuzzyMembershipFunction'/> = <GEBNFC name='PredefinedFuzzyMembershipFunctions' kind='or'/> .
</gr>

<p>
There exist few predefined standard membership functions in the SymOntoClay.
I am going to add more functions in the future.
</p>

<h5 class='center-h' data-href='Linguistic_variable_Predefined_membership_function_L_Function_chapter'>
L Function
</h5>

<LinkToContent/>

<gr>
<EBNFCDECL name='LFuzzyMembershipFunction' groups='PredefinedFuzzyMembershipFunctions'/> = "L" "(" <EBNFC name='A_LFuzzyMembershipFunctionParameter'/> "," <EBNFC name='B_LFuzzyMembershipFunctionParameter'/> ")" .
<EBNFCDECL name='A_LFuzzyMembershipFunctionParameter'/> = <EBNFC name='NumberExpr'/> .
<EBNFCDECL name='B_LFuzzyMembershipFunctionParameter'/> = <EBNFC name='NumberExpr'/> .
</gr>

<p>
<math xmlns='http://www.w3.org/1998/Math/MathML'>
    <mrow>
        <mrow>
		    <mi> F </mi>
			<mo> ( </mo>
			<mrow>
			    <mi> x </mi>
				<mo> , </mo>
				<mi> a </mi>
				<mo> , </mo>
				<mi> b </mi>
			</mrow>
			<mo> ) </mo>
	    </mrow>
		<mo>=</mo>		
		<math xmlns='http://www.w3.org/1998/Math/MathML'>
		    <mo>{</mo>
		    <mtable>
		        <mtr>
		            <mtd>
		            	<mn>1</mn>
		            </mtd>
					<mtd>
						<mtext>&nbsp;if&nbsp;</mtext>
						<mrow>
                            <mi>x</mi>
                            <mo>&le;</mo>
                            <mi>a</mi>
                        </mrow>
					</mtd>
                </mtr>
                <mtr>
                    <mtd>
		                <mfrac>
						    <mrow>
							    <mi>b</mi>
							    <mo> - </mo>
								<mi>x</mi>
							</mrow>
						    <mrow>
								<mi>b</mi>
							    <mo> - </mo>
							    <mi>a</mi>
							</mrow>						
						</mfrac>
	
		            </mtd>
					<mtd>
						<mtext>&nbsp;if&nbsp;</mtext>
						<mrow>
							<mi>a</mi>
							<mo>&lt;</mo>
                            <mi>x</mi>
                            <mo>&le;</mo>
                            <mi>b</mi>
                        </mrow>
					</mtd>
		        </mtr>
				<mtr>
                    <mtd>
					    <mn>0</mn>
		            </mtd>
					<mtd>
						<mtext>&nbsp;if&nbsp;</mtext>
						<mrow>
                            <mi>x</mi>
                            <mo>&gt;</mo>
                            <mi>b</mi>
                        </mrow>					
					</mtd>					
		        </mtr>
		    </mtable>
		</math>
    </mrow>
</math>
</p>

<img src='/docs/LFunction.svg' alt='L Function graph' class='centered-img'>

<code data-lng='soc'>
linvar age
{
	`teenager` = L(5, 10);
}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Linguistic_variable_Predefined_membership_function_L_Function'>here</a>.
</p>

<h5 class='center-h' data-href='Linguistic_variable_Predefined_membership_function_Trapezoid_Function_chapter'>
Trapezoid Function
</h5>

<LinkToContent/>

<gr>
<EBNFCDECL name='TrapezoidFuzzyMembershipFunction' groups='PredefinedFuzzyMembershipFunctions'/> = "Trapezoid" "(" <EBNFC name='A_TrapezoidFuzzyMembershipFunctionParameter'/> "," <EBNFC name='B_TrapezoidFuzzyMembershipFunctionParameter'/> "," <EBNFC name='C_TrapezoidFuzzyMembershipFunctionParameter'/> "," <EBNFC name='D_TrapezoidFuzzyMembershipFunctionParameter'/> ")" .
<EBNFCDECL name='A_TrapezoidFuzzyMembershipFunctionParameter'/> = <EBNFC name='NumberExpr'/> .
<EBNFCDECL name='B_TrapezoidFuzzyMembershipFunctionParameter'/> = <EBNFC name='NumberExpr'/> .
<EBNFCDECL name='C_TrapezoidFuzzyMembershipFunctionParameter'/> = <EBNFC name='NumberExpr'/> .
<EBNFCDECL name='D_TrapezoidFuzzyMembershipFunctionParameter'/> = <EBNFC name='NumberExpr'/> .
</gr>

<p>
<math xmlns='http://www.w3.org/1998/Math/MathML'>
    <mrow>
        <mrow>
		    <mi> F </mi>
			<mo> ( </mo>
			<mrow>
			    <mi> x </mi>
				<mo> , </mo>
				<mi> a </mi>
				<mo> , </mo>
				<mi> b </mi>
				<mo> , </mo>
				<mi> c </mi>
				<mo> , </mo>
				<mi> d </mi>
			</mrow>
			<mo> ) </mo>
	    </mrow>
		<mo>=</mo>		
		<math xmlns='http://www.w3.org/1998/Math/MathML'>
		    <mo>{</mo>
		    <mtable>
		        <mtr>
		            <mtd>
                        <mn> 0 </mn>
		            </mtd>
					<mtd>
                        <mtext>&nbsp;if&nbsp;</mtext>
						<mrow>
                            <mi>x</mi>
                            <mo>&le;</mo>
                            <mi>a</mi>						    
						</mrow>
						<mtext>&nbsp;or&nbsp;</mtext>
						<mrow>
						    <mi>x</mi>
                            <mo>&ge;</mo>
                            <mi>d</mi>
						</mrow>						
		            </mtd>
                </mtr>
                <mtr>
                    <mtd>
		                <mfrac>
						    <mrow>
							    <mi>x</mi>
                                <mo>-</mo>
                                <mi>a</mi>
							</mrow>
						    <mrow>
							    <mi>b</mi>
                                <mo>-</mo>
                                <mi>a</mi>							
							</mrow>							
						</mfrac>
		            </mtd>
					<mtd>
                        <mtext>&nbsp;if&nbsp;</mtext>
						<mrow>
						    <mi>x</mi>
							<mo>&isin;</mo>
							<mfenced close="]">
                                <mi> a </mi>
                                <mi> b </mi>
                            </mfenced>
						</mrow>						
		            </mtd>					
		        </mtr>
				<mtr>
                    <mtd>
		                <mn> 1 </mn>
		            </mtd>
					<mtd>
                        <mtext>&nbsp;if&nbsp;</mtext>
						<mrow>
						    <mi>x</mi>
							<mo>&isin;</mo>
							<mfenced>
                                <mi> b </mi>
                                <mi> c </mi>
                            </mfenced>						
						</mrow>						
		            </mtd>					
		        </mtr>
				<mtr>
                    <mtd>
		                <mfrac>
						    <mrow>
							    <mi>d</mi>
                                <mo>-</mo>
                                <mi>x</mi>
							</mrow>
						    <mrow>
							    <mi>d</mi>
                                <mo>-</mo>
                                <mi>c</mi>
							</mrow>							
						</mfrac>		                
		            </mtd>
					<mtd>
                        <mtext>&nbsp;if&nbsp;</mtext>
						<mrow>
						    <mi>x</mi>
							<mo>&isin;</mo>
							<mfenced>
                                <mi> c </mi>
                                <mi> d </mi>
                            </mfenced>						
						</mrow>						
		            </mtd>
		        </mtr>
		    </mtable>
		</math>
    </mrow>
</math>
</p>

<img src='/docs/TrapezoidFunction.svg' alt='Trapezoid Function graph' class='centered-img'>

<code data-lng='soc'>
linvar age
{
    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Linguistic_variable_Predefined_membership_function_Trapezoid_Function'>here</a>.
</p>

<h5 class='center-h' data-href='Linguistic_variable_Predefined_membership_function_S_Function_chapter'>
S Function
</h5>

<LinkToContent/>

<gr>
<EBNFCDECL name='SFuzzyMembershipFunction' groups='PredefinedFuzzyMembershipFunctions'/> = "S" "(" (( <EBNFC name='A_SFuzzyMembershipFunctionParameter'/> "," <EBNFC name='B_SFuzzyMembershipFunctionParameter'/> ) | ( <EBNFC name='A_SFuzzyMembershipFunctionParameter'/> "," <EBNFC name='M_SFuzzyMembershipFunctionParameter'/> "," <EBNFC name='B_SFuzzyMembershipFunctionParameter'/> ) ")" .
<EBNFCDECL name='A_SFuzzyMembershipFunctionParameter'/> = <EBNFC name='NumberExpr'/> .
<EBNFCDECL name='M_SFuzzyMembershipFunctionParameter'/> = <EBNFC name='NumberExpr'/> .
<EBNFCDECL name='B_SFuzzyMembershipFunctionParameter'/> = <EBNFC name='NumberExpr'/> .
</gr>

<p>
<math xmlns='http://www.w3.org/1998/Math/MathML'>
    <mrow>
        <mrow>
            <mi> F </mi>
			<mo> ( </mo>
			<mrow>
			    <mi> x </mi>
				<mo> , </mo>
				<mi> a </mi>
				<mo> , </mo>
				<mi> m </mi>
				<mo> , </mo>
				<mi> b </mi>
			</mrow>
			<mo> ) </mo>
	    </mrow>
		<mo>=</mo>		
		<math xmlns='http://www.w3.org/1998/Math/MathML'>
		    <mo>{</mo>
		    <mtable>
		        <mtr>
		            <mtd>
		                <mn> 0 </mn>
		            </mtd>
					<mtd>
                        <mtext>&nbsp;if&nbsp;</mtext>
						<mrow>
                            <mi>x</mi>
                            <mo>&le;</mo>
                            <mi>a</mi>						
						</mrow>						
		            </mtd>					
                </mtr>
                <mtr>
                    <mtd>
					    <mrow>
		                    <mn> 2 </mn>							
							<msup>
							    <mfenced>
							        <mfrac>
								        <mrow>
									        <mi>x</mi>
                                            <mo>-</mo>
                                            <mi>a</mi>
                                        </mrow>
								        <mrow>
									        <mi>b</mi>
                                            <mo>-</mo>
                                            <mi>a</mi>									
                                        </mrow>									
								    </mfrac>
								</mfenced>
								<mn>2</mn>
							</msup>
						</mrow>
		            </mtd>
					<mtd>
                        <mtext>&nbsp;if&nbsp;</mtext>
						<mrow>
						    <mi>x</mi>
							<mo>&isin;</mo>
							<mfenced close="]">
                                <mi> a </mi>
                                <mi> m </mi>
                            </mfenced>						
						</mrow>						
		            </mtd>					
		        </mtr>
				<mtr>
                    <mtd>
		                <mrow>
  						    <mn> 1 </mn>
							<mo>-</mo>
					        <mrow>
		                        <mn> 2 </mn>							
							    <msup>
							        <mfenced>
							            <mfrac>
								            <mrow>
									            <mi>x</mi>
                                                <mo>-</mo>
                                                <mi>a</mi>
                                            </mrow>
								            <mrow>
									            <mi>b</mi>
                                                <mo>-</mo>
                                                <mi>a</mi>									
                                            </mrow>									
								        </mfrac>
								    </mfenced>
								    <mn>2</mn>
							    </msup>
						    </mrow>							
						</mrow>
		            </mtd>
					<mtd>
                        <mtext>&nbsp;if&nbsp;</mtext>
						<mrow>
						    <mi>x</mi>
							<mo>&isin;</mo>
							<mfenced>
                                <mi> m </mi>
                                <mi> b </mi>
                            </mfenced>
						</mrow>						
		            </mtd>					
		        </mtr>
				<mtr>
                    <mtd>
		                <mn> 1 </mn>
		            </mtd>
					<mtd>
                        <mtext>&nbsp;if&nbsp;</mtext>
						<mrow>
                            <mi>x</mi>
                            <mo>&ge;</mo>
                            <mi>b</mi>
						</mrow>						
		            </mtd>					
		        </mtr>
		    </mtable>
		</math>
    </mrow>
</math>
</p>

<p>
The count of params can be reduced to 
<math xmlns='http://www.w3.org/1998/Math/MathML'>
    <mrow>
        <mi> F </mi>
		<mo> ( </mo>
		<mrow>
			<mi> x </mi>
			<mo> , </mo>
			<mi> a </mi>
			<mo> , </mo>
			<mi> b </mi>
		</mrow>
		<mo> ) </mo>	
	</mrow>
</math>.
In this case 
<math xmlns='http://www.w3.org/1998/Math/MathML'>
    <mrow>
	    <mi> m </mi>
		<mo> = </mo>
		<mfrac>
		    <mrow>
			    <mi> a </mi>
			    <mo> + </mo>
			    <mi> b </mi>
			</mrow>
		    <mrow>
			    <mn>2</mn>
			</mrow>			
		</mfrac>
	</mrow>
</math>.
</p>

<img src='/docs/SFunction.svg' alt='S Function graph' class='centered-img'>

<code data-lng='soc'>
linvar age
{
    `teenager` = S(12, 17, 22);
}
</code>

<code data-lng='soc'>
linvar age
{
    `teenager` = S(12, 22);
}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Linguistic_variable_Predefined_membership_function_S_Function'>here</a>.
</p>

<h4 class='center-h' data-href='Linguistic_variable_Predefined_operators_chapter'>
Predefined operators
</h4>

<LinkToContent/>

<p>
Fuzzy logic allows us to add special logic operators to usual logic operators <a href='#AndOp_chapter'><b>and</b></a>, <a href='#OrOp_chapter'><b>or</b></a>, <a href='#NotOp_chapter'><b>not</b></a>.
The additional unary operators modify result of membership function.
</p>

<p>
SymOntoClay still doesn't contain means for full defining function's body.
The means will be added in the future, but now you can use Predefined operators instead of manual defining.
</p>

<gr>
<EBNFCDECL name='PredefinedFuzzyOpsIdentifier'/> = <GEBNFC name='PredefinedFuzzyOpsIdentifier' kind='or'/> .
</gr>

<p>
Operators can be used only in combination with <a href='#Linguistic_variable_Terms_chapter'>terms</a>.
</p>

<code data-lng='soc'>
app PeaceKeeper is [very middle] exampleClass
{
}
</code>

<code data-lng='soc'>
{: age(#Tom, very `teenager`) :}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Inheritance'>here</a> and <a href='/docs/lng_examples/index.html#Logic_queries_Example_5'>here</a>.
</p>

<h5 class='center-h' data-href='Linguistic_variable_Predefined_operator_Very_chapter'>
Very
</h5>

<LinkToContent/>

<gr>
<EBNFCDECL name='VeryFuzzyOpIdentifier' groups='PredefinedFuzzyOpsIdentifier'/> = "very" .
</gr>

<p>
<math xmlns='http://www.w3.org/1998/Math/MathML'>
    <mrow>
	    <mrow>
	        <mi> F </mi>
		    <mo> ( </mo>
			<mi> x </mi>
			<mo> ) </mo>
		</mrow>
		<mo> = </mo>
		<msup>
		    <mi>x</mi>
			<mn>2</mn>
		</msup>
	</mrow>
</math>
</p>

<code data-lng='soc'>
app PeaceKeeper is [very middle] exampleClass
{
}
</code>

<code data-lng='soc'>
{: age(#Tom, very `teenager`) :}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Inheritance'>here</a> and <a href='/docs/lng_examples/index.html#Logic_queries_Example_5'>here</a>.
</p>

<h4 class='center-h' data-href='Linguistic_variable_Domain_of_a_linguistic_variable_chapter'>
Domain of a linguistic variable
</h4>

<LinkToContent/>

<p>
Defines base set for linguistic variable.
Thems are mapped to the set by membership functions.
</p>

<p>
Each linguistic variable has its own domain.
</p>

<p>
If linguistic variable doesn't have explicitly defined domain, the linguistic variable has implicit domain from -∞ to +∞.
</p>

<p>
You can define domain of linguistic variable explicitly by keyword <b>range</b>.
See <EBNFC name='LinguisticVariableDomainDecl'/> in SymOntoClay's garammar description.
</p>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Linguistic_variable_With_Ranges'>here</a>.
</p>

<p>
Defining custom domain (range) for linguistic variable will be helpful for using terms of different linguistic variables with the same mames but different membership functions.
For example, the term <b>near</b> can be different for distances on a table, in a room and in Space.
Domain (range) allows us using term <b>near</b> as pure name without namespaces or something else.
</p>

<p>
This range is from negative infinity to positive infinity (Unbounded at both ends):
</p>

<code data-lng='soc'>
linvar age for range (-∞, +∞)
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<p>
This range is also from negative infinity to positive infinity:
</p>

<code data-lng='soc'>
linvar age for range (*, *)
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<p>
This range is open.
</p>

<code data-lng='soc'>
linvar age for range (0, 150)
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<p>
This range is closed.
</p>

<code data-lng='soc'>
linvar age for range [0, 150]
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<p>
This range is left-open and right-closed.
</p>

<code data-lng='soc'>
linvar age for range (0, 150]
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<p>
This range is left-closed and right-open.
</p>

<code data-lng='soc'>
linvar age for range [0, 150)
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<h4 class='center-h' data-href='Linguistic_variable_constraints_chapter'>
Constraints
</h4>

<LinkToContent/>

<p>
Defines conditions when the linguistic variable should be used.
</p>

<p>
Now you can define:
    <ul>
	    <li>
		    Using terms of linguistic variable for operations with inheritance.
		</li>
        <li>
		    Using terms of linguistic variable only in concrete <a href='#PredicateOp_chapter'>logic relations</a>.
		</li>
	</ul>
</p>

<code data-lng='soc'>
linvar age
{
    constraints:
	    for inheritance;
	    for relation age;

    terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<code data-lng='soc'>
linvar age
{
    constraints:
        for inh;
        for rel age;

    terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Linguistic_variable_With_constraints'>here</a>.
</p>

<p>
Constraint for inheritance also generates constraint for relation "is" automatically.
</p>

<p>
Constraint for for relation "is" also generates constraint for inheritance automatically.
</p>

<h4 class='center-h' data-href='Linguistic_variable_defuzzification_chapter'>
Defuzzification
</h4>

<LinkToContent/>

<p>
Defuzzification transforms term of lingiustic variables (non numeric value) into numeric value.
</p>

<p>
You can read more details in <ico t='w'/><a href='https://en.wikipedia.org/wiki/Defuzzification'>here</a>.
</p>

<p>
There are many different methods of defuzzification.
SymOntoClay uses Centre of Gravity (CoG) for defuzzification.
</p>

<h5 class='center-h' data-href='Linguistic_variable_defuzzification_Centre_of_Gravity_chapter'>
Centre of Gravity (CoG)
</h5>

<LinkToContent/>

<p>
Centre of Gravity (CoG) calculates by formula:
</p>

<p>
<math xmlns='http://www.w3.org/1998/Math/MathML'>
    <mrow>
	    <mi> y </mi>
		<mo> = </mo>
		<mfrac>
		    <mrow>
                <mrow>
                    <munderover>
                        <mo>&int;</mo>
                        <mi>max</mi>
                        <mi>min</mi>
                    </munderover>
                </mrow>
				<mi>x</mi>
				<mi>&mu;</mi>
				<mfenced>
				    <mi>x</mi>
				</mfenced>
				<mi>dx</mi>
			</mrow>
		    <mrow>
                <mrow>
                    <munderover>
                        <mo>&int;</mo>
                        <mi>max</mi>
                        <mi>min</mi>
                    </munderover>
                </mrow>
				<mi>&mu;</mi>
				<mfenced>
				    <mi>x</mi>
				</mfenced>
				<mi>dx</mi>
			</mrow>
		</mfrac>
	</mrow>
</math>
</p>

<p>
If term of linguistic variable is used with fuzzy operators,
<math xmlns='http://www.w3.org/1998/Math/MathML'>
    <mrow>
		<mi>&mu;</mi>
		<mfenced>
			<mi>x</mi>
		</mfenced>
	</mrow>
</math> 
must be combination of membership function and opertors.
</p>

<h3 class='center-h' data-href='Function_chapter'>
Function
</h3>

<LinkToContent/>

<p>
Function is <ico t='w'/><a href='https://en.wikipedia.org/wiki/First-class_function'>first-class object</a>.
</p>

<gr>
<EBNFCDECL name='FunctionName'/> = <EBNFC name='ConceptIdentifier'/> .
<EBNFCDECL name='FunctionDeclSet' groups='ClassSourceCodeFileContent;AppSourceCodeFileContent;WorldSourceCodeFileContent'/> = <TEBNFC name='DeclSet' param = 'FunctionDecl'/> .
<EBNFCDECL name='FunctionDecl'/> = "fun" <EBNFC name='FunctionName'/> "(" <EBNFC name='FunctionParamsDeclSet'/> ")" [ "=>" ] <br/> "{" <br/> <EBNFC name='StatementsSet'/> <br/> "}" .
<EBNFCDECL name='FunctionParamsDeclSet'/> = <EBNFC name='FunctionParamDecl'/> [ { "," <EBNFC name='FunctionParamDecl'/> } ] .
<EBNFCDECL name='FunctionParamName'/> = <EBNFC name='VarIdentifier'/> .
<EBNFCDECL name='FunctionParamDecl'/> = <EBNFC name='FunctionParamName'/> [ ":" ( <EBNFC name='FunctionParamType'/> | <EBNFC name='TupleOfFunctionParamTypes'/> ) ] [ "=" <EBNFC name='DefaultValueOfFunctionParam'/> ] .
<EBNFCDECL name='FunctionParamType'/> = <EBNFC name='ConceptIdentifier'/> .
<EBNFCDECL name='TupleOfFunctionParamTypes'/> = ( "(" <EBNFC name='FunctionParamType'/> [ { "|" <EBNFC name='FunctionParamType'/> }] ")" ) | ( <EBNFC name='FunctionParamType'/> [ { "|" <EBNFC name='FunctionParamType'/> }] ) .
<EBNFCDECL name='DefaultValueOfFunctionParam'/> = <EBNFC name='ConstExpr'/> .
</gr>

<p>
<b>Without parameters:</b>
</p>

<code data-lng='soc'>
    fun a() => 
    {
        '`a` has been called!' >> @>log;
    }
</code>

<code data-lng='soc'>
    fun a() 
    {
        '`a` has been called!' >> @>log;
    }
</code>

<p>
<b>Minimal parameters declaration:</b>
</p>

<code data-lng='soc'>
    fun a(@param_1)
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;
    }
</code>

<code data-lng='soc'>
    fun a(@param_1, @param_2)
    {
        '`a` (2) has been called!' >> @>log;
        @param_1 >> @>log;
        @param_2 >> @>log;
    }
</code>

<p>
<b>Type of parameter:</b>
</p>

<p>
Parameter's type uses in dispatching: what function should be used in this case.
</p>

<p>
It allows us to have many functions with the same name and count of parameters but with different types of parameters.
</p>

<code data-lng='soc'>
    fun a(@param_1: string)
    {
        '`a` (string) has been called!' >> @>log;
    }
</code>

<p>
Also the type of parameter can be tuple of types.
</p>

<code data-lng='soc'>
    fun a(@param_1: (number | string))
    {
        '`a` (number | string) has been called!' >> @>log;
        @param_1 >> @>log;
    }
</code>

<code data-lng='soc'>
    fun a(@param_1: number | string)
    {
        '`a` (number | string) has been called!' >> @>log;
        @param_1 >> @>log;
    }
</code>

<p>
You can combine different ways.
</p>

<code data-lng='soc'>
    fun a(@param_1: string, @param_2: number | string, @param_3: (number | string), @param_4)
    {
        '`a` (string) has been called!' >> @>log;
    }
</code>

<p>
<b>Default value of parameter:</b>
</p>

<p>
A value can be associated with parameter.
The value is used when parameter is missed in function call.
</p>

<code data-lng='soc'>
    fun a(@param_1 = 12)
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;
    }
</code>

<code data-lng='soc'>
    fun a(@param_1: string = 'Hi!')
    {
        '`a` (string) has been called!' >> @>log;
    }
</code>

<code data-lng='soc'>
    fun a(@param_1: (number | string) = 42)
    {
        '`a` (number | string) has been called!' >> @>log;
        @param_1 >> @>log;
    }
</code>

<code data-lng='soc'>
    fun a(@param_1: number | string = 42)
    {
        '`a` (number | string) has been called!' >> @>log;
        @param_1 >> @>log;
    }
</code>

<code data-lng='soc'>
    fun a(@param_1: string, @param_2: number | string = 'Hi!', @param_3: (number | string) = 10, @param_4)
    {
        '`a` (string) has been called!' >> @>log;
    }
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Function'>here</a>.
</p>

<h3 class='center-h' data-href='Action_chapter'>
Action
</h3>

<LinkToContent/>

<p>
Action it is an object which can be call as function or method.
</p>

<p>
It is similar to <ico target='Wikipedia'/><a href='https://en.wikipedia.org/wiki/Function_object'>C++ functor</a>.
</p>

<p>
Action is automatically put into engine of method detection and can be called like usual method or function.
Action doesn't require any manual initialization for call.
</p>

<p>
During Action call the instance of the Action is implicitly created.
So all calls of Action are isolated from each other.
</p>

<p>
Entry point of action is <a href='#Function_call_overloading_chapter'>function call overloading</a>.
One action can have many entry points with different parameters.
Leaving entry point stops the action.
Uncaught on action level <a href='#ErrorStatement_chapter'>Error</a> in entry point crash the action can be caught on code level which called the action.
</p>

<p>
The main goal of <b>Actions</b> to provide triggers in context of the doing.
Action's trigger starts when the Action is called.
The triggers can check some condition and make additional doing related to main doing of the Action.
Uncaught error in handlers of child triggers or functions which have been called from the handlers performs nothing on code level which called the action.
When the action has been done then their triggers stop their activity and handlers which have been started previously.
</p>

<p>
Any time the action can be terminated from handlers of child triggers or functions which have been called from the action's entry points or handlers of child triggers.
</p>

<p>
The statement <b><a href='#CompleteActionStatement_chapter'>complete action</a></b> terminates action by the reason of achieving goal of the action.
</p>

<p>
The statement <b><a href='#BreakActionStatement_chapter'>break action</a></b> breakes the action.
It is similar to <a href='#ErrorStatement_chapter'>Error statement</a>.
But "Error statement" can break Action only in action's entry points or functions which have been called from the action's entry points.
The statement <b><a href='#BreakActionStatement_chapter'>break action</a></b> can break Action in any place of the Action.
</p>

<gr>
<EBNFCDECL name='ActionIdentifier'/> = <EBNFC name='ConceptIdentifier'/> .
<EBNFCDECL name='ActionDeclSet' groups='ClassSourceCodeFileContent;AppSourceCodeFileContent;WorldSourceCodeFileContent'/> = <TEBNFC name='DeclSet' param = 'ActionDecl'/> .
<EBNFCDECL name='ActionDecl'/> = "action" <EBNFC name='ActionIdentifier'/> [ <EBNFC name='ActionAliasDecl'/> ] [ <EBNFC name='InheritanceDecl'/> ] <br/> "{"<br/> [ <TEBNFC name='DeclSet' param = 'ActionBodyContent'/> ] <br/> "}" .
<EBNFCDECL name='ActionBodyContent'/> = <GEBNFC name='ActionBodyContent' kind='op_and'/> .
<EBNFCDECL name='ActionAliasDecl'/> = "alias" <EBNFC name='ConceptIdentifier'/> [ { "," <EBNFC name='ConceptIdentifier'/> } ] .
</gr>

<code data-lng='soc'>
action Go
{
    op () => 
	{
	    @@host.`go`(to: #@[200]);
	}
		
	on {: see(I, barrel) :} => 
	{
		complete action;
	}
}
</code>

<code data-lng='soc'>
action Go is `some base action`
{
    op () => 
	{
	    @@host.`go`(to: #@[200]);
	}
		
	on {: see(I, barrel) :} => 
	{
		complete action;
	}
}
</code>

<code data-lng='soc'>
action `my Go 1` alias `Go`, Run
{
    op () => 
	{
	    @@host.`go`(to: #@[200]);
	}
		
	on {: see(I, barrel) :} => 
	{
		complete action;
	}
}
</code>

<code data-lng='soc'>
action `my Go 1` alias `Go`, Run is `some base action`
{
    op () => 
	{
	    @@host.`go`(to: #@[200]);
	}
		
	on {: see(I, barrel) :} => 
	{
		complete action;
	}
}
</code>

<p>
Sometime entry points of action mustn't do anything.
In this case the action is only context for Its child triggers.
Statement <b><a href='#AwaitStatement_chapter'>await</a></b> provides waiting in entry point of the Action for termination the Action by child triggers.
</p>

<code data-lng='soc'>
action Go
{
    op () => 
	{
	    await;
	}
		
	on {: see(I, barrel) :} => 
	{
		complete action;
	}
}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Action'>here</a>.
</p>

<h3 class='center-h' data-href='State_chapter'>
State
</h3>

<LinkToContent/>

<complete_me/>

<p>

</p>

<complete_me/>

<gr>
<EBNFCDECL name='StateDeclSet' groups='ClassSourceCodeFileContent;AppSourceCodeFileContent;WorldSourceCodeFileContent'/> = <TEBNFC name='DeclSet' param = 'StateDecl'/> .
<EBNFCDECL name='StateDecl'/> = "state" <EBNFC name='StateIdentifier'/> [ <EBNFC name='InheritanceDecl'/> ] <br/> "{"<br/> [ <TEBNFC name='DeclSet' param = 'ActionBodyContent'/> ] <br/> "}" .
<EBNFCDECL name='StateIdentifier'/> = <EBNFC name='ConceptIdentifier'/> .
<EBNFCDECL name='StateBodyContent'/> = <GEBNFC name='StateBodyContent' kind='op_and'/> .
<EBNFCDECL name='ActivatingClausesDeclSet' groups='StateBodyContent'/> = <TEBNFC name='DeclSet' param = 'ActivatingClausesDecl'/> .
<EBNFCDECL name='ActivatingClausesDecl'/> = "enter" "on" ":" <br/> <EBNFC name='FactDeclSet'/> .
<EBNFCDECL name='DeactivatingClausesDeclSet' groups='StateBodyContent'/> = <TEBNFC name='DeclSet' param = 'DeactivatingClausesDecl'/> .
<EBNFCDECL name='DeactivatingClausesDecl'/> = "leave" "on" ":" <br/> <EBNFC name='FactDeclSet'/> .
</gr>

<complete_me/>

<code data-lng='soc'>
state Attacking
{
}
</code>

<code data-lng='soc'>
state Attacking
{
    enter on:
        {: see(I, enemy) :}

    leave on:
        {: see(I, barrel) :}

    {: male(#Tom) :}
	{: parent(#Piter, #Tom) :}
	{: {son($x, $y)} -> { male($x) & parent($y, $x)} :}
   
    on Enter
    {
        'Begin Attacking Enter' >> @>log;

        'End Attacking Enter' >> @>log;
    }
}
</code>

<complete_me/>

<p>
You can see examples <a href='/docs/lng_examples/index.html#State'>here</a>.
</p>

<h4 class='center-h' data-href='MutuallyExclusiveStates_chapter'>
Mutually exclusive states
</h4>

<LinkToContent/>

<complete_me/>

<p>

</p>

<complete_me/>

<gr>
<EBNFCDECL name='MutuallyExclusiveStatesDeclSet' groups='ClassSourceCodeFileContent;AppSourceCodeFileContent;WorldSourceCodeFileContent'/> = <TEBNFC name='DeclSet' param = 'MutuallyExclusiveStatesDecl'/> .
<EBNFCDECL name='MutuallyExclusiveStatesDecl'/> = "states" "{" <EBNFC name='StateIdentifier'/> [ { "," <EBNFC name='StateIdentifier'/> } ] "}" .
</gr>

<complete_me/>

<code data-lng='soc'>
states { Idling, Patrolling, Attacking, Fleeing }
</code>

<complete_me/>

<h4 class='center-h' data-href='SetDefaultStateDirective_chapter'>
Set default state
</h4>

<LinkToContent/>

<complete_me/>

<p>

</p>

<complete_me/>

<gr>
<EBNFCDECL name='SetDefaultStateDirective' groups='AppBodyContent'/> = <TEBNFC name='SetDefaultStateDecl'/> ";" .
</gr>

<complete_me/>

<code data-lng='soc'>
set Idling as default state;
</code>

<code data-lng='soc'>
app PeaceKeeper
{
    set Idling as default state;
}
</code>

<complete_me/>

<h4 class='center-h' data-href='SetStateDirective_chapter'>
Set state
</h4>

<LinkToContent/>

<complete_me/>

<p>

</p>

<complete_me/>

<gr>
<EBNFCDECL name='SetStateDirective' groups='AppBodyContent'/> = <TEBNFC name='SetStateDecl'/> ";" .
</gr>

<code data-lng='soc'>
set Patrolling as state;
</code>

<complete_me/>

<code data-lng='soc'>
app PeaceKeeper
{
    set Patrolling as state;
}
</code>

<complete_me/>

<h4 class='center-h' data-href='ActivatingClauses_chapter'>
Activating clauses
</h4>

<LinkToContent/>

<complete_me/>

<p>

</p>

<complete_me/>

<code data-lng='soc'>
enter on:
    {: see(I, enemy) :}
</code>

<code data-lng='soc'>
state Attacking
{
    enter on:
        {: see(I, enemy) :}

    leave on:
        {: see(I, barrel) :}

    on Enter
    {
        'Begin Attacking Enter' >> @>log;

        'End Attacking Enter' >> @>log;
    }
}
</code>

<complete_me/>

<h4 class='center-h' data-href='DeactivatingClauses_chapter'>
Deactivating clauses
</h4>

<LinkToContent/>

<complete_me/>

<p>

</p>

<complete_me/>

<code data-lng='soc'>
leave on:
    {: see(I, barrel) :}
</code>

<code data-lng='soc'>
state Attacking
{
    enter on:
        {: see(I, enemy) :}

    leave on:
        {: see(I, barrel) :}

    on Enter
    {
        'Begin Attacking Enter' >> @>log;

        'End Attacking Enter' >> @>log;
    }
}
</code>

<complete_me/>

<h2 class='center-h' data-href='Common_objects_parts_chapter'>
Common objects’ parts
</h2>

<LinkToContent/>

<p>
The following parts can be in all or almost all kinds of objects.
</p>

<h3 class='center-h' data-href='Inheritance_chapter'>
Inheritance
</h3>

<LinkToContent/>

<p>
SymOntoClay DSL has multiple fuzzy prototype-based inheritance.
</p>

<p>
That is, one object can have many “is a” relationships with other objects.
A <b>descendant object</b> is related to a <b>base object</b> by the “is a” relationship, and is not its clone.
</p>

<gr>
<EBNFCDECL name='InheritanceDecl'/> = "is" <EBNFC name='InheritanceDeclItem'/> [ { "," <EBNFC name='InheritanceDeclItem'/> } ] .
<EBNFCDECL name='InheritanceDeclItem'/> = <TEBNFC name='InheritanceDeclItem'/> .
</gr>

<p>
Additionally each relation has a float-point rank in range from 0 to 1.
1 is the highest rank, and 0 indicates the total absence of an "is a" relationship between these objects.
By default the inheritance rank equals 1.
</p>

<p>
In operations using inheritance, the total inheritance rank between two objects is calculated by formula:
</p>

<p>
<math xmlns='http://www.w3.org/1998/Math/MathML'>
    <mrow>
        <mrow>
            <msub>
                <mi>Rank</mi>
                <mi>total</mi>
            </msub>
        </mrow>
        <mo>=</mo>
        <mrow>
            <munderover>
                <mo>∏</mo>
                <mrow>
                    <mi>i</mi>
                    <mo>=</mo>
                    <mn>1</mn>
                </mrow>
                <mi>n</mi>
            </munderover>
        </mrow>
        <msub>
            <mi>Rank</mi>
            <mi>i</mi>
        </msub>
    </mrow>
</math>
</p>

<p>
In this formula
<math xmlns='http://www.w3.org/1998/Math/MathML'>
    <mrow>
        <msub>
            <mi>Rank</mi>
            <mi>i</mi>
        </msub>
    </mrow>
</math>
is inheritance rank of one link in the entire inheritance chain between two objects.
</p>

<p>
If inheritance has formed a rhombus, and there are several chains with different rank, then rank of chain with the minimum count of chain elements is taken.
</p>

<p>
Inheritance relationship can be read with <a href='#IsOp_chapter'>operator &quot;is&quot;</a>, and It can be changed run time with <a href='#SetIsStatement_chapter'>&quot;set is&quot; statement</a>.
</p>

<h3 class='center-h' data-href='MemberAccessModifiers_chapter'>
Member access modifiers
</h3>

<LinkToContent/>

<gr>
<EBNFCDECL name='MemberAccessModifier'/> = "public" | "protected" | "private" .
<EBNFCDECL name='MemberAccessModifiersSectionDeclSet' groups='ClassBodyContent;AppBodyContent;WorldBodyContent;ActionBodyContent;StateBodyContent'/> = <TEBNFC name='DeclSet' param = 'MemberAccessModifiersSectionDecl'/> .
<EBNFCDECL name='MemberAccessModifiersSectionDecl'/> = <EBNFC name='MemberAccessModifier'/> ":" <br/> [ <GEBNFC name='MemberAccessModifierBodyContent' kind='op_and'/> ] .
</gr>

<p>
Use the access modifiers to specify one of the following declared accessibility levels for members.
</p>

<table class='std-table' style='width: 400px;' border='1' cellspacing='0'>
    <tr>
	    <th class='center-h'>Declared accessibility</th>
		<th class='center-h'>Meaning</th>
    </tr>
    <tr>
	    <td>
		    public
		</td>
	    <td>
		    Access is not restricted.
		</td>
    </tr>
    <tr>
	    <td>
		    protected
		</td>
	    <td>
		    Access is limited to the containing object derived from the containing object.
		</td>
    </tr>
    <tr>
	    <td>
		    private
		</td>
	    <td>
		    Access is limited to the containing object.
		</td>
    </tr>	
</table>

<p>
Access modifiers are optional.
</p>

<p>
Code without access modifiers is <b>protected</b>.
</p>

<code data-lng='soc'>
class Cls1
{
private:
	{: male(#Tom) :}
	{: parent(#Piter, #Tom) :}
	{: {son($x, $y)} -> { male($x) & parent($y, $x)} :}
	
protected:
    fun a() =>
    {
        '`a` has been called!' >> @>log;
    }
	
public:
    @a;
}

app PeaceKeeper is Cls1
{
private:
    on Init =>
    {
        'Begin' >> @>log;
        select {: son($x, $y) :} >> @>log;
        'End' >> @>log;
    }
}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#MemberAccessModifiers'>here</a>.
</p>

<h3 class='center-h' data-href='Field_chapter'>
Field
</h3>

<LinkToContent/>

<p>
    A field is a variable of any type that is declared directly in a object. 
    Fields are members of their containing object.
</p>

<p>
    In code a field can be used as usual variable.
</p>

<gr>
<EBNFCDECL name='FieldDeclSet' groups='ClassBodyContent;AppBodyContent;WorldBodyContent;ActionBodyContent;StateBodyContent;MemberAccessModifierBodyContent'/> = <TEBNFC name='DeclSet' param = 'FieldDecl'/> .
<EBNFCDECL name='FieldDecl'/> = <TEBNFC name='VarDecl'/> ";" .
</gr>

<code data-lng='soc'>
app PeaceKeeper
{
    @b;

    on Init =>
    {
        'Begin' >> @>log;
        @b >> @>log;
        'End' >> @>log;
    }
}
</code>

<code data-lng='soc'>
app PeaceKeeper
{
    var @b: number = 2;

    on Init =>
    {
        'Begin' >> @>log;
        @b >> @>log;
        'End' >> @>log;
    }
}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Field'>here</a>.
</p>

<h3 class='center-h' data-href='Method_chapter'>
Method
</h3>

<LinkToContent/>

<p>
A <b>method</b> is a <a href='#Function_chapter'><b>function</b></a> associated with a message and an <a href='#Objects_declaration_chapter'><b>object</b></a>.
</p>

<p>
In another point of view, a <b>method</b> is an <a href='#Objects_declaration_chapter'><b>object's</b></a> behavior.
</p>

<p>
Technically a method is an <a href='#Objects_declaration_chapter'><b>object's</b></a> named slot which contains a pointer to a <a href='#Function_chapter'><b>function</b></a>.
</p>

<gr>
<EBNFCDECL name='MethodDeclSet'  groups='ClassBodyContent;AppBodyContent;WorldBodyContent;ActionBodyContent;StateBodyContent;MemberAccessModifierBodyContent'/> = <TEBNFC name='DeclSet' param = 'MethodDecl'/> .
<EBNFCDECL name='MethodDecl'/> = <EBNFC name='FunctionDecl'/> .
</gr>

<p>
In details the method's declaration grammar is described in <a href='#Function_chapter'><b>function's chapter </b></a>.
</p>

<code data-lng='soc'>
app PeaceKeeper
{
    fun a()
    {
        '`a` has been called!' >> @>log;
    }
}
</code>

<code data-lng='soc'>
app PeaceKeeper
{
    fun a(@param_1)
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;
    }
}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Function'>here</a>.
</p>

<h3 class='center-h' data-href='operator_overloading_chapter'>
Operator overloading
</h3>

<LinkToContent/>

<p>
A predefined SymOntoClay operator can be overloaded.
</p>

<p>
Now only function call can be overloaded.
</p>

<h4 class='center-h' data-href='Function_call_overloading_chapter'>
   Function call overloading
</h4>

<LinkToContent/>

<p>
An object can declare an operator () function, which provides function call semantics for the object.
</p>

<gr>
<EBNFCDECL name='FunCallOverloadingDeclSet' groups='ClassBodyContent;AppBodyContent;WorldBodyContent;ActionBodyContent;StateBodyContent;MemberAccessModifierBodyContent'/> = <TEBNFC name='DeclSet' param = 'FunCallOverloadingDecl'/> .
<EBNFCDECL name='FunCallOverloadingDecl'/> = "op" "(" <EBNFC name='FunctionParamsDeclSet'/> ")" [ "=>" ] <br/> "{" <br/> <EBNFC name='StatementsSet'/> <br/> "}" .
</gr>

<code data-lng='soc'>
    op () => 
    {
        @@host.`go`(to: #@[10]);
        await;
    }
</code>

<code data-lng='soc'>
    op (@param_1: string) => 
    {
        @@host.`go`(to: #@[10]);
        await;
    }
</code>

<code data-lng='soc'>
    op (@param_1: string, @param_2: number | string, @param_3: (number | string), @param_4 = 12) => 
    {
        @@host.`go`(to: #@[10]);
        await;
    }
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Action'>here</a>.
</p>

<h3 class='center-h' data-href='Trigger_chapter'>
Trigger
</h3>

<LinkToContent/>

<p>
A trigger is a code that is automatically executed in response to certain events.
</p>

<p>
Now both Logic coditional and Lifecycle triggers are available. 
In the future I am going to develop other kinds of triggers.
</p>

<gr>
<EBNFCDECL name='TriggersContentDeclSet' groups='ClassBodyContent;AppBodyContent;ActionBodyContent;StateBodyContent;MemberAccessModifierBodyContent' /> = <TEBNFC name='DeclSet' param = 'TriggersContent'/> .
<EBNFCDECL name='TriggersContent'/> = "on" ( <EBNFC name='LifecycleTriggerIdentifier'/> | <EBNFC name='TriggersLogicCondition'/> ) [ "=>" ] <br/> "{" <br/> <EBNFC name='StatementsSet'/> <br/> "}" .
</gr>

<h4 class='center-h' data-href='Lifecycle_triggers_chapter'>
Life cycle triggers
</h4>

<LinkToContent/>

<p>
Every object has a life cycle.
</p>

<p>
If there exist inheritance relation between object, then life cycle triggers of base object execute before the life cycle triggers of descendant object.
</p>

<gr>
<EBNFCDECL name='LifecycleTriggerIdentifier'/> = <GEBNFC name='LifecycleTriggerIdentifier' kind='or' /> .
</gr>

<h5 class='center-h' data-href='Init_Lifecycle_trigger_chapter'>
Init
</h5>

<LinkToContent/>

<p>
Initializes an object.
It is like a constructor in other programming languages.
</p>

<p>
Init trigger of <a href='#App_chapter'>App</a> is a first code which is executed for the App.
So It is an entrypoint of the App.
</p>

<gr>
<EBNFCDECL name='InitLifecycleTriggerIdentifier' groups='LifecycleTriggerIdentifier'/> = "Init" .
</gr>

<code data-lng='soc'>
app PeaceKeeper
{
    on Init =>
    {
        'Begin' >> @>log;        
        'End' >> @>log;
    }
}
</code>

<p>
In chain of inheritance each <b>Init</b> trigger of the chain will be called in order from the farthest item to the root item.
</p>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Hello_world'>here</a>.
</p>

<h5 class='center-h' data-href='Enter_Lifecycle_trigger_chapter'>
Enter
</h5>

<LinkToContent/>

<complete_me/>

<p>

</p>

<complete_me/>

<gr>
<EBNFCDECL name='EnterLifecycleTriggerIdentifier' groups='LifecycleTriggerIdentifier'/> = "Enter" .
</gr>

<complete_me/>

<code data-lng='soc'>
state Attacking
{
    on Enter
    {
        'Begin Attacking Enter' >> @>log;

        'End Attacking Enter' >> @>log;
    }
}
</code>

<complete_me/>

<h4 class='center-h' data-href='Logic_conditional_triggers_chapter'>
Logic conditional triggers
</h4>

<LinkToContent/>

<p>
Logic сonditional trigger fires when logic condition is <b>true</b> and trigger is reset.
Trigger resets when the logic condition is <b>false</b>.
</p>

<gr>
<EBNFCDECL name='TriggersLogicCondition'/> = <EBNFC name='FactDecl'/> [ <EBNFC name='BindingVariablesDecl'/> ] .
<EBNFCDECL name='BindingVariablesDecl'/> = "(" <EBNFC name='BindingVariableItemDecl'/> [ { "," <EBNFC name='BindingVariableItemDecl'/> } ] ")" .
<EBNFCDECL name='BindingVariableItemDecl'/> = <EBNFC name='SourceBoundVariable'/> ">>" <EBNFC name='DestBoundVariable'/> .
<EBNFCDECL name='SourceBoundVariable'/> = <EBNFC name='LogicVarExpr'/> .
<EBNFCDECL name='DestBoundVariable'/> = <EBNFC name='VarExpr'/> .
</gr>

<code data-lng='soc'>
app PeaceKeeper
{
	on {: see(I, #`gun 1`) :} => 
    {
	    'D' >> @>log;
	}
}
</code>

<code data-lng='soc'>
app PeaceKeeper
{
    @a = #`gun 1`;

    on {: see(I, @a) :} => 
    {
	    'D' >> @>log;
	}
}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Logic_conditional_triggers'>here</a>.
</p>

<h5 class='center-h' data-href='Logic_сonditional_triggers_Binding_variables_chapter'>
Binding variables
</h5>

<LinkToContent/>

<p>
Conditional trigger can bind captured in logic variable value with imperative variable.
</p>

<code data-lng='soc'>
app PeaceKeeper
{
    {: barrel(#a) :}
    {: see(I, #a) :}

    on {: see(I, $x) & barrel($x) & !focus(I, friend) :} ($x >> @x) => 
    {
	    @x >> @>log;
    }
}
</code>

<console>
#a
</console>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Logic_сonditional_triggers_chapter'>here</a>.
</p>

<h3 class='center-h' data-href='#Error_handling_chapter'>
Error handling
</h3>

<LinkToContent/>

<p>
Error is special situation what breaks the normal way of code execution.
It is assumed the fired error cannot be handled and resolved in the place of occurrence.
So error firing is an alternative way of execution from place of occurrence to handler which can react to the occured error. 
</p>

<p>
Error handling makes NPC's logic and behaviour closer to human's logic and behaviour.
For instance in some situations a human understands something like "It's error!", "It's definitely wrong way!", "It's obstacle!", stops wrong action and makes another decision.
Congratulate! It's error handling!
</p>

<p>
The root of error handling is a fact what describes error, obstacle or danger situation.
</p>

<p>
<a href='#ErrorStatement_chapter'>Error statement</a> captures the fact and fires error based on the fact. 
The normal way of execution brakes.
</p>

<p>
The error value combains the reason fact and information about execution during error: stack trace and place where this error occurred.
But I think It will be better and convenient consider the error as usual fact on syntax level.
</p>

<p>
The fired error can be caught or ignored by <a href='#TryCatchStatement_chapter'>try-catch statement</a>. 
Otherwise the execution async function or trigger will be stopped.
</p>

As parallel the NPC can react to the error by <a href='#Logic_сonditional_triggers_chapter'>conditional trigger</a>.

<h2 class='center-h' data-href='Logic_programming_chapter'>
Logic programming
</h2>

<LinkToContent/>

<p>
SymOntoClay provides Logic programming means.
</p>

<p>
SymOntoClay's Logic programming are parallel to imperative programming.
</p>

<p>
Logic and imperative means connect by
    <ul>
        <li>
		    <a href='#Inheritance_chapter'>set inheritance during Objects declaration</a>
		</li>
		
		<li>
		    <a href='#Logic_сonditional_triggers_chapter'>Logic сonditional triggers</a>
		</li>
		
		<li>
		    <a href='#SelectOp_chapter'>select (Operator "?")</a>
		</li>
		
		<li>
		    <a href='#InsertOp_chapter'>insert</a>
		</li>
		
		<li>
		    <a href='#SetIsStatement_chapter'>"set is" statement</a>
		</li>
    </ul>
</p>

<h3 class='center-h' data-href='Fact_chapter'>
Fact
</h3>

<LinkToContent/>

<p>
Represents knowledge in declarative way.
It is an element of Logic programming.
</p>

<p>
Now the fact is a predicate sentence with small syntactic sugar for better inclusion into SymOntoClay DSL.
</p>

<p>
For example, expression &quot;cat (#Alisa)&quot; is equivalent to &quot;#Alisa is a cat&quot;.
</p>

<p>
In the future, I am going to move away from the predicate form to a more human-readable one.
In this case, the predicate form will be saved as an alternative way of describing.
</p>

<gr>
<EBNFCDECL name='FactDeclSet' groups='ClassSourceCodeFileContent;ClassBodyContent;AppSourceCodeFileContent;AppBodyContent;WorldBodyContent;WorldSourceCodeFileContent;ActionBodyContent;StateBodyContent;MemberAccessModifierBodyContent'/> = <TEBNFC name='DeclSet' param = 'FactDecl'/> .
<EBNFCDECL name='FactDecl' groups='ImperativeLogicExpr;Expr'/> = "{:" ( <EBNFC name='FactSection'/> | <EBNFC name='FactSentence'/> ) ":}" .
<EBNFCDECL name='FactSection'/> = [ ">:" ] "{" <EBNFC name='FactSentence'/> "}" .
<EBNFCDECL name='FactSentence'/> = <EBNFC name='LogicExpr'/> .
</gr>

<code data-lng='soc'>
{: male(#Tom) :}
{: >:{ male(#Tom) } :}
{: parent(#Piter, #Tom) :}
{: $x = act(M16, shoot) & hear(I, $x) :}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Logic_queries'>here</a>.
</p>

<h3 class='center-h' data-href='Logic_rule_chapter'>
Logic rule
</h3>

<LinkToContent/>

<p>
Represents a logic conclusion rule.
It allows to find and use facts which are not defined explicitly.
It is an element of Logic programming.
</p>

<p>
A rule defines relation between two sets of facts during logic conclusion.
</p>

<p>
Logic searching uses depth-first search (DFS) with backtracking.
</p>

<p>
A rule consists of head (<EBNFC name='LogicRulePrimarySection'/>) and body (<EBNFC name='LogicRuleSecondarySection'/>).
The head is true if the body is true.
Both head and body are predicate sentences with small syntactic sugar for better inclusion into SymOntoClay DSL.
</p>

<p>
In the future, I am going to move away from the predicate form to a more human-readable one.
In this case, the predicate form will be saved as an alternative way of describing.
</p>

<p>
Conjunctions can only appear in the body, not in the head of a rule.
Only special <a href='#LogicRuleVarIdentifier_chapter'>variables</a> can be used in the rule, the scope of which is limited by this rule.
</p>

<p>
Now logic searching happens when the <a href='#SelectOp_chapter'>select operator</a> is only called explicitly.
In the future, the area of using logic searching (conclusion) in SymOntoClay will be significantly expanded.
</p>

<gr>
<EBNFCDECL name='LogicRuleDeclSet' groups='ClassSourceCodeFileContent;ClassBodyContent;AppSourceCodeFileContent;AppBodyContent;WorldBodyContent;WorldSourceCodeFileContent;ActionBodyContent;StateBodyContent;MemberAccessModifierBodyContent'/> = <TEBNFC name='DeclSet' param = 'LogicRuleDecl'/> .
<EBNFCDECL name='LogicRuleDecl'/> = "{:" <EBNFC name='LogicRulePrimarySection'/> <EBNFC name='ImplicationSymbol'/> <EBNFC name='LogicRuleSecondarySection'/> ":}" .
<EBNFCDECL name='LogicRulePrimarySection'/> = [ ">:" ] "{" <EBNFC name='LogicRuleSentence'/> "}" .
<EBNFCDECL name='LogicRuleSecondarySection'/> = "{" <EBNFC name='LogicRuleSentence'/> "}" .
<EBNFCDECL name='ImplicationSymbol'/> = "->" .
<EBNFCDECL name='LogicRuleSentence'/> = <EBNFC name='LogicExpr'/> .
</gr>

<code data-lng='soc'>
{: {son($x, $y)} -> { male($x) & parent($y, $x) } :}
{: >: {son($x, $y)} -> { male($x) & parent($y, $x) } :}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Logic_queries'>here</a>.
</p>

<h3 class='center-h' data-href='Semantics_of_Logic_sentence_chapter'>
Semantics of Logic sentence
</h3>

<LinkToContent/>

<p>
Predicate calculus is very flexible way.
But we must keep in our mind the meaning of predicate's parameters.
</p>

<p>
Here the meaning of predicate's parameters for SymOntoClay will be described.
</p>

<p>
In the future I am going to make logic sentences closer to natural language phrases.
</p>

<h4 class='center-h' data-href='Semantics_of_unary_predicate_chapter'>
Semantics of unary predicate
</h4>

<LinkToContent/>

<p>
Unary predicate discribes <a href='#Inheritance_chapter'>inheritance relationship</a>.
</p>

<code data-lng='soc'>
{: barrel(#`Barel 1`) :}
</code>

<p>
Backgroundly the unary predicate transforms to <a href='#Semantics_of_predicate_is_chapter'>predicate "is"</a>.
</p>

<code data-lng='soc'>
{: is(#`Barel 1`, barrel, 1) :}
</code>

<h4 class='center-h' data-href='Semantics_of_binary_predicate_chapter'>
Semantics of binary predicate
</h4>

<LinkToContent/>

<p>
In many cases binary predicate means relation between an object and its property.
</p>

<code data-lng='soc'>
{: color(#dog1, black) :}
</code>

<p>
It equals phrase "#dog1 has black color".
</p>

<p>
Also binary predicate means relation between two objects.
</p>

<code data-lng='soc'>
{: parent(#Piter, #Tom) :}
</code>

<p>
It equals phrase "#Piter is a parent of #Tom".
</p>

<p>
The <a href='#Semantics_of_predicate_is_chapter'>predicate "is"</a> has special meaning for defining <a href='#Inheritance_chapter'>inheritance relationship</a>.
</p>

<h4 class='center-h' data-href='Semantics_of_ternary_predicate_chapter'>
Semantics of ternary predicate
</h4>

<LinkToContent/>

<p>
Meaning of ternary predicate is close to <a href='#Semantics_of_binary_predicate_chapter'>binary predicate</a>.
</p>

<p>
The third parameter of ternary predicate means a value linked to the relation.
</p>

<code data-lng='soc'>
{: distance(I, enemy, 15) :}
</code>

It equals phrase "Distance between me and enemy is 15".

<h4 class='center-h' data-href='Semantics_of_predicate_is_chapter'>
Semantics of predicate "is"
</h4>

<LinkToContent/>

<p>
The <a href='#Semantics_of_predicate_is_chapter'>predicate "is"</a> has special meaning for defining <a href='#Inheritance_chapter'>inheritance relationship</a>.
</p>

<p>
"is" is a ternary predicate.
The third parameter means <a href='#Inheritance_chapter'>rank of inheritance</a>.
</p>

<code data-lng='soc'>
{: is (cat, animal, 1) :}
{: is (cat, pet, 0.75) :}
</code>

<p>
Predicate "is" can be used as <a href='#Semantics_of_binary_predicate_chapter'>binary predicate</a>.
In this case <a href='#Inheritance_chapter'>rank of inheritance</a> will be implicit and equal 1.
</p>

<code data-lng='soc'>
{: is (cat, animal) :}
</code>

<h2 class='center-h' data-href='Expressions_chapter'>
Expressions
</h2>

<LinkToContent/>

<p>
An expression specifies the computation of a value by applying operators and methods to operands.
</p>

<gr>
<EBNFCDECL name='Expr'/> = <GEBNFC name='Expr' kind='or'/> .
<EBNFCDECL name='ValueExpr'/> = <GEBNFC name='ValueExpr' kind='or'/> .
</gr>

<h3 class='center-h' data-href='Constant_expression_chapter'>
Constant expression
</h3>

<LinkToContent/>

<p>
Constant expressions may contain only literals and are evaluated at compile time.
</p>

<gr>
<EBNFCDECL name='ConstExpr' groups='Expr'/> = <GEBNFC name='ConstExpr' kind='or'/> .
<EBNFCDECL name='NumberExpr' groups='ConstExpr;ValueExpr'/> = <GEBNFC name='NumberExpr' kind='or'/> .
</gr>

<code data-lng='soc'>
25
30.2
"abc"
</code>

<h3 class='center-h' data-href='Fuzzy_expression_chapter'>
Fuzzy expression
</h3>

<LinkToContent/>

<p>
Fuzzy expression can be <EBNFC name='NumberExpr'/> in range [0, 1] or <a href='#Linguistic_variable_chapter'>term of linguistic variable</a>.
</p>

<gr>
<EBNFCDECL name='FuzzyExpr' groups='ConstExpr;ValueExpr;LogicExpr;ImperativeLogicExpr'/> = <GEBNFC name='FuzzyExpr' kind='or'/> .
<EBNFCDECL name='NumericFuzzyExpr' groups='FuzzyExpr'/> = <EBNFC name='NumberExpr'/> .
<EBNFCDECL name='NonNumericFuzzyExpr' groups='FuzzyExpr'/> = ( [ { <EBNFC name='PredefinedFuzzyOpsIdentifier'/> } ] <EBNFC name='LinguisticVariableTermIdentifier'/> ) | "true" | "false" .
</gr>

<p>
    <b>true</b> represents 1.
    <b>false</b> represents 0.
</p>

<code data-lng='soc'>
0
0.5
1
teenager
very teenager
true
false
</code>

<h3 class='center-h' data-href='Logic_expression_chapter'>
Logic expression
</h3>

<LinkToContent/>

<gr>
<EBNFCDECL name='LogicExpr'/> = <GEBNFC name='LogicExpr' kind='or'/> .
<EBNFCDECL name='ImperativeLogicExpr' groups='Expr'/> = <GEBNFC name='ImperativeLogicExpr' kind='or'/> .
</gr>

<h3 class='center-h' data-href='Grouping_expression_chapter'>
Grouping
</h3>

<LinkToContent/>

<p>
Expressions in round brackets executes as single expression.
</p>

<gr>
<EBNFCDECL name='LogicGroupingExpr' groups='LogicExpr'/> = "(" <EBNFC name='LogicExpr'/> ")" .
<EBNFCDECL name='ConditionalEntityGroupingExpr' groups='ConditionalEntityExpr'/> = "(" <EBNFC name='ConditionalEntityExpr'/> ")" .
<EBNFCDECL name='ImperativeLogicGroupingExpr' groups='ImperativeLogicExpr'/> = "(" <EBNFC name='ImperativeLogicExpr'/> ")" .
<EBNFCDECL name='GroupingExpr' groups='Expr'/> = "(" <EBNFC name='Expr'/> ")" .
</gr>

<code data-lng='soc'>
{: ( age(#Tom, $x) & distance(#Tom, $y) & $x is not $y ) | see(I, enemy) :}
#@(hold(I, this) & (weapon & dog) )
</code>

<code data-lng='soc'>
(3 + 5) * 2
</code>

<h3 class='center-h' data-href='Variable_chapter'>
Variable
</h3>

<LinkToContent/>

<p>
A variable is a storage location for holding a value.
</p>

<p>
Both reading and writing are allowed for variables.
</p>

<p>
Default value of variable is <b>NULL</b>.
</p>

<gr>
<EBNFCDECL name='VarExpr' groups='Expr;LogicExpr;ImperativeLogicExpr'/> = <EBNFC name='VarIdentifier'/> .
</gr>

<code data-lng='soc'>
@x
@`target value`
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Variables'>here</a>.
</p>

<h3 class='center-h' data-href='System_variable_chapter'>
System variable
</h3>

<LinkToContent/>

<p>
It's a special variable, which value is only written by engine.
</p>

<p>
Only reading is allowed for system variables.
</p>

<gr>
<EBNFCDECL name='SysVarExpr' groups='Expr;LogicExpr;ImperativeLogicExpr'/> = <EBNFC name='SysVarIdentifier'/> .
</gr>

<code data-lng='soc'>
@@host
</code>

<h4 class='center-h' data-href='Available_system_variables_chapter'>
Available system variables
</h4>

<LinkToContent/>

<h5 class='center-h' data-href='Self_system_variable_chapter'>
@@self
</h5>

<LinkToContent/>

<p>
Contains a link to the current <a href='#App_chapter'>App</a>.
</p>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Inheritance'>here</a>.
</p>

<h5 class='center-h' data-href='Host_system_variable_chapter'>
@@host
</h5>

<LinkToContent/>

<p>
Contains a link to the C# methods of this <a href='#App_chapter'>App</a> which are defined at the Unity3D level of the NPC logic or Thing.
</p>

<p>
Allows to call low-level C# methods for interaction with Unity3D.
</p>

<p>
It does nothing when It launched with the "CLI run".
</p>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Calling_host_method_Synchronous'>here</a>.
</p>

<h3 class='center-h' data-href='Logic_variable_chapter'>
Logic variable
</h3>

<LinkToContent/>

<p>
Logic variable can be used only in <a href='#Logic_expression_chapter'>Logic expression</a> and <a href='#Logic_сonditional_triggers_Binding_variables_chapter'>Binding variables</a> in <a href='#Logic_сonditional_triggers_chapter'>Logic сonditional triggers</a>.
</p>

<gr>
<EBNFCDECL name='LogicVarExpr' groups='LogicExpr'/> = <EBNFC name='LogicVarIdentifier'/> .
</gr>

<code data-lng='soc'>
$x
$y
</code>

<h4 class='center-h' data-href='Available_logic_variables_chapter'>
Available logic variables
</h4>

<LinkToContent/>

<h5 class='center-h' data-href='this_logic_variable_chapter'>
$_
</h5>

<LinkToContent/>

<p>
The logic variable is used in <a href='#Conditional_entity_chapter'>Conditional entity</a> and represents concrete entity which fits the condition.
</p>

<code data-lng='soc'>
#@{: barrel($_) :}
</code>

<h3 class='center-h' data-href='Channel_chapter'>
Channel
</h3>

<LinkToContent/>

<p>
Channels are a conduit through which you can send and receive values with the stream operator.
</p>

<p>
Now only sending has been implemented.
</p>

<gr>
<EBNFCDECL name='ChannelExpr' groups='Expr'/> = <EBNFC name='ChannelIdentifier'/> .
</gr>

<h4 class='center-h' data-href='Available_system_channels_chapter'>
Available system channels
</h4>

<LinkToContent/>

<h5 class='center-h' data-href='Log_system_channel_chapter'>
@>log
</h5>

<LinkToContent/>

<p>
A channel for writing information to the log in text form.
</p>

<p>
Logging targets are determined by the engine settings.
</p>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Hello_world'>here</a>.
</p>

<h3 class='center-h' data-href='Operators_chapter'>
Operators
</h3>

<LinkToContent/>

<p>
Operators combine operands into expressions.
</p>

<h4 class='center-h' data-href='OperatorPrecedence_chapter'>
Operator precedence
</h4>

<LinkToContent/>

<p>
<table class='std-table' style='width: 400px;' border='1' cellspacing='0'>
    <tr>
	    <th class='center-h'>Precedence</th>
		<th class='center-h'>Operators</th>
		<th class='center-h'>Associativity</th>
    </tr>
	<tr>
	    <th rowspan='5' class='center-h'>
		2
		<p><small>highest</small></p>
		</th>
	    <td>.</td>
	    <td rowspan='5'>Left-to-right</td>	
	</tr>
	<tr>
	    <td>()</td>
	</tr>
	<tr>
	    <td>select</td>
	</tr>
	<tr>
	    <td>?</td>
	</tr>
	<tr>
	    <td>insert</td>
	</tr>
	<tr>
	    <th rowspan='3' class='center-h'>3</th>
	    <td>!</td>
		<td rowspan='3' >Left-to-right</td>
	</tr>
	<tr>
	    <td>Unary +</td>
	</tr>
	<tr>
	    <td>Unary -</td>
	</tr>
	
	<tr>
	    <th rowspan='2' class='center-h'>5</th>
	    <td>*</td>
		<td rowspan='2' >Left-to-right</td>
	</tr>
	<tr>
	    <td>/</td>
	</tr>
	
	<tr>
	    <th rowspan='2' class='center-h'>6</th>
	    <td>+</td>
		<td rowspan='2' >Left-to-right</td>
	</tr>
	<tr>
	    <td>-</td>
	</tr>
	
	<tr>
	    <th rowspan='4' class='center-h'>9</th>
	    <td>&gt;</td>
	    <td rowspan='4'>Left-to-right</td>
	</tr>
	<tr>
	    <td>&gt;=</td>
	</tr>
	<tr>
	    <td>&lt;</td>
	</tr>
	<tr>
	    <td>&lt;=</td>
	</tr>	
	<tr>
	    <th rowspan='3' class='center-h'>10</th>
	    <td>is</td>
	    <td rowspan='3'>Left-to-right</td>
	</tr>
	<tr>
	    <td>is not</td>
	</tr>
	<tr>
	    <td>use is</td>
	</tr>
	<tr>
	    <th class='center-h'>14</th>
	    <td>&amp;</td>
		<td>Left-to-right</td>
	</tr>
	<tr>
	    <th class='center-h'>15</th>
	    <td>|</td>
		<td>Left-to-right</td>
	</tr>
	<tr>
	    <th class='center-h'>16</th>
	    <td>&gt;&gt;</td>
	    <td>Left-to-right</td>
	</tr>
	<tr>
	    <th class='center-h'>17</th>
	    <td>=</td>
	    <td>Right-to-left</td>
	</tr>
	<tr>
	    <th class='center-h'>18</th>
	    <td>,</td>
	    <td>Left-to-right</td>
	</tr>	
</table>
<p>

<h3 class='center-h' data-href='Assignment_operators_chapter'>
Assignment operators
</h3>

<LinkToContent/>

<h4 class='center-h' data-href='AssignmentOp_chapter'>
Operator "="
</h4>

<LinkToContent/>

<p>
Associativity: Right-to-left.
</p>

<p>
    <b>In imperative code:</b>
</p>

<p>
Writes a value from the right operand to the left operand and returns the value of the right operand, which can be used in further calculations.
</p>

<p>
The left operand must be a variable.
</p>

<gr>
<EBNFCDECL name='AssignmentOpExpr' groups='Expr'/> = <TEBNFC name='BinaryOp' param = '='/> .
<EBNFCDECL name='ImperativeLogicAssignmentOpExpr' groups='ImperativeLogicExpr'/> = <TEBNFC name='ImperativeLogicBinaryOp' param = '='/> .
</gr>

<code data-lng='soc'>
@x = 1;
@r = @b = 1;
</code>

<p>
    <b>In logic expression:</b>
</p>

<p>
Defines alias for logic expression.
This alias can be used in logic expressions as usual <a href='#Logic_variable_chapter'>Logic variable</a>.
</p>

<gr>
<EBNFCDECL name='AliasLogicExpr' groups='LogicExpr'/> = <EBNFC name='LogicVarExpr'/> "=" ( <GEBNFC name='AliasLogicExpr' kind='or' /> ) .
</gr>

<code data-lng='soc'>
$x = act(M16, shoot)
{: $x = act(M16, shoot) & hear(I, $x) :}
</code>

<p>
Now the alias can be created only for <a href='#PredicateOp_chapter'>predicates</a>.
</p>

<p>
    <b>In conditional entity expression:</b>
</p>

<p>
It is a short representation relations between object and values in conditional entity expression instead of predicate.
</p>

<gr>
<EBNFCDECL name='ConditionalEntityRelationOpExpr' groups='ConditionalEntityExpr'/> = <EBNFC name='ConditionalEntityRelationNameExpr'/> "=" <EBNFC name='ConditionalEntityRelationValueExpr'/> .
<EBNFCDECL name='ConditionalEntityRelationNameExpr'/> = <EBNFC name='ConceptIdentifier'/> .
<EBNFCDECL name='ConditionalEntityRelationValueExpr'/> = <EBNFC name='ConstExpr'/> .
</gr>

<code data-lng='soc'>
#@(color = black)
</code>

<p>
It is the same like:
</p>

<code data-lng='soc'>
#@{: color($_, black) =  :}
</code>

<h3 class='center-h' data-href='Relational_operators_chapter'>
Relational operators
</h3>

<LinkToContent/>

<h4 class='center-h' data-href='IsOp_chapter'>
Operator "is"
</h4>

<LinkToContent/>

<p>
Returns <a href='#Inheritance_chapter'>inheritance rank</a>.
The left operand contains a checked object.
The right-hand operand contains a possible base object.
</p>

<gr>
<EBNFCDECL name='IsOpExpr' groups='Expr;ImperativeLogicExpr'/> = <TEBNFC name='IsOpExprBody'/> .
<EBNFCDECL name='LogicIsOpExpr' groups='LogicExpr'/> = <EBNFC name='LogicIsOpExprBranch'/> "is" [ "not" ] <EBNFC name='LogicIsOpExprBranch'/> .
<EBNFCDECL name='LogicIsOpExprBranch'/> = <EBNFC name='ConstExpr'/> | <EBNFC name='LogicVarExpr'/> .
<EBNFCDECL name='ImperativeLogicIsOpExpr' groups='ImperativeLogicExpr' /> = <EBNFC name='ImperativeLogicExpr'/> "is" [ "not" ] <EBNFC name='ImperativeLogicExpr'/> .
</gr>

<code data-lng='soc'>
exampleClass is human >> @>log;
</code>

<code data-lng='soc'>
@a is 3
@a is teenager
</code>

<p>
Using "not" returns 1 if inheritance relationship is not exist between two operands otherwise returns 0.
</p>

<code data-lng='soc'>
exampleClass is not human >> @>log;
</code>

<code data-lng='soc'>
@a is not 3
@a is not teenager
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Inheritance'>here</a>.
</p>

<p>
Operator "is" is used in <a href='#Logic_expression_chapter'>Logic expressions</a> for comparison.
The comparison uses <a href='#Inheritance_chapter'>inheritance relationship</a>.
Also operator "is" can compare <EBNFC name='NumericFuzzyExpr'/> and <EBNFC name='NonNumericFuzzyExpr'/>.
</p>

<code data-lng='soc'>
{: age(#Tom, $x) & distance(#Tom, $y) & $x is $y :}
{: age(#Tom, $x) & distance(#Tom, $y) & $x is not $y :}
{: distance(#Tom, $x) & $x is 12 :}
{: see(I, $x) & $x is barrel & distance(I, $x, $y) :}
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Logic_queries'>here</a>.
</p>

<h4 class='center-h' data-href='PredicateOp_chapter'>
Predicate
</h4>

<LinkToContent/>

<p>
Represents relations between objects or objects and values.
</p>

<p>
Predicate can be only used in <a href='#Logic_expression_chapter'>Logic expression</a>.
</p>

<p>
You can read <a href='#Semantics_of_Logic_sentence_chapter'>here</a> about semantics of predicates.
</p>

<gr>
<EBNFCDECL name='PredicateIdentifier'/> = <EBNFC name='ConceptIdentifier'/> | <EBNFC name='LogicVarExpr'/> .
<EBNFCDECL name='PredicateOp' groups='LogicExpr;AliasLogicExpr'/> = <EBNFC name='PredicateIdentifier'/> "(" <EBNFC name='PredicateParameter'/> [ { "," <EBNFC name='PredicateParameter'/> } ] ")" .
<EBNFCDECL name='PredicateParameter'/> = <EBNFC name='ConstExpr'/> | <EBNFC name='LogicVarExpr'/> | <EBNFC name='PredicateOp'/> .
</gr>

<code data-lng='soc'>
male(#Tom)
parent(#Piter, #Tom)
son($x, $y)
age(#Tom, 12)
distance(I, #Tom, 12)
$z(#Alisa_12, $x)
hear(I, act(M16, shoot))
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Logic_queries'>here</a>.
</p>

<h4 class='center-h' data-href='MoreOp_chapter'>
Operator "&gt;"
</h4>

<LinkToContent/>

<p>
In <a href='#Logic_expression_chapter'>Logic expression</a> It has sucess if left-hand operand is greater than its right-hand operand, otherwise fail.
</p>

<gr>
<EBNFCDECL name='MoreOpExpr' groups='LogicExpr'/> = <TEBNFC name='LogicBinaryOp' param = '&gt;'/> .
</gr>

<code data-lng='soc'>
{: distance(#Tom, $x) & $x > 5 :}
</code>

<p>
You can see examples of rules, facts and logic queries <a href='/docs/lng_examples/index.html#Logic_queries'>here</a>.
</p>

<p>
In imperative code It returns <b>true</b> if left-hand operand is greater than its right-hand operand, otherwise <b>false</b>.
</p>

<gr>
<EBNFCDECL name='ImperativeLogicMoreOpExpr' groups='ImperativeLogicExpr'/> = <TEBNFC name='ImperativeLogicBinaryOp' param = '&gt;'/> .
</gr>

<code data-lng='soc'>
@a > 5
@age > teenager
</code>

<p>
You can see examples of imperative code <a href='/docs/lng_examples/index.html#ImperativeLogicOperators'>here</a>.
</p>

<h4 class='center-h' data-href='MoreOrEqvOp_chapter'>
Operator "&gt;="
</h4>

<LinkToContent/>

<p>
In <a href='#Logic_expression_chapter'>Logic expression</a> It has sucess if left-hand operand is greater than or equal to its right-hand operand, otherwise fail.
</p>

<gr>
<EBNFCDECL name='MoreOrEqvOpExpr' groups='LogicExpr'/> = <TEBNFC name='LogicBinaryOp' param = '&gt;='/> .
</gr>

<code data-lng='soc'>
{: distance(#Tom, $x) & $x >= 5 :}
</code>

<p>
You can see examples of rules, facts and logic queries <a href='/docs/lng_examples/index.html#Logic_queries'>here</a>.
</p>

<p>
In imperative code It returns <b>true</b> if left-hand operand is greater than or equal to its right-hand operand, otherwise <b>false</b>.
</p>

<gr>
<EBNFCDECL name='ImperativeLogicMoreOrEqvOpExpr' groups='ImperativeLogicExpr'/> = <TEBNFC name='ImperativeLogicBinaryOp' param = '&gt;='/> .
</gr>

<code data-lng='soc'>
@a >= 5
@age >= teenager
</code>

<p>
You can see examples of imperative code <a href='/docs/lng_examples/index.html#ImperativeLogicOperators'>here</a>.
</p>

<h4 class='center-h' data-href='LessOp_chapter'>
Operator "&lt;"
</h4>

<LinkToContent/>

<p>
In <a href='#Logic_expression_chapter'>Logic expression</a> It has sucess if left-hand operand is less than its right-hand operand, otherwise fail.
</p>

<gr>
<EBNFCDECL name='LessOpExpr' groups='LogicExpr'/> = <TEBNFC name='LogicBinaryOp' param = '&lt;'/> .
</gr>

<code data-lng='soc'>
{: distance(#Tom, $x) & $x < 5 :}
</code>

<p>
You can see examples of rules, facts and logic queries <a href='/docs/lng_examples/index.html#Logic_queries'>here</a>.
</p>

<p>
In imperative code It returns <b>true</b> if left-hand operand is less than its right-hand operand, otherwise <b>false</b>.
</p>

<gr>
<EBNFCDECL name='ImperativeLogicLessOpExpr' groups='ImperativeLogicExpr'/> = <TEBNFC name='ImperativeLogicBinaryOp' param = '&lt;'/> .
</gr>

<code data-lng='soc'>
@a < 5
@age < teenager
</code>

<p>
You can see examples of imperative code <a href='/docs/lng_examples/index.html#ImperativeLogicOperators'>here</a>.
</p>

<h4 class='center-h' data-href='LessOrEqvOp_chapter'>
Operator "&lt;="
</h4>

<LinkToContent/>

<p>
In <a href='#Logic_expression_chapter'>Logic expression</a> It has sucess if left-hand operand is less than or equal to its right-hand operand, otherwise fail.
</p>

<gr>
<EBNFCDECL name='LessOrEqvOpExpr' groups='LogicExpr'/> = <TEBNFC name='LogicBinaryOp' param = '&lt;='/> .
</gr>

<code data-lng='soc'>
{: distance(#Tom, $x) & $x <= 5 :}
</code>

<p>
You can see examples of rules, facts and logic queries <a href='/docs/lng_examples/index.html#Logic_queries'>here</a>.
</p>

<p>
In imperative code It returns <b>true</b> if left-hand operand is less than or equal to its right-hand operand, otherwise <b>false</b>.
</p>

<gr>
<EBNFCDECL name='ImperativeLogicLessOrEqvOpExpr' groups='ImperativeLogicExpr'/> = <TEBNFC name='ImperativeLogicBinaryOp' param = '&lt;='/> .
</gr>

<code data-lng='soc'>
@a <= 5
@age <= teenager
</code>

<p>
You can see examples of imperative code <a href='/docs/lng_examples/index.html#ImperativeLogicOperators'>here</a>.
</p>

<h3 class='center-h' data-href='LogicOp_chapter'>
    Logic operators
</h3>

<LinkToContent/>

<h4 class='center-h' data-href='AndOp_chapter'>
    Operator "&"
</h4>

<LinkToContent/>

<p>
Operator of logical conjunction (logical <b>and</b>).
</p>

<gr>
<EBNFCDECL name='AndOpExpr' groups='LogicExpr'/> = <TEBNFC name='LogicBinaryOp' param = '&'/> .
</gr>

<code data-lng='soc'>
male($x) & parent($y, $x)
</code>

<gr>
<EBNFCDECL name='ConditionalEntityAndOpExpr' groups='ConditionalEntityExpr'/> = <TEBNFC name='ConditionalEntityBinaryOp' param = '&'/> .
</gr>

<code data-lng='soc'>
#@(hold(I, this) & weapon)
#@(hold(I, this) & (weapon & dog) )
</code>

<p>
You can see examples of rules, facts and logic queries <a href='/docs/lng_examples/index.html#Logic_queries'>here</a>.
</p>

<gr>
<EBNFCDECL name='ImperativeLogicAndOpExpr' groups='ImperativeLogicExpr'/> = <TEBNFC name='ImperativeLogicBinaryOp' param = '&'/> .
</gr>

<code data-lng='soc'>
@a > 0 & @a < 5
</code>

<p>
You can see examples of imperative code <a href='/docs/lng_examples/index.html#ImperativeLogicOperators'>here</a>.
</p>

<h4 class='center-h' data-href='OrOp_chapter'>
Operator "|"
</h4>

<LinkToContent/>

<p>
Operator of logical disjunction (logical <b>or</b>).
</p>

<gr>
<EBNFCDECL name='OrOpExpr' groups='LogicExpr'/> = <TEBNFC name='LogicBinaryOp' param = '|'/> .
</gr>

<code data-lng='soc'>
{: ( age(#Tom, $x) & distance(#Tom, $y) & $x is not $y ) | see(I, enemy) :}
</code>

<gr>
<EBNFCDECL name='ConditionalEntityOrOpExpr' groups='ConditionalEntityExpr'/> = <TEBNFC name='ConditionalEntityBinaryOp' param = '|'/> .
</gr>

<code data-lng='soc'>
#@(hold(I, this) & (weapon | dog) )
</code>

<p>
You can see examples of rules, facts and logic queries <a href='/docs/lng_examples/index.html#Logic_queries'>here</a>.
</p>

<gr>
<EBNFCDECL name='ImperativeLogicOrOpExpr' groups='ImperativeLogicExpr'/> = <TEBNFC name='ImperativeLogicBinaryOp' param = '|'/> .
</gr>

<code data-lng='soc'>
@a > 0 | @a < 5
</code>

<p>
You can see examples of imperative code <a href='/docs/lng_examples/index.html#ImperativeLogicOperators'>here</a>.
</p>

<h4 class='center-h' data-href='NotOp_chapter'>
Operator "!"
</h4>

<LinkToContent/>

<p>
Operator of logical negation (logical <b>not</b>).
</p>

<gr>
<EBNFCDECL name='NotOp' groups='LogicExpr'/> = <TEBNFC name='LogicUnaryOp' param = '!'/> .
</gr>

<code data-lng='soc'>
{: see(I, $x) & barrel($x) & !focus(I, friend) :}
</code>

<p>
You can see examples of rules, facts and logic queries <a href='/docs/lng_examples/index.html#Logic_queries'>here</a>.
</p>

<gr>
<EBNFCDECL name='ImperativeLogic ' groups='ImperativeLogicExpr'/> = <TEBNFC name='ImperativeLogicUnaryOp_2' param = '( "!" | "not" )'/> .
</gr>

<code data-lng='soc'>
!(@a > 5)
not(@a > 5)
</code>

<p>
You can see examples of imperative code <a href='/docs/lng_examples/index.html#ImperativeLogicOperators'>here</a>.
</p>

<h3 class='center-h' data-href='ArithmeticOperators_chapter'>
Arithmetic operators
</h3>

<LinkToContent/>

<h4 class='center-h' data-href='AddOp_chapter'>
Operator "+"
</h4>

<LinkToContent/>

<p>
The addition operator "+" computes the sum of its operands.
</p>

<gr>
<EBNFCDECL name='AddOp' groups='Expr'/> = <TEBNFC name='BinaryOp' param = '+'/> .
</gr>

<p>
If one (or two) operand is <b><a href='NULL_literal_chapter'>null</a></b> the result also will be <b><a href='NULL_literal_chapter'>null</a></b>.
</p>

<p>
If two operands are <b><a href='String_literal_chapter'>string</a></b> the result will be concatenation of the strings.
If an operand is <b><a href='String_literal_chapter'>string</a></b> and another operand is not string the non string operand will be converted to string and the result will be concatenation.
</p>

<code data-lng='soc'>
1 + 1
@a + 1
@a + @b
@a + 'Hi' + 3
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#ArithmeticOperators'>here</a>.
</p>

<h4 class='center-h' data-href='UnaryPlusOp_chapter'>
Operator unary "+"
</h4>

<LinkToContent/>

<p>
The unary "+" operator computes absolute value (or modulus) of its operand.
</p>

<p>
If the operand is <b><a href='NULL_literal_chapter'>null</a></b> the result also will be <b><a href='NULL_literal_chapter'>null</a></b>.
</p>

<gr>
<EBNFCDECL name='UnaryPlusOp' groups='Expr'/> = <TEBNFC name='UnaryOp' param = '+'/> .
</gr>

<code data-lng='soc'>
+ @a
2 * + @a
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#ArithmeticOperators'>here</a>.
</p>

<h4 class='center-h' data-href='SubOp_chapter'>
Operator "-"
</h4>

<LinkToContent/>

<p>
The subtraction operator "-" subtracts its right-hand operand from its left-hand operand
</p>

<p>
If one (or two) operand is <b><a href='NULL_literal_chapter'>null</a></b> the result also will be <b><a href='NULL_literal_chapter'>null</a></b>.
</p>

<gr>
<EBNFCDECL name='SubOp' groups='Expr'/> = <TEBNFC name='BinaryOp' param = '-'/> .
</gr>

<code data-lng='soc'>
1 - 1
@a - 1
@a - @b
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#ArithmeticOperators'>here</a>.
</p>

<h4 class='center-h' data-href='UnaryMinusOp_chapter'>
Operator unary "-"
</h4>

<LinkToContent/>

<p>
The unary "-" operator computes the numeric negation of its operand.
If the operand is already negative the operator returns the value of its operand.
</p>

<p>
If the operand is <b><a href='NULL_literal_chapter'>null</a></b> the result also will be <b><a href='NULL_literal_chapter'>null</a></b>.
</p>

<gr>
<EBNFCDECL name='UnaryMinusOp' groups='Expr'/> = <TEBNFC name='UnaryOp' param = '-'/> .
</gr>

<code data-lng='soc'>
- @a
2 * - @a
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#ArithmeticOperators'>here</a>.
</p>

<h4 class='center-h' data-href='MulOp_chapter'>
Operator "*"
</h4>

<LinkToContent/>

<p>
The multiplication operator "*" computes the product of its operands.
</p>

<p>
If one (or two) operand is <b><a href='NULL_literal_chapter'>null</a></b> the result also will be <b><a href='NULL_literal_chapter'>null</a></b>.
</p>

<gr>
<EBNFCDECL name='MulOp' groups='Expr'/> = <TEBNFC name='BinaryOp' param = '*'/> .
</gr>

<code data-lng='soc'>
1 * 1
@a * 1
@a * @b
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#ArithmeticOperators'>here</a>.
</p>

<h4 class='center-h' data-href='DivOp_chapter'>
Operator "/"
</h4>

<LinkToContent/>

<p>
The division operator "/" divides its left-hand operand by its right-hand operand.
</p>

<p>
If the right-hand operand is 0 the result also will be <b><a href='NULL_literal_chapter'>null</a></b>.
</p>

<p>
If one (or two) operand is <b><a href='NULL_literal_chapter'>null</a></b> the result also will be <b><a href='NULL_literal_chapter'>null</a></b>.
</p>

<gr>
<EBNFCDECL name='DivOp' groups='Expr'/> = <TEBNFC name='BinaryOp' param = '/'/> .
</gr>

<code data-lng='soc'>
1 / 2
@a / 1
@a / @b
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#ArithmeticOperators'>here</a>.
</p>

<h3 class='center-h' data-href='Member_access_operators_chapter'>
Member access operators
</h3>

<LinkToContent/>

<h4 class='center-h' data-href='PointerOp_chapter'>
Operator "."
</h4>

<LinkToContent/>

<p>
Gets a reference to a member (specified in the right operand) of an object (specified in the left operand).
</p>

<p>
The right-hand operand must contain the member's identifier.
</p>

<gr>
<EBNFCDECL name='PointerOpExpr' groups='Expr;ImperativeLogicExpr' /> = <TEBNFC name='BinaryOp' param = '.'/> .
</gr>

<code data-lng='soc'>
@@host.`go`
</code>

<h3 class='center-h' data-href='Call_operators_chapter'>
Call operators
</h3>

<LinkToContent/>

<h4 class='center-h' data-href='CallOp_chapter'>
Operator "()"
</h4>

<LinkToContent/>

<p>
Calls an object (or member reference) with parameters specified in round brackets.
</p>

<p>
Whether a call is synchronous or asynchronous is determined by the presence of a &quot;~&quot; before the opening round bracket of the parameter list.
</p>

<gr>
<EBNFCDECL name='CallOpExpr'/> = <EBNFC name='Expr;ImperativeLogicExpr'/> [ "~" ] "(" [ <EBNFC name='NamedParamsOfCallOpExprSet'/> ] ")" .
<EBNFCDECL name='NamedParamsOfCallOpExprSet'/> = <EBNFC name='NamedParamOfCallOpExpr'/> [ { "," <EBNFC name='NamedParamOfCallOpExpr'/> } ] .
<EBNFCDECL name='NamedParamOfCallOpExpr'/> =  ( <EBNFC name='ConceptIdentifier'/> | <EBNFC name='VarIdentifier'/> ) ":" <EBNFC name='Expr'/> .
<EBNFCDECL name='PosParamsOfCallOpExprSet'/> =  <EBNFC name='PosParamOfCallOpExpr'/> [ { "," <EBNFC name='PosParamOfCallOpExpr'/> } ] .
<EBNFCDECL name='PosParamOfCallOpExpr'/> = <EBNFC name='Expr'/> .
</gr>

<p>
<b>Named parameter</b>:
</p>

<code data-lng='soc'>
a(param_1: 1);
a(param_1: 1, to: #@[25, 30]);
a(@param_1: 1);
a(@param_1: 1, @to: #@[25, 30]);
</code>

<p>
<b>Positional parameters</b>:
</p>

<code data-lng='soc'>
a(1);
a(1, dog);
</code>

<p>
<b>Without parameters</b>:
</p>

<code data-lng='soc'>
a();
</code>

<p>
A <b>synchronous call</b> is made when there is no &quot;~&quot;.
In this case, the operator returns directly the result of the called method.
</p>

<code data-lng='soc'>
@@host.`go`(to: #@[25, 30]);
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Calling_host_method_Synchronous'>here</a> and <a href='/docs/lng_examples/index.html#Function'>here</a>.
</p>

<p>
An <b>asynchronous call</b> is made when &quot;~&quot; is present.
In this case, the operator returns a reference to the object representing the asynchronous operation.
Working with asynchronous operations will be designed in details in the future.
</p>

<code data-lng='soc'>
@@host.`go`~(to: #@[25, 30]);
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Calling_host_method_Asynchronous'>here</a> and <a href='/docs/lng_examples/index.html#Function'>here</a>.
</p>

<h3 class='center-h' data-href='Stream_operators_chapter'>
Stream operators
</h3>

<LinkToContent/>

<h4 class='center-h' data-href='StreamOp_chapter'>
Operator ">>"
</h4>

<LinkToContent/>

<p>
Copies data from a source (<EBNFC name='SourceOfStreamOpExpr'/>) to a destination <EBNFC name='DestOfStreamOpExpr'/>.
</p>

<p>
The source (<EBNFC name='SourceOfStreamOpExpr'/>) cannot be a <a href='#Channel_chapter'>channel</a>.
The destination (<EBNFC name='DestOfStreamOpExpr'/>) must only be a <a href='#Channel_chapter'>channel</a>.
</p>

<p>
In the future I am going to extend the functionality of this operator.
</p>

<gr>
<EBNFCDECL name='SourceOfStreamOpExpr'/> = <EBNFC name='Expr'/> .
<EBNFCDECL name='DestOfStreamOpExpr'/> = <EBNFC name='Expr'/> .
<EBNFCDECL name='LeftRightStreamOpExpr' groups='Expr'/> = <EBNFC name='SourceOfStreamOpExpr'/> ">>" <EBNFC name='DestOfStreamOpExpr'/> .
</gr>

<code data-lng='soc'>
"End" >> @>log;
select {: son($x, $y) :} >> @>log;
</code>

<h3 class='center-h' data-href='Data_source_operators_chapter'>
Data source operators
</h3>

<LinkToContent/>

<h4 class='center-h' data-href='SelectOp_chapter'>
select (Operator "?")
</h4>

<LinkToContent/>

<p>
Performs a logical search and returns an object which contains the results of the search.
</p>

<p>
Now the result of a logical search can only be logged for demonstrating this search.
In the future, I am going to develop means for practical using results of logical searching in game development.
</p>

<gr>
<EBNFCDECL name='SelectOpExpr' groups='Expr'/> = ( "select" | "?" ) ( <EBNFC name='FactDecl'/> ) .
</gr>

<p>
Searched values are defined by the <a href='#QuestionVarIdentifier_chapter'>question variables</a> in the searching query.
</p>

<code data-lng='soc'>
select {: son($x, $y) :} >> @>log;
</code>

<console>
&lt;yes&gt;
$y = #piter; $x = #tom
</console>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Logic_queries_Example_1'>here</a>.
</p>

<code data-lng='soc'>
? {: son($x, $y) :} >> @>log;
</code>

<console>
&lt;yes&gt;
$y = #piter; $x = #tom
</console>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Logic_queries_Example_1'>here</a>.
</p>

<p>
<a href='#QuestionVarIdentifier_chapter'>Question variables</a> can be used for searching <a href='#Fact_chapter'>predicates</a>.
</p>

<code data-lng='soc'>
? {: $z(#Alisa_12, $x) :} >> @>log;
</code>

<console>
&lt;yes&gt;
$z = can(bird,fly); $x = fly
</console>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Logic_queries_Example_2'>here</a>.
</p>

<p>
In the absence of <a href='#QuestionVarIdentifier_chapter'>question variables</a>, only general result will be obtained: is it possible or not to find such facts in the knowledge database.
</p>

<code data-lng='soc'>
? {: can(#Alisa_12, fly) :} >> @>log;
</code>

<console>
&lt;yes&gt;
</console>

<code data-lng='soc'>
? {: can(#Alisa_12, @a) :} >> @>log;
</code>

<console>
&lt;yes&gt;
</console>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Logic_queries_Example_2'>here</a>.
</p>

<h4 class='center-h' data-href='InsertOp_chapter'>
insert
</h4>

<LinkToContent/>

<p>
Writes a <a href='#Fact_chapter'>fact</a> into the knowledge storage of current <a href='#App_chapter'>App</a>. 
Returns the added fact.
</p>

<gr>
<EBNFCDECL name='InsertOpExpr' groups='Expr'/> = "insert" <EBNFC name='FactDecl'/> .
</gr>

<code data-lng='soc'>
insert {: >: { bird (#1234) } :};
</code>

<code data-lng='soc'>
insert {: see(I, @a) :};
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Logic_queries_Example_3'>here</a>.
</p>

<h2 class='center-h' data-href='Statements_chapter'>
Statements
</h2>

<LinkToContent/>

<p>
Statements control execution.
</p>

<gr>
<EBNFCDECL name='StatementsSet'/> = <TEBNFC name='DeclSet' param = 'Statement'/> .
<EBNFCDECL name='Statement'/> = <GEBNFC name='Statement' kind='or' /> .
</gr>

<h3 class='center-h' data-href='Expression_statement_chapter'>
Expression statement
</h3>

<LinkToContent/>

<p>
Executes an expression line.
</p>

<gr>
<EBNFCDECL name='ExpressionStatement' groups='Statement'/> = <EBNFC name='Expr'/> ";" .
</gr>

<code data-lng='soc'>
@@host.`go`~(to: #@[25, 30]);
</code>

<h3 class='center-h' data-href='Variable_declaration_statement_chapter'>
Variable declaration statement
</h3>

<LinkToContent/>

<p>
Declares a local variable.
Optyonaly you can specify its types and initial value.
</p>

<gr>
<EBNFCDECL name='VarDeclStatement' groups='Statement'/> = <TEBNFC name='VarDecl'/> ";" .
</gr>

<code data-lng='soc'>
@b = 1;
var @a: string;
var @a: string | number;
var @a: (string | number);
@a: string | number;
var @a: number = 2;
var @a: number | string = 2;
var @a: (number | string)  = 2;
@a: number = 2;
</code>

<h3 class='center-h' data-href='ErrorStatement_chapter'>
"error" statement
</h3>

<LinkToContent/>

<p>
Signals the occurrence of an error during program execution.
</p>

<gr>
<EBNFCDECL name='ErrorStatement' groups='Statement'/> = "error" <EBNFC name='FactDecl'/> .
</gr>

<code data-lng='soc'>
error {: see(I, #a) :};
</code>

<code data-lng='soc'>
app PeaceKeeper
{
    on Init =>
    {
        error {: see(I, #a) :};
    }
}
</code>

<p>
In details the error handling is described in the chapter <a href='#Error_handling_chapter'>"Error handling"</a>.
</p>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Error_handling'>here</a>.
</p>

<h3 class='center-h' data-href='TryCatchStatement_chapter'>
"try-catch" statement
</h3>

<LinkToContent/>

<p>
This statement provides safe code execution, catching errors and blocks of guaranteed code execution.
</p>

<p>
The full statement contains <b>try</b>, <b>catch</b>, <b>else</b> and <b>ensure</b> blocks.
</p>

<p>
The statement can be call by blocks which It consists of.
For example, <b>try</b>-<b>catch</b>, <b>try</b>-<b>catch</b>-<b>else</b>-<b>ensure</b>, <b>try</b>-<b>ensure</b>.
</p>

<gr>
<EBNFCDECL name='TryCatchStatement' groups='Statement'/> = <EBNFC name='TryBlockOfTryCatchStatement'/> <br/> [ <EBNFC name='CatchBlockOfTryCatchStatement'/> [{ <EBNFC name='CatchBlockOfTryCatchStatement'/> }]] <br/> [ <EBNFC name='ElseBlockOfTryCatchStatement'/> ] <br/> [ <EBNFC name='EnsureBlockOfTryCatchStatement'/> ] .
<EBNFCDECL name='TryBlockOfTryCatchStatement'/> = "try" <br/> "{" <br/> [ <EBNFC name='StatementsSet'/> ] <br/> "}" .
<EBNFCDECL name='CatchBlockOfTryCatchStatement'/> = "catch" [ "(" <EBNFC name='VarIdentifier'/> ")" [ "where" <EBNFC name='FactDecl'/> ] ] <br/> "{" <br/> [ <EBNFC name='StatementsSet'/> ] <br/> "}" .
<EBNFCDECL name='ElseBlockOfTryCatchStatement'/> = "else" <br/> "{" <br/> [ <EBNFC name='StatementsSet'/> ] <br/> "}" .
<EBNFCDECL name='EnsureBlockOfTryCatchStatement'/> = "ensure" <br/> "{" <br/> [ <EBNFC name='StatementsSet'/> ] <br/> "}" .
</gr>

<p>
The <b>try</b> block contains the guarded code that may cause the error. 
The block is executed until an error is fired or it is completed successfully.
</p>

<p>
When an error is fired, the engine looks for the <b>catch</b> statement that handles this error. 
If the currently executing method does not contain such a <b>catch</b> block, the engine looks at the method that called the current method, and so on up the call stack. 
If no <b>catch</b> block is found, then the engine stops execution of the trigger.
</p>

<p>
The <b>else</b> block runs when <b>try</b> block finished without error.
</p>

<p>
The <b>ensure</b> block is guaranteed to be run.
</p>

<p>
The order of execution of blocks:
    <ul>
	    <li>
		    <b>try</b>-<b>catch</b>-<b>else</b>-<b>ensure</b>:
			
			<ul>
			    <li>
				    with error: <b>try</b> &rarr; <b>catch</b> &rarr; <b>ensure</b>
				</li>
				
				<li>
				    without error: <b>try</b> &rarr; <b>else</b> &rarr; <b>ensure</b>
				</li>
			</ul>
		</li>
		
	    <li>
		    <b>try</b>-<b>catch</b>-<b>ensure</b>:
			
			<ul>
			    <li>
				    with error: <b>try</b> &rarr; <b>catch</b> &rarr; <b>ensure</b>
				</li>
				
				<li>
				    without error: <b>try</b> &rarr; <b>ensure</b>
				</li>
			</ul>
		</li>

	    <li>
		    <b>try</b>-<b>catch</b>-<b>else</b>:
			
			<ul>
			    <li>
				    with error: <b>try</b> &rarr; <b>catch</b>
				</li>
				
				<li>
				    without error: <b>try</b> &rarr; <b>else</b>
				</li>
			</ul>
		</li>

	    <li>
		    <b>try</b>-<b>catch</b>:
			
			<ul>
			    <li>
				    with error: <b>try</b> &rarr; <b>catch</b>
				</li>
				
				<li>
				    without error: <b>try</b>
				</li>
			</ul>
		</li>

	    <li>
		    <b>try</b>-<b>else</b>:
			
			<ul>
			    <li>
				    with error: <b>try</b>
				</li>
				
				<li>
				    without error: <b>try</b> &rarr; <b>else</b>
				</li>
			</ul>
		</li>

	    <li>
		    <b>try</b>-<b>ensure</b>:
			
			<ul>
			    <li>
				    with error: <b>try</b> &rarr; <b>ensure</b>
				</li>
				
				<li>
				    without error: <b>try</b> &rarr; <b>ensure</b>
				</li>
			</ul>
		</li>

	    <li>
		    <b>try</b>-<b>else</b>-<b>ensure</b>:
			
			<ul>
			    <li>
				    with error: <b>try</b> &rarr; <b>ensure</b>
				</li>
				
				<li>
				    without error: <b>try</b> &rarr; <b>else</b> &rarr; <b>ensure</b>
				</li>
			</ul>
		</li>		
	</ul>
</p>

<p>
<b>Full statement (try-catch-else-ensure):</b>
</p>

<code data-lng='soc'>
app PeaceKeeper
{
    fun a(@param_1) =>
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;

        error {: see(I, #a) :};

        'End of `a`' >> @>log;
    }

    on Init =>
    {
        try
        {
            'Begin' >> @>log;
            a(param_1: 1);
            'End' >> @>log;        
        }
        catch
        {
            'catch' >> @>log;
        }
        catch(@e)
        {
            'catch(@e)' >> @>log;
            @e >> @>log;
        }
        catch(@e) where {: hit(enemy, I) :}
        {
            'catch(@e) where {: hit(enemy, I) :}' >> @>log;
        }
        catch(@e) where {: see(I, $x) :}
        {
            'catch(@e) where {: see(I, $x) :}' >> @>log;
            @e >> @>log;
        }
        else
        {
            'else' >> @>log;
        }
        ensure
        {
            'ensure' >> @>log;
        }

        'End of `Init`' >> @>log;
    }
}
</code>

<p>
<b>try-catch:</b>
</p>

<code data-lng='soc'>
app PeaceKeeper
{
    fun a(@param_1) =>
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;

        error {: see(I, #a) :};

        'End of `a`' >> @>log;
    }

    on Init =>
    {
        try
        {
            'Begin' >> @>log;
            a(param_1: 1);
            'End' >> @>log;        
        }
        catch
        {
            'catch' >> @>log;
        }

        'End of `Init`' >> @>log;
    }
}
</code>

<p>
<b>try-catch-ensure:</b>
</p>

<code data-lng='soc'>
app PeaceKeeper
{
    fun a(@param_1) =>
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;

        error {: see(I, #a) :};

        'End of `a`' >> @>log;
    }

    on Init =>
    {
        try
        {
            'Begin' >> @>log;
            a(param_1: 1);
            'End' >> @>log;        
        }
        catch
        {
            'catch' >> @>log;
        }
		ensure
        {
            'ensure' >> @>log;
        }

        'End of `Init`' >> @>log;
    }
}
</code>

<p>
<b>try-ensure:</b>
</p>

<code data-lng='soc'>
app PeaceKeeper
{
    on Init =>
    {
        try
        {
            'Begin' >> @>log;
            error {: see(I, #a) :};
            'End' >> @>log;        
        }
        ensure
        {
            'ensure' >> @>log;
        }

        'End of `Init`' >> @>log;
    }
}
</code>

<p>
<b>try-else:</b>
</p>

<code data-lng='soc'>
app PeaceKeeper
{
    on Init =>
    {
        try
        {
            'Begin' >> @>log;
            error {: see(I, #a) :};
            'End' >> @>log;        
        }
        else
        {
            'else' >> @>log;
        }

        'End of `Init`' >> @>log;
    }
}
</code>

<p>
<b>try-else-ensure:</b>
</p>

<code data-lng='soc'>
app PeaceKeeper
{
    on Init =>
    {
        try
        {
            'Begin' >> @>log;
            error {: see(I, #a) :};
            'End' >> @>log;        
        }
        else
        {
            'else' >> @>log;
        }
        ensure
        {
            'ensure' >> @>log;
        }

        'End of `Init`' >> @>log;
    }
}
</code>

<p>
<b>try:</b>
</p>

<code data-lng='soc'>
app PeaceKeeper
{
    fun a(@param_1) =>
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;

        error {: see(I, #a) :};

        'End of `a`' >> @>log;
    }

    on Init =>
    {
        try
        {
            'Begin' >> @>log;
            a(param_1: 1);
            'End' >> @>log;        
        }

        'End of `Init`' >> @>log;
    }
}
</code>

<p>
In details the error handling is described in the chapter <a href='#Error_handling_chapter'>"Error handling"</a>.
</p>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Error_handling'>here</a>.
</p>

<h3 class='center-h' data-href='SetIsStatement_chapter'>
"set is" statement
</h3>

<LinkToContent/>

<p>
Sets an inheritance relationship (&quot;is a&quot;) between two objects.
</p>

<gr>
<EBNFCDECL name='UseIsOpStatement' groups='Statement'/> = "set" <TEBNFC name='IsOpExprBody'/> .
</gr>

<code data-lng='soc'>
set @@self is linux;
set exampleClass is human;
set exampleClass is [0.5] human;
set #`Alisa 12` is [0.6] human;
</code>

<p>
Using &quot;not&quot; removes the inheritance relationship.
</p>

<code data-lng='soc'>
set exampleClass is not human;
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Inheritance'>here</a>.
</p>

<h3 class='center-h' data-href='AwaitStatement_chapter'>
"await" statement
</h3>

<LinkToContent/>

<p>
The <b>await</b> statement suspends evaluation of the enclosing method until the <b><a href='#Action_chapter'>action</a></b> will be <a href='#CompleteActionStatement_chapter'>completed</a> or <a href='#BreakActionStatement_chapter'>broken</a> by handlers of child triggers or functions which have been called from the handlers.
</p>

<gr>
<EBNFCDECL name='AwaitStatement' groups='Statement'/> = "await" .
</gr>

<code data-lng='soc'>
    op () => 
    {
        @@host.`go`(to: #@[10]);
        await;
    }
</code>

<code data-lng='soc'>
    op () => 
    {
        await;
    }
</code>

<h3 class='center-h' data-href='CompleteActionStatement_chapter'>
"complete action" statement
</h3>

<LinkToContent/>

<p>
The statement <b>complete action</b> terminates <b><a href='#Action_chapter'>action</a></b> by the reason of achieving goal of the action.
</p>

<gr>
<EBNFCDECL name='CompleteActionStatement' groups='Statement'/> = "complete" "action" .
</gr>

<code data-lng='soc'>
    on {: see(I, enemy) :} => 
    {
        complete action;
    }
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Action'>here</a>.
</p>

<h3 class='center-h' data-href='BreakActionStatement_chapter'>
"break action" statement
</h3>

<LinkToContent/>

<p>
The statement <b>break action</b> breakes the <b><a href='#Action_chapter'>action</a></b>.
It is similar to <a href='#ErrorStatement_chapter'>Error statement</a>.
But "Error statement" can break <b><a href='#Action_chapter'>Action</a></b> only in action's entry points or functions which have been called from the action's entry points.
The statement <b>break action</b> can break <b><a href='#Action_chapter'>Action</a></b> in any place of the Action.
</p>

<gr>
<EBNFCDECL name='BreakActionStatement' groups='Statement'/> = "break" "action" <EBNFC name='FactDecl'/> .
</gr>

<code data-lng='soc'>
    on {: see(I, enemy) :} => 
    {
        break action {: see(I, enemy) :};
    }
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#Action'>here</a>.
</p>

<h3 class='center-h' data-href='RepeatStatement_chapter'>
"repeat" statement
</h3>

<LinkToContent/>

<p>
"repeat" statement defines the infinite loop.
</p>

<gr>
<EBNFCDECL name='RepeatStatement' groups='Statement'/> = "repeat" <br/> "{" <br/> [ <EBNFC name='StatementsSet'/> ] <br/> "}" .
</gr>

<code data-lng='soc'>
    repeat
    {
        @a >> @>log;
        @a = @a - 1;

        if(@a > 5)
        {
            continue;
        }

        break;
    }
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#RepeatStatement'>here</a>.
</p>

<h3 class='center-h' data-href='WhileStatement_chapter'>
"while" statement
</h3>

<LinkToContent/>

<p>
The <b>while</b> statement executes a statement or a block of statements while a specified logic expression evaluates to <b>true</b> (1).
Because that expression is evaluated before each execution of the loop, a <b>while</b> loop executes zero or more times.
</p>

<gr>
<EBNFCDECL name='WhileStatement' groups='Statement'/> = "while" "(" <EBNFC name='ImperativeLogicExpr'/> ")" <br/> "{" <br/> [ <EBNFC name='StatementsSet'/> ] <br/> "}" .
</gr>

<code data-lng='soc'>
    while (@a > 0)
    {
        @a >> @>log;
        @a = @a - 1;
    }
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#WhileStatement'>here</a>.
</p>

<h3 class='center-h' data-href='ReturnStatement_chapter'>
"return" statement
</h3>

<LinkToContent/>

<p>
The <b>return</b> statement terminates execution of the function in which it appears and returns control and the function's result, if any, to the caller.
</p>

<p>
If a function member doesn't compute a value, you use the <b>return</b> statement without expression.
</p>

<gr>
<EBNFCDECL name='ReturnStatement' groups='Statement'/> = "return" [ <EBNFC name='Expr'/> ] ";" .
</gr>

<code data-lng='soc'>
    fun a() => 
    {
        '`a` has been called!' >> @>log;
        return;
    }
</code>

<code data-lng='soc'>
    fun a() => 
    {
        '`a` has been called!' >> @>log;
        return 2;
    }
</code>

<code data-lng='soc'>
    fun a(@param) => 
    {
        '`a` has been called!' >> @>log;
        return @param + 2;
    }
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#ReturnStatement'>here</a>.
</p>

<h3 class='center-h' data-href='IfElifElseStatement_chapter'>
"if-elif-else" statement
</h3>

<LinkToContent/>

<p>
Selects a statement to execute based on the value of a logic expression.
</p>

<gr>
<EBNFCDECL name='IfElifElseStatement' groups='Statement'/> = "if" "(" <EBNFC name='ImperativeLogicExpr'/> ")" <br/> "{" <br/> [ <EBNFC name='StatementsSet'/> ] <br/> "}" <br/> [ <TEBNFC name='ElifSection'/> { <TEBNFC name='ElifSection'/> }] <br/> [ "else" <br/> "{" <br/> [ <EBNFC name='StatementsSet'/> ] <br/> "}" ] .
</gr>

<p>
An <b>if</b> statement with an <b>else</b> part selects one of the two statements to execute based on the value of a Logic expression.
An <b>if</b> statement executes if the Logic expression evaluates to <b>true</b> (1).
</p>

<p>
An <b>if</b> statement without an <b>else</b> part executes its body only if a Logic expression evaluates to <b>true</b> (1).
</p>

<p>
You can use <b>elif</b> statements to check multiple conditions.
</p>

<p>
<b>if:</b>
</p>

<code data-lng='soc'>
    if(@a is 0)
    {
        'Yes!' >> @>log;
    }
</code>

<p>
<b>if-else:</b>
</p>

<code data-lng='soc'>
    if({: >: { see(I, #`Barel 1`) } :})
    {
        'Yes!' >> @>log;
    } else {
        'Else Yes!' >> @>log;
    }
</code>

<p>
<b>if-elif:</b>
</p>

<code data-lng='soc'>
    if({: >: { see(I, #`Barel 0`) } :})
    {
        'Yes!' >> @>log;
    } elif ({: >: { see(I, #`Barel 1`) } :}) {
        'Elif 1 Yes!' >> @>log;
    }
</code>

<p>
<b>if-elif-elif:</b>
</p>

<code data-lng='soc'>
    if({: >: { see(I, #`Barel 0`) } :})
    {
        'Yes!' >> @>log;
    } elif ({: >: { see(I, #`Barel 1`) } :}) {
        'Elif 1 Yes!' >> @>log;
    } elif ({: >: { see(I, #`Barel 2`) } :}) {
        'Elif 2 Yes!' >> @>log;
    }
</code>

<p>
<b>if-elif-elif-else:</b>
</p>

<code data-lng='soc'>
    if({: >: { see(I, #`Barel 0`) } :})
    {
        'Yes!' >> @>log;
    } elif ({: >: { see(I, #`Barel 1`) } :}) {
        'Elif 1 Yes!' >> @>log;
    } elif ({: >: { see(I, #`Barel 2`) } :}) {
        'Elif 2 Yes!' >> @>log;
    } else{
        'Else Yes!' >> @>log;
    }
</code>

<p>
<b>if-elif-else:</b>
</p>

<code data-lng='soc'>
    if({: >: { see(I, #`Barel 0`) } :})
    {
        'Yes!' >> @>log;
    } elif ({: >: { see(I, #`Barel 1`) } :}) {
        'Elif 1 Yes!' >> @>log;
    } else{
        'Else Yes!' >> @>log;
    }
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#IfElifElseStatement'>here</a>.
</p>

<h3 class='center-h' data-href='ContinueLoopStatement_chapter'>
"continue" loop statement
</h3>

<LinkToContent/>

<p>
The <b>continue</b> statement starts a new iteration of the closest enclosing iteration statement (that is, <b>repeat</b>, or <b>while</b>).
</p>

<gr>
<EBNFCDECL name='ContinueLoopStatement' groups='Statement'/> = "continue" ";" .
</gr>

<code data-lng='soc'>
    repeat
    {
        @a >> @>log;
        @a = @a - 1;

        if(@a > 5)
        {
            continue;
        }

        break;
    }
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#ContinueLoopStatement'>here</a>.
</p>

<h3 class='center-h' data-href='BreakLoopStatement_chapter'>
"break" loop statement
</h3>

<LinkToContent/>

<p>
The <b>break</b> statement terminates the closest enclosing iteration statement (that is, <b>repeat</b>, or <b>while</b>).
The <b>break</b> statement transfers control to the statement that follows the terminated statement, if any.
</p>

<gr>
<EBNFCDECL name='BreakLoopStatement' groups='Statement'/> = "break" ";" .
</gr>

<code data-lng='soc'>
    repeat
    {
        @a >> @>log;
        @a = @a - 1;

        if(@a > 5)
        {
            continue;
        }

        break;
    }
</code>

<p>
You can see examples <a href='/docs/lng_examples/index.html#BreakLoopStatement'>here</a>.
</p>

<h3 class='center-h' data-href='SetAsDefaultStateStatement_chapter'>
"Set as default state" statement
</h3>

<LinkToContent/>

<complete_me/>

<p>

</p>

<complete_me/>

<gr>
<EBNFCDECL name='SetAsDefaultStateStatement' groups='Statement'/> = <TEBNFC name='SetDefaultStateDecl'/> ";" .
</gr>

<complete_me/>

<code data-lng='soc'>
set Idling as default state;
</code>

<code data-lng='soc'>
state Patrolling
{
    on Enter
    {
        'Begin Patrolling Enter' >> @>log;

        set Idling as default state;

        'End Patrolling Enter' >> @>log;
    }
}
</code>

<complete_me/>

<h3 class='center-h' data-href='SetAsStateStatement_chapter'>
"Set as state" statement
</h3>

<LinkToContent/>

<complete_me/>

<p>

</p>

<complete_me/>

<gr>
<EBNFCDECL name='SetAsStateStatement' groups='Statement'/> = <TEBNFC name='SetStateDecl'/> ";" .
</gr>

<complete_me/>

<code data-lng='soc'>
set Idling as state;
</code>

<code data-lng='soc'>
state Patrolling
{
    on Enter
    {
        'Begin Patrolling Enter' >> @>log;

        set Idling as state;
    }
}
</code>

<complete_me/>

<p>
You can see examples <a href='/docs/lng_examples/index.html#State'>here</a>.
</p>

<h3 class='center-h' data-href='CompleteStateStatement_chapter'>
"complete" state statement
</h3>

<LinkToContent/>

<complete_me/>

<p>

</p>

<complete_me/>

<gr>
<EBNFCDECL name='CompleteStateStatement' groups='Statement'/> = "complete" "state" ";" .
</gr>

<complete_me/>

<code data-lng='soc'>
complete state;
</code>

<code data-lng='soc'>
state Patrolling
{
    on Enter
    {
        'Begin Patrolling Enter' >> @>log;

        complete state;
    }
}
</code>

<complete_me/>

<p>
You can see examples <a href='/docs/lng_examples/index.html#State'>here</a>.
</p>

<h3 class='center-h' data-href='BreakStateStatement_chapter'>
"break" state statement
</h3>

<LinkToContent/>

<complete_me/>

<p>

</p>

<complete_me/>

<gr>
<EBNFCDECL name='BreakStateStatement' groups='Statement'/> = "break" "state" [ <EBNFC name='FactDecl'/> ] ";" .
</gr>

<complete_me/>

<code data-lng='soc'>
break state;
break state {: attack(I, enemy) :};
</code>

<code data-lng='soc'>
state Patrolling
{
    on Enter
    {
        'Begin Patrolling Enter' >> @>log;

        break state;
    }
}
</code>

<code data-lng='soc'>
state Patrolling
{
    on Enter
    {
        'Begin Patrolling Enter' >> @>log;

        break state {: attack(I, enemy) :};
    }
}
</code>

<complete_me/>

<p>
You can see examples <a href='/docs/lng_examples/index.html#State'>here</a>.
</p>

<div class='templates'>
    <TEBNFCDECL name='BaseIdentifier'>
	    (( <EBNFC name='Letter'/> { <EBNFC name='Letter'/> | <EBNFC name='DecimalDigit'/> } ) | ( "`" { <EBNFC name='UnicodeChar'/> } "`"))
	</TEBNFCDECL>
	
	<TEBNFCDECL name='DeclSet' param='_ExprType'>
	    <EBNFC name='_ExprType'/> [{ <EBNFC name='_ExprType'/> }]
	</TEBNFCDECL>
	
	<TEBNFCDECL name='BinaryOp' param='_OpLiteral'>
	    <TEBNFC name='BinaryOp_2' param = '"_OpLiteral"'/>
	</TEBNFCDECL>
	
	<TEBNFCDECL name='BinaryOp_2' param='_OpLiteral'>
	    <TEBNFC name='BinaryOp_base' param = '_OpLiteral' param2="<EBNFC name='Expr'/>"/>
	</TEBNFCDECL>
	
	<TEBNFCDECL name='LogicBinaryOp' param='_OpLiteral'>
	    <TEBNFC name='LogicBinaryOp_2' param = '"_OpLiteral"'/>
	</TEBNFCDECL>
	
	<TEBNFCDECL name='LogicBinaryOp_2' param='_OpLiteral'>
	    <TEBNFC name='BinaryOp_base' param = '_OpLiteral' param2="<EBNFC name='LogicExpr'/>"/>
	</TEBNFCDECL>
	
	<TEBNFCDECL name='ImperativeLogicBinaryOp' param='_OpLiteral'>
	    <TEBNFC name='ImperativeLogicBinaryOp_2' param = '"_OpLiteral"'/>
	</TEBNFCDECL>
	
	<TEBNFCDECL name='ImperativeLogicBinaryOp_2' param='_OpLiteral'>
	    <TEBNFC name='BinaryOp_base' param = '_OpLiteral' param2="<EBNFC name='ImperativeLogicExpr'/>"/>
	</TEBNFCDECL>
	
	<TEBNFCDECL name='ConditionalEntityBinaryOp' param='_OpLiteral'>
	    <TEBNFC name='ConditionalEntityBinaryOp_2' param = '"_OpLiteral"'/>
	</TEBNFCDECL>
	
	<TEBNFCDECL name='ConditionalEntityBinaryOp_2' param='_OpLiteral'>
	    <TEBNFC name='BinaryOp_base' param = '_OpLiteral' param2="<EBNFC name='ConditionalEntityExpr'/>"/>
	</TEBNFCDECL>
	
	<TEBNFCDECL name='BinaryOp_base' param='_OpLiteral' param2='_ExpType'>
	    _ExpType _OpLiteral _ExpType
	</TEBNFCDECL>
	
	<TEBNFCDECL name='LogicUnaryOp' param='_OpLiteral'>
	    <TEBNFC name='LogicUnaryOp_2' param = '"_OpLiteral"' param2="<EBNFC name='LogicExpr'/>"/>
	</TEBNFCDECL>
	
	<TEBNFCDECL name='LogicUnaryOp_2' param='_OpLiteral'>
	    <TEBNFC name='UnaryOp_base' param = '_OpLiteral' param2="<EBNFC name='LogicExpr'/>"/>
	</TEBNFCDECL>
	
	<TEBNFCDECL name='ImperativeLogicUnaryOp' param='_OpLiteral'>
	    <TEBNFC name='ImperativeLogicUnaryOp_2' param = '"_OpLiteral"' param2="<EBNFC name='ImperativeLogicExpr'/>"/>
	</TEBNFCDECL>
	
	<TEBNFCDECL name='ImperativeLogicUnaryOp_2' param='_OpLiteral'>
	    <TEBNFC name='UnaryOp_base' param = '_OpLiteral' param2="<EBNFC name='ImperativeLogicExpr'/>"/>
	</TEBNFCDECL>
	
	<TEBNFCDECL name='UnaryOp' param='_OpLiteral'>
	    <TEBNFC name='UnaryOp_2' param = '"_OpLiteral"' param2="<EBNFC name='Expr'/>"/>
	</TEBNFCDECL>
	
	<TEBNFCDECL name='UnaryOp_2' param='_OpLiteral'>
	    <TEBNFC name='UnaryOp_base' param = '_OpLiteral' param2="<EBNFC name='Expr'/>"/>
	</TEBNFCDECL>
	
	<TEBNFCDECL name='UnaryOp_base' param='_OpLiteral' param2='_ExpType'>
	    _OpLiteral _ExpType
	</TEBNFCDECL>
	
	<TEBNFCDECL name='InheritanceDeclItem'>
	    [ "[" <EBNFC name='FuzzyExpr'/> "]" ] ( <GEBNFC name='TypeIdentifier' kind='or'/> )
	</TEBNFCDECL>
	
	<TEBNFCDECL name='IsOpExprBody'>
	    ( <GEBNFC name='TypeIdentifier' kind='or'/> ) "is" ( ( <TEBNFC name='InheritanceDeclItem'/> ) | ( [ "not" ] ( <GEBNFC name='TypeIdentifier' kind='or'/> ) ) )
	</TEBNFCDECL>
	
	<TEBNFCDECL name='VarDecl'>
	    [ "var" ] <EBNFC name='VarIdentifier'/> [ ":" ( ( "(" <EBNFC name='ConceptIdentifier'/> [ { "|" <EBNFC name='ConceptIdentifier'/> } ] ")" ) | ( <EBNFC name='ConceptIdentifier'/> [ { "|" <EBNFC name='ConceptIdentifier'/> } ] ) ) [ "=" <EBNFC name='Expr'/> ]
	</TEBNFCDECL>
	
	<TEBNFCDECL name='ElifSection'>
	    "elif" "(" <EBNFC name='ImperativeLogicExpr'/> ")" <br/> "{" <br/> [ <EBNFC name='StatementsSet'/> ] <br/> "}" <br/>
	</TEBNFCDECL>
	
	<TEBNFCDECL name='SetDefaultStateDecl'>
	    "set" <EBNFC name='StateIdentifier'/> "as" "default" "state"
	</TEBNFCDECL>
	
	<TEBNFCDECL name='SetStateDecl'>
	    "set" <EBNFC name='StateIdentifier'/> "as" "state"
	</TEBNFCDECL>
</div>

<a href='/docs/lng_examples/index.html#'></a>

<!--
<h2 class='center-h' data-href=''>

</h2>

<h3 class='center-h' data-href=''>

</h3>

<h4 class='center-h' data-href=''>

</h4>

<h2 class='center-h' data-href='_chapter'>

</h2>

<h3 class='center-h' data-href='_chapter'>

</h3>

<LinkToContent/>

<h4 class='center-h' data-href='_chapter'>

</h4>

<h5 class='center-h' data-href='_chapter'>

</h5>

<a href=''></a>

<a href='#'></a>

<p>

</p>

<complete_me/>

<code data-lng='soc'>

</code>

<code data-lng='soc' example-href='/docs/lng_examples/.zip'>

</code>

<console>

</console>

<gr>
<EBNFCDECL name='' groups=''/> =  .
</gr>

<gr>
<EBNFCDECL name=''/> =  .
</gr>

<GEBNFC name='' kind=''/>

<EBNFC name=''/>

<TEBNFC name=''/>

<EBNFCDECL name='ImperativeLogic ' groups='ImperativeLogicExpr'/> = <TEBNFC name='ImperativeLogicBinaryOp' param = ''/> .

ImperativeLogicExpr   Expr  LogicExpr
-->
