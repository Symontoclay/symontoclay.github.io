<h1 class='center-h'>Engine Concepts</h1>

<ContentsPlace/>

<h2 class='center-h' data-href='General_information'>
General information
</h2>

<LinkToContent/>

<p>
SymOntoClay is an experimental open source game AI engine.
</p>

<p>
SymOntoClay will be an asset for Unity3d.
It has not yet been implemented.
</p>

<p>
In SymOntoClay a game AI will be written using special SymOntoClay's domain-specific language (DSL).
The DSL is needed for more convenient integration various interesting AI features into the syntax.
It promises more speedy and convenient development game AI.
</p>

<h2 class='center-h' data-href='Common_concepts'>
Common concepts
</h2>

<LinkToContent/>

<p>
DSL level concepts are described here.
</p>

<h3 class='center-h' data-href='Common_concepts_World'>
World
</h3>

<LinkToContent/>

<p>
Contains general information for all objects in a game.
</p>

<p>
In the <b>world</b> it is possible to define <a href='/docs/spec.html#Fact_chapter'>facts</a> and <a href='/docs/spec.html#Logic_rule_chapter'>logical rules</a> that will be known to all <a href='#Common_concepts_NPC'>NPC</a> of the game.
</p>

<p>
Also, the name "<b>worldspace</b>" can be applied to <b>world</b>, as analogy with the concept "<b>workspace</b>".
</p>

<p>
Not active.
But it can define methods which are available to any <a href='#Common_concepts_NPC'>NPC</a> in a game.
</p>

<p>
There exists special <a href='/docs/spec.html#World_chapter'>syntax construction</a> for the root code entity of <b>world</b>.
</p>

<h3 class='center-h' data-href='Common_concepts_NPC'>
NPC
</h3>

<LinkToContent/>

<p>
It's abbreviation of <b>Non-Player Character</b>.
This is any game object that can react to the environment, so It is an active game object.
Mainly, it is a moving character, primarily It is a human.
</p>

<p>
NPC only knows Its own personal information and general information defined in <a href='#Common_concepts_World'>world</a>.
It helps us to prevent “cheating AI” on the engine level without writing any additional code on the <a href='/docs/spec.html'>DSL</a> level.
</p>

<p>
There exists special <a href='/docs/spec.html#NPC_chapter'>syntax construction</a> for the root code entity of <b>NPC</b>.
</p>

<h3 class='center-h' data-href='Common_concepts_Host'>
Host
</h3>

<LinkToContent/>

<p>
Allows to define information about any object in a game.
</p>

<p>
Not active.
But It can define methods which are available for calling from the <a href='#Common_concepts_NPC'>NPC</a> with which <b>host</b> is linked.
</p>

<p>
Some of the information is updated automatically, depending on the state of an <a href='#Common_concepts_NPC'>NPC</a> or <a href='#Implementation_Main_entities_GameObject'>game object</a> with which it is linked.
</p>

<p>
There exists special <a href='/docs/spec.html#Host_chapter'>syntax construction</a> for the root code entity of <b>host</b>.
</p>

<h2 class='center-h' data-href='Implementation'>
Implementation
</h2>

<LinkToContent/>

<p>
SymOntoClay is implemented on C#.
</p>

<p>
SymOntoClay is planned as an AI asset for Unity3D.
Now only implementation of engine core has been started.
And this asset has not been created yet.
</p>

<p>
SymOntoClay's core is separated from code to support integration with Unity3D.
It opens possibilities for integrating SymOntoClay with other platforms in the future.
</p>

<h3 class='center-h' data-href='Common_architecture'>
Common architecture
</h3>

<LinkToContent/>

<p>
SymOntoClay is created primarily for game development.
The first implementation is created for Unity3D.
But I hope we will able to use SymOntoClay in other cases.
</p>

<p>
SymOntoClay exists only for describing behaviour logic.
And It can not replace complex game engine like Unity3D.
</p>

<p>
The main components of SymOntoClay for integrating with Unity3D:
</p>

<figure class="figure">
  <img src="/docs/engine_concepts/common_architecture.png" class="img-fluid" alt="Common architecture diagram">
  <figcaption class="figure-caption">1 Common architecture diagram</figcaption>
</figure>

<h4 class='center-h' data-href='Native_platform'>
Native platform
</h4>

<LinkToContent/>

<p>
Native platform provides interaction with hardware, special required services and APIs.
Also it menages life time of instance of SymOntoClay.
</p>

<p>
Now there exists only one available native platform - Unity3D.
But I hope there will be many available platforms for SymOntoClay in the future.
My dream is availability SymOntoClay for Unreal engine and robots.
</p>

<h4 class='center-h' data-href='Common_bus'>
Common bus
</h4>

<LinkToContent/>

<p>
The common bus aggregates all entities in one cluster, provides interaction between them and caches of common components.
It provides simultaneity of NPC's actions and saves resources of computer. 
</p>

<p>
It may contain user's code on special language which describes common facts or another logic of the game or level.
</p>

<p>
One bus should be used for one game or one level of the game and It can menage many NPCs.
Menaged NPCs can interact with the information as if It is described into the NPCs.
</p>

<p>
Common bus is specified for concrete platform. 
</p>

<h4 class='center-h' data-href='Common_architecture_Host'>
Host
</h4>

<LinkToContent/>

<p>
Firstly Host provides facts or another logic specified for this NPC on the game or level.
So even inactive game entities have an own hosts to be perceived by active NPCs.
Player also can perceive this information by special UI means.
</p>

<p>
Secondly Host provides interaction between Logical engine of active NPC and Common bus. 
</p>

<p>
When NPC was died its host continues own existence as inactive game entity and can be perceived.
</p>

<p>
Host is specified for concrete platform. 
</p>

<h4 class='center-h' data-href='Logical_engine_of_active_NPC'>
Logical engine of active NPC
</h4>

<LinkToContent/>

<p>
It provides behavior of active NPC.
All process of NPC are executed here.
</p>

<p>
Logical engine of active NPC are independent of concrete platform.
</p>

<h4 class='center-h' data-href='Users_code'>
User's code
</h4>

<LinkToContent/>

<p>
It describes behavior of an active NPC and logical information of the NPC or game level by special programming language.
</p>

<p>
All files of the language are merged into SymOntoClay applications.
These applications can be attached to Logical engine of active NPC, Host or Common bus.
</p>

<p>
Special languages are created quite often.
Of course we need a good reason for creating a new programming language.
And I think this language will be able to implement helpful features directly and will help to create more complex game logic faster.
</p>

<p>
One more purpose of <a href='/docs/spec.html'>SymOntoClay DSL</a> is to separate game logic of NPS from other code.
In this case we can get more concentration on behaviour of NPC and divide it from other game code.
</p>

<p>
Also logic of NPC will become portable and can be realized on different platforms.
</p>

<p>
The special language will contain helpful constructions for more faster creating target features of a game.
</p>

<p>
You can read more about SymOntoClay DSL <a href='/docs/spec.html'>here</a>.
</p>

<h3 class='center-h' data-href='Implementation_Main_entities'>
Main entities on User's view
</h3>

<LinkToContent/>

<p>
User will meet this entities on Unity3D asset's level.
</p>

<h4 class='center-h' data-href='Implementation_Main_entities_World'>
World
</h4>

<LinkToContent/>

<p>
Represents a game world.
</p>

<p>
Responsibility:
</p>

<ol>
    <li>
	Provides communication between game objects controlled by SymOntoClay.</br>
	For example: interaction between <a href='#Implementation_Main_entities_NPC'>NPC</a> and <a href='#Implementation_Main_entities_GameObject'>GameObject</a>, NPC perception of the surrounding world, passing messages between <a href='#Implementation_Main_entities_NPC'>NPCs</a>.
	</li>
    <li>
	Contains information about game world. The information is common to all <a href='#Implementation_Main_entities_NPC'>NPCs</a>.
	</li>
    <li>
	Controls life cycle of <a href='#Implementation_Main_entities_NPC'>NPCs</a>.</br>
	For example: simultaneous initialization, start and stop. 
	</li>	
</ol>

<p>
In C# code, It is represented by the type <a href=''/>.
</p>

<p>

</p>

<complete_me/>

<h4 class='center-h' data-href='Implementation_Main_entities_NPC'>
NPC
</h4>

<LinkToContent/>

<p>

</p>

<complete_me/>

<p>
In C# code, It is represented by the type <a href=''/>.
</p>

<complete_me/>

<h4 class='center-h' data-href='Implementation_Main_entities_Player'>
Player
</h4>

<LinkToContent/>

<p>

</p>

<p>
Responsibility:
</p>

<ol>
    <li>
	</li>
    <li>
	</li>
    <li>
	</li>	
</ol>

<p>

</p>

<complete_me/>

<p>
In C# code, It is represented by the type <a href=''/>.
</p>

<complete_me/>

<h4 class='center-h' data-href='Implementation_Main_entities_GameObject'>
GameObject
</h4>

<LinkToContent/>

<p>

</p>

<complete_me/>

<p>
In C# code, It is represented by the type <a href='T:SymOntoClay.UnityAsset.Core.IGameObject'/>.
</p>

<complete_me/>

<h4 class='center-h' data-href='Implementation_Main_entities_Place'>
Place
</h4>

<LinkToContent/>

<p>

</p>

<complete_me/>

<p>
In C# code, It is represented by the type <a href=''/>.
</p>

<complete_me/>

<h3 class='center-h' data-href='Implementation_Images'>
Images
</h3>

<LinkToContent/>

<p>

</p>

<complete_me/>
