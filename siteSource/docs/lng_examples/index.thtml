<h1 class='center-h'>Code examples</h1>

<ContentsPlace/>

<h2 class='center-h' data-href="Hello_world">
Hello world!
</h2>

<LinkToContent/>

<code data-lng='soc' example-href='/docs/lng_examples/HelloWorld_Example1.zip'>
app PeaceKeeper
{
    on Init => 
	{
	     "Begin" >> @>log;

	      "End" >> @>log;
	}
}
</code>

<p>
<a href='/docs/spec.html#Init_Lifecycle_trigger_chapter'>Init life cycle trigger</a> is executed. <a href='/docs/spec.html#String_literal_chapter'>Strings</a> are wrritten into <a href='/docs/spec.html#Log_system_channel_chapter'>log channel</a>.
</p>

<console>
Begin
End
</console>

<h2 class='center-h' data-href="Comments">
Comments
</h2>

<LinkToContent/>

<h3 class='center-h' data-href='Single_line_comment'>
Single line comment
</h3>

<LinkToContent/>

<p>
Read more about Single line comment <a href='/docs/spec.html#Comments_chapter'>here</a>.
</p>

<code data-lng='soc' example-href='/docs/lng_examples/SingleLineComment.zip'>
app PeaceKeeper
{
    on Init => 
	{
	     "Begin" >> @>log;

		 //@r = @b = 1;
		 @bx >> @>log;

		 "End" >> @>log;
	}
}
</code>

<console>
Begin
NULL
End
</console>

<h3 class='center-h' data-href='Multi_line_comment'>
Multi line comment
</h3>

<LinkToContent/>

<p>
Read more about Multi line comment <a href='/docs/spec.html#Comments_chapter'>here</a>.
</p>

<code data-lng='soc' example-href='/docs/lng_examples/MultiLineComment.zip'>
app PeaceKeeper
{
    on Init => 
	{
	     "Begin" >> @>log;

		 /*@r = @b = 1;
		 @bx >> @>log;*/

		 "End" >> @>log;
	}
}
</code>

<console>
Begin
End
</console>

<h2 class='center-h' data-href='NULL'>
NULL
</h2>

<p>
Read more about <b>NULL</b> <a href='/docs/spec.html#NULL_literal_chapter'>here</a>.
</p>

<code data-lng='soc' example-href='/docs/lng_examples/NullExample.zip'>
app Example
{
    on Init =>
    {
	    'Begin' >> @>log;
		@x = NULL;
		@x >> @>log;
		'End' >> @>log;
    }
}
</code>

<console>
Begin
NULL
End
</console>

<h2 class='center-h' data-href="Variables">
Variables
</h2>

<LinkToContent/>

<p>
Read more about Variables <a href='/docs/spec.html#Variable_chapter'>here</a>.
</p>

<h3 class='center-h' data-href='Variables_Example_1'>
Example 1
</h3>

<LinkToContent/>

<p>
Here 1 is alternately assigned to variables <b>@r</b> and <b>@b</b>.
So the variable <b>@b</b> will contain 1.
</p>

<code data-lng='soc' example-href='/docs/lng_examples/Variables_Example1.zip'>
app PeaceKeeper
{
    on Init => 
	{
	    "Begin" >> @>log;

		@r = @b = 1;
		@b >> @>log;

		"End" >> @>log;
	}
}
</code>

<console>
Begin
1
End
</console>

<h3 class='center-h' data-href='Variables_Example_2'>
Example 2
</h3>

<LinkToContent/>

<p>
A variable <b>@bx</b> has never been being assigned. So It contains default value <b>NULL</b>.
</p>

<code data-lng='soc' example-href='/docs/lng_examples/Variables_Example2.zip'>
app PeaceKeeper
{
    on Init => 
	{
	     "Begin" >> @>log;

		 @r = @b = 1;
		 @bx >> @>log;

		 "End" >> @>log;
	}
}
</code>

<console>
Begin
NULL
End
</console>

<h2 class='center-h' data-href='Linguistic_variable'>
Linguistic variable
</h2>

<LinkToContent/>

<p>
Read more about Linguistic variable <a href='/docs/spec.html#Linguistic_variable_chapter'>here</a>.
</p>

<h3 class='center-h' data-href='Linguistic_variable_Full_declaration'>
Full declaration
</h3>

<LinkToContent/>

<code data-lng='soc' example-href='/docs/lng_examples/LinguisticVariableFullDeclaration1.zip'>
linvar age for range (0, 150]
{
    constraints:
	    for inheritance;
	    for relation age;

    terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<code data-lng='soc' example-href='/docs/lng_examples/LinguisticVariableFullDeclaration2.zip'>
linvar logic for range [0, 1]
{
    constraints:
	    for inheritance;

	terms:
		minimal = L(0, 0.1);
		low = Trapezoid(0, 0.05, 0.3, 0.45);
		middle = Trapezoid(0.3, 0.4, 0.6, 0.7);
		high = Trapezoid(0.55, 0.7, 0.95, 1);
		maximal = S(0.9, 1);
}
</code>

<h3 class='center-h' data-href='Linguistic_variable_Minimal_declaration'>
Minimal declaration
</h3>

<LinkToContent/>

<code data-lng='soc' example-href='/docs/lng_examples/LinguisticVariableMinimalDeclaration1.zip'>
linvar age
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<code data-lng='soc' example-href='/docs/lng_examples/LinguisticVariableMinimalDeclaration2.zip'>
linvar age
{
    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<h3 class='center-h' data-href='Linguistic_variable_With_Ranges'>
With ranges
</h3>

<LinkToContent/>

<code data-lng='soc' example-href='/docs/lng_examples/LinguisticVariableWithRange1.zip'>
linvar age for range (-∞, +∞)
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<p>
This range is also from negative infinity to positive infinity:
</p>

<code data-lng='soc' example-href='/docs/lng_examples/LinguisticVariableWithRange2.zip'>
linvar age for range (*, *)
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<p>
This range is open.
</p>

<code data-lng='soc' example-href='/docs/lng_examples/LinguisticVariableWithRange3.zip'>
linvar age for range (0, 150)
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<p>
This range is closed.
</p>

<code data-lng='soc' example-href='/docs/lng_examples/LinguisticVariableWithRange4.zip'>
linvar age for range [0, 150]
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<p>
This range is left-open and right-closed.
</p>

<code data-lng='soc' example-href='/docs/lng_examples/LinguisticVariableWithRange5.zip'>
linvar age for range (0, 150]
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<p>
This range is left-closed and right-open.
</p>

<code data-lng='soc' example-href='/docs/lng_examples/LinguisticVariableWithRange6.zip'>
linvar age for range [0, 150)
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<h3 class='center-h' data-href='Linguistic_variable_With_constraints'>
With constraints
</h3>

<LinkToContent/>

<code data-lng='soc' example-href='/docs/lng_examples/LinguisticVariableWithConstraints1.zip'>
linvar age
{
    constraints:
	    for inheritance;
	    for relation age;

    terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<code data-lng='soc' example-href='/docs/lng_examples/LinguisticVariableWithConstraints2.zip'>
linvar age
{
    constraints:
        for inh;
        for rel age;

    terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<code data-lng='soc' example-href='/docs/lng_examples/LinguisticVariableWithConstraints3.zip'>
linvar age for range (0, 150]
{
    constraints:
	    for relation age;

	terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<code data-lng='soc' example-href='/docs/lng_examples/LinguisticVariableWithConstraints4.zip'>
linvar age for range (0, 150]
{
    constraints:
        for rel age;

    terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<code data-lng='soc' example-href='/docs/lng_examples/LinguisticVariableWithConstraints5.zip'>
linvar age for range (0, 150]
{
    constraints:
	    for inheritance;

	terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<code data-lng='soc' example-href='/docs/lng_examples/LinguisticVariableWithConstraints6.zip'>
linvar age for range (0, 150]
{
    constraints:
        for inh;

    terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<h3 class='center-h' data-href='Linguistic_variable_Predefined_membership_functions'>
Predefined membership functions
</h3>

<LinkToContent/>

<h4 class='center-h' data-href='Linguistic_variable_Predefined_membership_function_L_Function'>
L Function
</h4>

<LinkToContent/>

<code data-lng='soc' example-href='/docs/lng_examples/LinguisticVariablePredefinedMembershipFunctionLFunction1.zip'>
linvar age for range (0, 150]
{
	`teenager` = L(5, 10);
}
</code>

<h4 class='center-h' data-href='Linguistic_variable_Predefined_membership_function_Trapezoid_Function'>
Trapezoid Function
</h4>

<LinkToContent/>

<code data-lng='soc' example-href='/docs/lng_examples/LinguisticVariablePredefinedMembershipFunctionTrapezoidFunction1.zip'>
linvar age for range (0, 150]
{
    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<h4 class='center-h' data-href='Linguistic_variable_Predefined_membership_function_S_Function'>
S Function
</h4>

<LinkToContent/>

<code data-lng='soc' example-href='/docs/lng_examples/LinguisticVariablePredefinedMembershipFunctionSFunction1.zip'>
linvar age for range (0, 150]
{
    `teenager` = S(12, 17, 22);
}
</code>

<code data-lng='soc' example-href='/docs/lng_examples/LinguisticVariablePredefinedMembershipFunctionSFunction2.zip'>
linvar age for range (0, 150]
{
    `teenager` = S(12, 22);
}
</code>

<h2 class='center-h' data-href="Inheritance">
Inheritance
</h2>

<LinkToContent/>

<p>
Here It is example of changin relationship run time using operator <a href='/docs/spec.html#IsOp_chapter'>"is"</a> and statement <a href='/docs/spec.html#SetIsStatement_chapter'>"set is"</a>.
</p>

<p>
Read more <a href='/docs/spec.html#Inheritance_chapter'>here</a> about inheritance in SymOntoClay DSL.
</p>

<code data-lng='soc' example-href='/docs/lng_examples/InheritanceExample1.zip'>
app PeaceKeeper is [0.5] exampleClass
{
    on Init => 
	{
	     "Begin" >> @>log;

		 exampleClass is human >> @>log;

		 exampleClass is not human >> @>log;

		 set exampleClass is [0.5] human;

		 exampleClass is human >> @>log;

		 exampleClass is not human >> @>log;

		 set exampleClass is not human;

		 exampleClass is human >> @>log;

		 exampleClass is not human >> @>log;

		 set @@self is linux;

		 @@self is linux >> @>log;

		 "End" >> @>log;
	}
}
</code>

<console>
Begin
0
1
0.5
0.5
0
1
1
End
</console>

<p>
Using non-numeric fuzzy value:
</p>

<code data-lng='soc' example-href='/docs/lng_examples/InheritanceExample2.zip'>
linvar logic for range [0, 1]
{
    constraints:
	    for inheritance;

	terms:
		minimal = L(0, 0.1);
		low = Trapezoid(0, 0.05, 0.3, 0.45);
		middle = Trapezoid(0.3, 0.4, 0.6, 0.7);
		high = Trapezoid(0.55, 0.7, 0.95, 1);
		maximal = S(0.9, 1);
}

app PeaceKeeper is [middle] exampleClass
{
    on Init =>
    {
        'Begin' >> @>log;
        exampleClass is human >> @>log;
        exampleClass is not human >> @>log;
        set exampleClass is [middle] human;
        exampleClass is human >> @>log;
        exampleClass is not human >> @>log;
        set exampleClass is not human;
        exampleClass is human >> @>log;
        exampleClass is not human >> @>log;
        set @@self is linux;
        @@self is linux >> @>log;
        'End' >> @>log;
    }
}
</code>

<console>
Begin
0
1
0.5
0.5
0
1
1
End
</console>

<code data-lng='soc' example-href='/docs/lng_examples/InheritanceExample3.zip'>
linvar logic for range [0, 1]
{
    constraints:
	    for inheritance;

	terms:
		minimal = L(0, 0.1);
		low = Trapezoid(0, 0.05, 0.3, 0.45);
		middle = Trapezoid(0.3, 0.4, 0.6, 0.7);
		high = Trapezoid(0.55, 0.7, 0.95, 1);
		maximal = S(0.9, 1);
}

app PeaceKeeper is [very middle] exampleClass
{
    on Init =>
    {
        'Begin' >> @>log;
        exampleClass is human >> @>log;
        exampleClass is not human >> @>log;
        set exampleClass is [very middle] human;
        exampleClass is human >> @>log;
        exampleClass is not human >> @>log;
        set exampleClass is not human;
        exampleClass is human >> @>log;
        exampleClass is not human >> @>log;
        set @@self is linux;
        @@self is linux >> @>log;
        'End' >> @>log;
    }
}
</code>

<console>
Begin
0
1
0.5
0.5
0
1
1
End
</console>

<h2 class='center-h' data-href='MemberAccessModifiers'>
Member access modifiers
</h2>

<LinkToContent/>

<p>
Read more about Member access modifiers <a href='/docs/spec.html#MemberAccessModifiers_chapter'>here</a>.
</p>

<complete_me/>

<h2 class='center-h' data-href='Function'>
Function and Method
</h2>

<LinkToContent/>

<p>
Read more about Function <a href='/docs/spec.html#Function_chapter'>here</a>.
</p>

<p>
Read more about Method <a href='/docs/spec.html#Method_chapter'>here</a>.
</p>

<code data-lng='soc' example-href='/docs/lng_examples/FuncExample_1.zip'>
app PeaceKeeper
{
    fun a() => 
    {
        '`a` has been called!' >> @>log;
    }

    on Init =>
    {
        'Begin' >> @>log;
        a();
        'End' >> @>log;
    }
}
</code>
 
<console>
Begin
`a` has been called!
End
</console>

<code data-lng='soc' example-href='/docs/lng_examples/FuncExample_1_a.zip'>
app PeaceKeeper
{
    fun a()
    {
        '`a` has been called!' >> @>log;
    }

    on Init =>
    {
        'Begin' >> @>log;
        a();
        'End' >> @>log;
    }
}
</code>

<console>
Begin
`a` has been called!
End
</console>

<code data-lng='soc' example-href='/docs/lng_examples/FuncExample_2.zip'>
app PeaceKeeper
{
    fun a(@param_1)
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;
    }

    on Init =>
    {
        'Begin' >> @>log;
        a(1);
        'End' >> @>log;
    }
}
</code>

<console>
Begin
`a` has been called!
1
End
</console>

<code data-lng='soc' example-href='/docs/lng_examples/FuncExample_2_a.zip'>
fun a(@param_1)
{
    '`a` (any) has been called!' >> @>log;
    @param_1 >> @>log;
}

app PeaceKeeper
{
    on Init =>
    {
        'Begin' >> @>log;
        a(param_1: 1);
        'End' >> @>log;
    }
}
</code>
 
<console>
Begin
`a` (any) has been called!
1
End
</console>

<code data-lng='soc' example-href='/docs/lng_examples/FuncExample_3.zip'>
app PeaceKeeper
{
    fun a(@param_1)
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;
    }

    on Init =>
    {
        'Begin' >> @>log;
        a(@param_1: 1);
        'End' >> @>log;
    }
}
</code>
 
<console>
Begin
`a` has been called!
1
End
</console>

<code data-lng='soc' example-href='/docs/lng_examples/FuncExample_4.zip'>
app PeaceKeeper
{
    fun a(@param_1)
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;
    }

    on Init =>
    {
        'Begin' >> @>log;
        a(param_1: 1);
        'End' >> @>log;
    }
}
</code>
 
<console>
Begin
`a` has been called!
1
End
</console>

<code data-lng='soc' example-href='/docs/lng_examples/FuncExample_5.zip'>
app PeaceKeeper
{
    fun a(@param_1)
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;
    }

    on Init =>
    {
        'Begin' >> @>log;
        @param_1 = 12;

        a(@param_1);
        'End' >> @>log;
    }
}
</code>

<console>
Begin
`a` has been called!
12
End
</console>

<code data-lng='soc' example-href='/docs/lng_examples/FuncExample_6.zip'>
app PeaceKeeper
{
    fun a(@param_1)
    {
        '`a` (1) has been called!' >> @>log;
        @param_1 >> @>log;
    }

    fun a(@param_1, @param_2)
    {
        '`a` (2) has been called!' >> @>log;
        @param_1 >> @>log;
        @param_2 >> @>log;
    }

    on Init =>
    {
        'Begin' >> @>log;
        @param_1 = 12;

        a(@param_1);
        'End' >> @>log;
    }
}
</code>
 
<console>
Begin
`a` (1) has been called!
12
End
</console>

<code data-lng='soc' example-href='/docs/lng_examples/FuncExample_7.zip'>
app PeaceKeeper
{
    fun a(@param_1)
    {
        '`a` (1) has been called!' >> @>log;
        @param_1 >> @>log;
    }

    fun a(@param_1, @param_2)
    {
        '`a` (2) has been called!' >> @>log;
        @param_1 >> @>log;
        @param_2 >> @>log;
    }

    on Init =>
    {
        'Begin' >> @>log;
        @param_1 = 12;

        a(@param_1);
        a(3, 'Hi');
        'End' >> @>log;
    }
}
</code>
 
<console>
Begin
`a` (1) has been called!
12
`a` (2) has been called!
3
Hi
End
</console>

<code data-lng='soc' example-href='/docs/lng_examples/FuncExample_8.zip'>
app PeaceKeeper
{
    fun a(@param_1, @param_2 = 15)
    {
        '`a` (2) has been called!' >> @>log;
        @param_1 >> @>log;
        @param_2 >> @>log;
    }

    on Init =>
    {
        'Begin' >> @>log;
        @param_1 = 12;

        a(@param_1);
        'End' >> @>log;
    }
}
</code>
 
<console>
Begin
`a` (2) has been called!
12
15
End
</console>

<code data-lng='soc' example-href='/docs/lng_examples/FuncExample_9.zip'>
app PeaceKeeper
{
    fun a(@param_1)
    {
        '`a` (any) has been called!' >> @>log;
    }

    fun a(@param_1: string)
    {
        '`a` (string) has been called!' >> @>log;
    }

    fun a(@param_1: number)
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;
    }

    on Init =>
    {
        'Begin' >> @>log;
        a(param_1: 1);
        'End' >> @>log;
    }
}
</code>
 
<console>
Begin
`a` has been called!
1
End
</console>

<code data-lng='soc' example-href='/docs/lng_examples/FuncExample_10_a.zip'>
app PeaceKeeper
{
    fun a(@param_1)
    {
        '`a` (any) has been called!' >> @>log;
        @param_1 >> @>log;
    }

    fun a(@param_1: (number | string))
    {
        '`a` (number | string) has been called!' >> @>log;
        @param_1 >> @>log;
    }

    on Init =>
    {
        'Begin' >> @>log;
        a(param_1: 1);
        a(param_1: 'Hi');
        'End' >> @>log;
    }
}
</code>

<console>
Begin
`a` (number | string) has been called!
1
`a` (number | string) has been called!
Hi
End
</console>

<code data-lng='soc' example-href='/docs/lng_examples/FuncExample_10_b.zip'>
app PeaceKeeper
{
    fun a(@param_1)
    {
        '`a` (any) has been called!' >> @>log;
        @param_1 >> @>log;
    }

    fun a(@param_1: number | string)
    {
        '`a` (number | string) has been called!' >> @>log;
        @param_1 >> @>log;
    }

    on Init =>
    {
        'Begin' >> @>log;
        a(param_1: 1);
        a(param_1: 'Hi');
        'End' >> @>log;
    }
}
</code>
 
<console>
Begin
`a` (number | string) has been called!
1
`a` (number | string) has been called!
Hi
End
</console>

<h2 class='center-h' data-href='Action'>
Action
</h2>

<LinkToContent/>

<p>
Read more <a href='/docs/spec.html#Action_chapter'>here</a> about Action.
</p>

<p>
Read more <a href='/docs/spec.html#Function_call_overloading_chapter'>here</a> about Function call overloading.
</p>

<p>
Read more <a href='/docs/spec.html#CompleteActionStatement_chapter'>here</a> about "complete action" statement.
</p>

<p>
Read more <a href='/docs/spec.html#BreakActionStatement_chapter'>here</a> about "break action" statement.
</p>

<code data-lng='soc' example-href='/docs/lng_examples/ActionExample_1.zip'>
app PeaceKeeper
{
    on Init =>
    {
        'Begin' >> @>log;
 
        Go();

        'End' >> @>log;
    }
}

action Go 
{
    on Init =>
    {
        'Init Go' >> @>log;
    }

    op () => 
    {
        'Begin Go' >> @>log;
        'End Go' >> @>log;
    }

    on {: see(I, $x) :} ($x >> @x) => 
    {
        'on Fired' >> @>log;
        @x >> @>log;
        complete action;
    }
}
</code>

<console>
Begin
Begin Go
End Go
End
</console>

<h2 class='center-h' data-href="Calling_host_method">
Calling host method
</h2>

<LinkToContent/>

<p>
Read more <a href='/docs/engine_concepts/index.html#Common_concepts_Host'>host</a> about <b>Host</b>.
</p>

<p>
Read more <a href='/docs/spec.html#CallOp_chapter'>here</a> about calling methods.
</p>

<h3 class='center-h' data-href='Calling_host_method_Synchronous'>
Synchronous
</h3>

<LinkToContent/>

<code data-lng='soc' example-href='/docs/lng_examples/CallingHostMethodSynchronousExample1.zip'>
app PeaceKeeper is [0.5] exampleClass
{
    on Init => 
	{
	    "Begin" >> @>log;

        @@host.`go`(to: #@[25, 30]);

	    "End" >> @>log;
	}
}
</code>

<console>
Begin
End
</console>

<h3 class='center-h' data-href='Calling_host_method_Asynchronous'>
Asynchronous
</h3>

<LinkToContent/>

<code data-lng='soc' example-href='/docs/lng_examples/CallingHostMethodAsynchronousExample1.zip'>
app PeaceKeeper is [0.5] exampleClass
{
    on Init => 
	{
	    "Begin" >> @>log;

        @@host.`go`~(to: #@[25, 30]);

	    "End" >> @>log;
	}
}
</code>

<console>
Begin
End
</console>

<h2 class='center-h' data-href="Logic_queries">
Logic queries
</h2>

<LinkToContent/>

<h3 class='center-h' data-href='Logic_queries_Example_1'>
Example 1
</h3>

<LinkToContent/>

<p>
Read more about operator "select" <a href='/docs/spec.html#SelectOp_chapter'>here</a>.
</p>

<p>
Read more about facts <a href='/docs/spec.html#Fact_chapter'>here</a>.
</p>

<p>
Read more about logic rule <a href='/docs/spec.html#Logic_rule_chapter'>here</a>.
</p>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample_1_a.zip'>
class exampleClass is human, [0.1] animal
{
	{: male(#Tom) :}
	{: parent(#Piter, #Tom) :}
	{: {son($x, $y)} -> { male($x) & parent($y, $x)} :}
	{: { love($x, $y) } -> { help($x, $y) } :}
}

app PeaceKeeper is [0.5] exampleClass
{
    on Init => 
	{
	     "Begin" >> @>log;

		 select {: son($x, $y) :} >> @>log;

		 "End" >> @>log;
	}
}
</code>

<p>
The result of this query:
</p>

<console>
Begin
&lt;yes&gt;
$y = #piter; $x = #tom

End
</console>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample_1_b.zip'>
app PeaceKeeper is [0.5] exampleClass
{
    on Init => 
	{
	     "Begin" >> @>log;

		 ? {: son($x, $y) :} >> @>log;

		 "End" >> @>log;
	}
}
</code>

<p>
The result of this query:
</p>

<console>
Begin
&lt;yes&gt;
$y = #piter; $x = #tom

End
</console>

<h3 class='center-h' data-href='Logic_queries_Example_2'>
Example 2
</h3>

<LinkToContent/>

<p>
Read more about operator "select" <a href='/docs/spec.html#SelectOp_chapter'>here</a>.
</p>

<p>
Read more about facts <a href='/docs/spec.html#Fact_chapter'>here</a>.
</p>

<p>
Read more about logic rule <a href='/docs/spec.html#Logic_rule_chapter'>here</a>.
</p>

<p>
Using inheritance in logic searching.
</p>

<p>
Read more <a href='/docs/spec.html#Inheritance_chapter'>here</a> about inheritance in SymOntoClay DSL.
</p>

<p>
For set of facts:
</p>

<code data-lng='soc'>
{: can(bird, fly) :}
{: bird(#Alisa_12) :}
</code>

<p>
The query:
</p>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample_2_a.zip'>
{: can(#Alisa_12, $x) :}
</code>

<p>
returns:
</p>

<console>
&lt;yes&gt;
$x = fly
</console>

<p>
The query:
</p>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample_2_b.zip'>
{: can(#Alisa_12, fly) :}
</code>

<p>
returns:
</p>

<console>
&lt;yes&gt;
</console>

<p>
The query:
</p>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample_2_c.zip'>
{: $z(#Alisa_12, $x) :}
</code>

<p>
returns:
</p>

<console>
&lt;yes&gt;
$z = can(bird,fly); $x = fly
</console>

<p>
The relationship beween concepts '<b>#Alisa_12</b>' and '<b>fly</b>' is set by inheritance, not by direct fact or rule.
</p>

<h3 class='center-h' data-href='Logic_queries_Example_3'>
Example 3
</h3>

<LinkToContent/>

<p>
Inserts fact <b>{: >: { bird (#1234) } :}</p> into main storage of current <a href='/docs/engine_concepts/index.html#Common_concepts_NPC'>NPC</a> and returns inserted fact into expression's stack.
The fact is not displayed here.
</p>

<p>
Read more about operator "insert" <a href='/docs/spec.html#InsertOp_chapter'>here</a>.
</p>

<p>
Read more about facts <a href='/docs/spec.html#Fact_chapter'>here</a>.
</p>

<p>
Read more about logic rule <a href='/docs/spec.html#Logic_rule_chapter'>here</a>.
</p>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample_3.zip'>
app PeaceKeeper is [0.5] exampleClass
{
    on Init => 
	{
	     "Begin" >> @>log;		 

		 insert {: >: { bird (#1234) } :};

		 "End" >> @>log;
	}
}
</code>

<console>
Begin
End
</console>

<h3 class='center-h' data-href='Logic_queries_Example_4'>
Example 4
</h3>

<LinkToContent/>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample4_a.zip'>
app PeaceKeeper
{
    {: animal(cat) :}

    on Init =>
    {
        select {: { cat is animal } :} >> @>log;
    }
}
</code>

<console>
&lt;yes&gt;
</console>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample4_b.zip'>
app PeaceKeeper
{
    {: animal(cat) :}

    on Init =>
    {
        select {: cat is animal :} >> @>log;
    }
}
</code>

<console>
&lt;yes&gt;
</console>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample4_c.zip'>
app PeaceKeeper
{
    {: animal(cat) :}

    on Init =>
    {
        select {: >: { cat is animal } :} >> @>log;
    }
}
</code>

<console>
&lt;yes&gt;
</console>

<h3 class='center-h' data-href='Logic_queries_Example_5'>
Example 5
</h3>

<LinkToContent/>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample5_a.zip'>
linvar age for range (0, 150]
{
	constraints:
		for relation age;

	terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}

app PeaceKeeper
{
    {: age(#Tom, 15) :}

    on Init =>
    {
        select {: age(#Tom, `teenager`) :} >> @>log;
    }
}
</code>

<console>
&lt;yes&gt;
</console>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample5_b.zip'>
linvar age for range (0, 150]
{
	constraints:
		for relation age;

	terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}

app PeaceKeeper
{
    {: age(#Tom, 12) :}

    on Init =>
    {
        select {: age(#Tom, very `teenager`) :} >> @>log;
    }
}
</code>

<console>
&lt;yes&gt;
</console>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample5_c.zip'>
linvar age for range (0, 150]
{
	constraints:
		for relation age;

	terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}

app PeaceKeeper
{
    {: age(#Tom, 12) :}

    on Init =>
    {
        select {: age(#Tom, very teenager) :} >> @>log;
    }
}
</code>

<console>
&lt;yes&gt;
</console>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample5_d.zip'>
linvar age for range (0, 150]
{
	constraints:
		for relation age;

	terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}

app PeaceKeeper
{
    {: age(#Tom, 12) :}

    on Init =>
    {
        select {: age(#Tom, `very` `teenager`) :} >> @>log;
    }
}
</code>

<console>
&lt;yes&gt;
</console>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample5_e.zip'>
linvar age for range (0, 150]
{
	constraints:
		for relation age;

	terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}

app PeaceKeeper
{
    {: age(#Tom, very `teenager`) :}

    on Init =>
    {
        select {: age(#Tom, 12) :} >> @>log;
    }
}
</code>

<console>
&lt;yes&gt;
</console>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample5_f.zip'>
linvar age for range (0, 150]
{
	constraints:
		for relation age;

	terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}

app PeaceKeeper
{
    {: age(#Tom, `teenager`) :}

    on Init =>
    {
        select {: age(#Tom, 12) :} >> @>log;
    }
}
</code>

<console>
&lt;yes&gt;
</console>

<h3 class='center-h' data-href='Logic_queries_Example_6'>
Example 6
</h3>

<LinkToContent/>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample6.zip'>
app PeaceKeeper
{
    {: >: {distance($x, $y)} -> { distance(I, $x, $y) } :}
    {: age(#Tom, 50) :}
    {: distance(I, #Tom, 12) :}

    on Init =>
    {
        select {: age(#Tom, $x) & distance(#Tom, $y) & $x is not $y :} >> @>log;
    }
}
</code>

<console>
&lt;yes&gt;
$y = 12; $x = 50
</console>

<h3 class='center-h' data-href='Logic_queries_Example_7'>
Example 7
</h3>

<LinkToContent/>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample7.zip'>
app PeaceKeeper
{
    {: >: {distance($x, $y)} -> { distance(I, $x, $y) } :}
    {: distance(I, #Tom, 12) :}

    on Init =>
    {
        select {: distance(#Tom, $x) & $x is 12 :} >> @>log;
    }
}
</code>

<console>
&lt;yes&gt;
$x = 12
</console>

<h3 class='center-h' data-href='Logic_queries_Example_8'>
Example 8
</h3>

<LinkToContent/>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample8_a.zip'>
app PeaceKeeper
{
    {: >: {distance($x, $y)} -> { distance(I, $x, $y) } :}
    {: distance(I, #Tom, 50) :}

    on Init =>
    {
        select {: distance(#Tom, $x) & $x > 5 :} >> @>log;
    }
}
</code>

<console>
&lt;yes&gt;
$x = 50
</console>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample8_b.zip'>
linvar age for range (0, 150]
{
	constraints:
		for relation age;

	terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}

app PeaceKeeper
{
    {: age(#Tom, 50) :}

    on Init =>
    {
        select {: age(#Tom, $x) & $x > `teenager` :} >> @>log;
    }
}
</code>

<console>
&lt;yes&gt;
$x = 50
</console>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample8_c.zip'>
linvar age for range (0, 150]
{
	constraints:
		for relation age;

	terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}

app PeaceKeeper
{
    {: age(#Tom, 50) :}

    on Init =>
    {
        select {: age(#Tom, $x) & $x > very `teenager` :} >> @>log;
    }
}
</code>

<console>
&lt;yes&gt;
$x = 50
</console>

<h3 class='center-h' data-href='Logic_queries_Example_9'>
Example 9
</h3>

<LinkToContent/>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample9.zip'>
app PeaceKeeper
{
    {: >: {distance($x, $y)} -> { distance(I, $x, $y) } :}
    {: distance(I, #Tom, 50) :}

    on Init =>
    {
        select {: distance(#Tom, $x) & $x >= 5 :} >> @>log;
    }
}
</code>

<console>
&lt;yes&gt;
$x = 50
</console>

<h3 class='center-h' data-href='Logic_queries_Example_10'>
Example 10
</h3>

<LinkToContent/>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample10.zip'>
app PeaceKeeper
{
    {: >: {distance($x, $y)} -> { distance(I, $x, $y) } :}
    {: distance(I, #Tom, 4) :}

    on Init =>
    {
        select {: distance(#Tom, $x) & $x < 5 :} >> @>log;
    }
}
</code>

<console>
&lt;yes&gt;
$x = 4
</console>

<h3 class='center-h' data-href='Logic_queries_Example_11'>
Example 11
</h3>

<LinkToContent/>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample11.zip'>
app PeaceKeeper
{
    {: >: {distance($x, $y)} -> { distance(I, $x, $y) } :}
    {: distance(I, #Tom, 5) :}

    on Init =>
    {
        select {: distance(#Tom, $x) & $x <= 5 :} >> @>log;
    }
}
</code>

<console>
&lt;yes&gt;
$x = 5
</console>

<h3 class='center-h' data-href='Logic_queries_Example_12'>
Example 12
</h3>

<LinkToContent/>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample12.zip'>
app PeaceKeeper
{
    {: barrel(#a) :}
    {: see(I, #a) :}

    on Init =>
    {
        select {: see(I, $x) & barrel($x) & !focus(I, friend) :} >> @>log;
    }
}
</code>

<console>
&lt;yes&gt;
$x = #a
</console>

<h2 class='center-h' data-href='ImperativeLogicOperators'>
Imperative logic operators
</h2>

<LinkToContent/>

<complete_me/>

<h2 class='center-h' data-href='ArithmeticOperators'>
Arithmetic operators
</h2>

<LinkToContent/>

<complete_me/>

<h2 class='center-h' data-href='Logic_сonditional_triggers'>
Logic сonditional triggers
</h2>

<LinkToContent/>

<p>
In this example trigger fires and writes "Logic condition fired!!!!" after insert fact.
</p>

<p>
In Unity scene facts are provided by perception channels.
</p>

<p>
Read more about Logic сonditional triggers <a href='/docs/spec.html#Logic_conditional_triggers_chapter'>here</a>.
</p>

<code data-lng='soc' example-href='/docs/lng_examples/LogicConditional_Trigger_Example_1.zip'>
app MyNPC
{
    {: barrel(#`Barel 1`) :}

    on Init =>
    {
	    "Begin" >> @>log;
		
		insert {: see(I, #`Barel 1`) :};
		
	    "End" >> @>log;
    }
	
	on {: see(I, barrel) :} => 
	{
	    "Logic condition fired!!!!" >> @>log;
	}
}
</code>

<console>
Begin
End
Logic condition fired!!!!
</console>

<p>
This trigger binds captured in logic variable value with imperative variable.
</p>

<p>
Read more about binding variables <a href='/docs/spec.html#Logic_сonditional_triggers_Binding_variables_chapter'>here</a>.
</p>

<code data-lng='soc' example-href='/docs/lng_examples/LogicConditional_Trigger_Example_2.zip'>
app PeaceKeeper
{
    {: barrel(#a) :}
    {: see(I, #a) :}

    on {: see(I, $x) & barrel($x) & !focus(I, friend) :} ($x >> @x) => 
    {
	    @x >> @>log;
    }
}
</code>

<console>
#a
</console>

<h2 class='center-h' data-href='Error_handling'>
Error handling
</h2>

<LinkToContent/>

<p>
Read more about error handling <a href='/docs/spec.html#Error_handling_chapter'>here</a>.
</p>

<code data-lng='soc' example-href='/docs/lng_examples/ErrorProcessingExample_1.zip'>
app PeaceKeeper
{
    fun a(@param_1) =>
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;

        error {: see(I, #a) :};

        'End of `a`' >> @>log;
    }

    on Init =>
    {
        try
        {
            'Begin' >> @>log;
            a(param_1: 1);
            'End' >> @>log;        
        }
        catch
        {
            'catch' >> @>log;
        }
        catch(@e)
        {
            'catch(@e)' >> @>log;
            @e >> @>log;
        }
        catch(@e) where {: hit(enemy, I) :}
        {
            'catch(@e) where {: hit(enemy, I) :}' >> @>log;
        }
        catch(@e) where {: see(I, $x) :}
        {
            'catch(@e) where {: see(I, $x) :}' >> @>log;
            @e >> @>log;
        }
        else
        {
            'else' >> @>log;
        }
        ensure
        {
            'ensure' >> @>log;
        }

        'End of `Init`' >> @>log;
    }
}
</code>
 
<console>
Begin
`a` has been called!
1
catch(@e) where {: see(I, $x) :}
ERROR: {: #ffe7cbb0-7db0-439b-81f4-0d036b8410e8 &gt;: { see(i,#a) } :}
ensure
End of `Init`
</console>

<code data-lng='soc' example-href='/docs/lng_examples/ErrorProcessingExample_2.zip'>
app PeaceKeeper
{
    fun a(@param_1) =>
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;

        error {: see(I, #a) :};

        'End of `a`' >> @>log;
    }

    on Init =>
    {
        try
        {
            'Begin' >> @>log;
            a(param_1: 1);
            'End' >> @>log;        
        }
        catch
        {
            'catch' >> @>log;
        }
        catch(@e)
        {
            'catch(@e)' >> @>log;
            @e >> @>log;
        }
        catch(@e) where {: hit(enemy, I) :}
        {
            'catch(@e) where {: hit(enemy, I) :}' >> @>log;
        }
        catch(@e) where {: see(I, $x) :}
        {
            'catch(@e) where {: see(I, $x) :}' >> @>log;
            @e >> @>log;
        }
        else
        {
            'else' >> @>log;
        }
        ensure
        {
            'ensure' >> @>log;
        }

        'End of `Init`' >> @>log;
    }

    on {: see(I, $x) :} ($x >> @x) => 
    {
        'on Fired' >> @>log;
        @x >> @>log;
    }
}
</code>
 
<console>
Begin
`a` has been called!
1
catch(@e) where {: see(I, $x) :}
ERROR: {: #a7fe49fa-2dbe-4192-94fc-390d444c428b &gt;: { see(i,#a) } :}
on Fired
ensure
#a
End of `Init`
</console>

<code data-lng='soc' example-href='/docs/lng_examples/ErrorProcessingExample_3.zip'>
app PeaceKeeper
{
    fun a(@param_1) =>
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;

        error {: see(I, #a) :};

        'End of `a`' >> @>log;
    }

    on Init =>
    {
        try
        {
            'Begin' >> @>log;
            a(param_1: 1);
            'End' >> @>log;        
        }
        catch
        {
            'catch' >> @>log;
        }

        'End of `Init`' >> @>log;
    }
}
</code>
 
<console>
Begin
`a` has been called!
1
catch
End of `Init`
</console>

<code data-lng='soc' example-href='/docs/lng_examples/ErrorProcessingExample_4.zip'>
app PeaceKeeper
{
    fun a(@param_1) =>
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;

        error {: see(I, #a) :};

        'End of `a`' >> @>log;
    }

    on Init =>
    {
        try
        {
            'Begin' >> @>log;
            a(param_1: 1);
            'End' >> @>log;        
        }
        catch
        {
            'catch' >> @>log;
        }
        else
        {
            'else' >> @>log;
        }

        'End of `Init`' >> @>log;
    }
}
</code>
 
<console>
Begin
`a` has been called!
1
catch
End of `Init`
</console>

<code data-lng='soc' example-href='/docs/lng_examples/ErrorProcessingExample_5.zip'>
app PeaceKeeper
{
    fun a(@param_1) =>
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;

        error {: see(I, #a) :};

        'End of `a`' >> @>log;
    }

    on Init =>
    {
        try
        {
            'Begin' >> @>log;
            a(param_1: 1);
            'End' >> @>log;        
        }
        catch
        {
            'catch' >> @>log;
        }
        else
        {
            'else' >> @>log;
        }
        ensure
        {
            'ensure' >> @>log;
        }

        'End of `Init`' >> @>log;
    }
}
</code>
 
<console>
Begin
`a` has been called!
1
catch
ensure
End of `Init`
</console>

<code data-lng='soc' example-href='/docs/lng_examples/ErrorProcessingExample_6.zip'>
app PeaceKeeper
{
    fun a(@param_1) =>
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;

        error {: see(I, #a) :};

        'End of `a`' >> @>log;
    }

    on Init =>
    {
        try
        {
            'Begin' >> @>log;
            a(param_1: 1);
            'End' >> @>log;        
        }

        'End of `Init`' >> @>log;
    }
}
</code>
 
<console>
Begin
`a` has been called!
1
End of `Init`
</console>

<code data-lng='soc' example-href='/docs/lng_examples/ErrorProcessingExample_7.zip'>
app PeaceKeeper
{
    on Init =>
    {
        try
        {
            'Begin' >> @>log;
            error {: see(I, #a) :};
            'End' >> @>log;        
        }
        else
        {
            'else' >> @>log;
        }

        'End of `Init`' >> @>log;
    }
}
</code>
 
<console>
Begin
End of `Init`
</console>

<code data-lng='soc' example-href='/docs/lng_examples/ErrorProcessingExample_8.zip'>
app PeaceKeeper
{
    on Init =>
    {
        try
        {
            'Begin' >> @>log;
            error {: see(I, #a) :};
            'End' >> @>log;        
        }
        ensure
        {
            'ensure' >> @>log;
        }

        'End of `Init`' >> @>log;
    }
}
</code>
 
<console>
Begin
ensure
End of `Init`
</console>

<code data-lng='soc' example-href='/docs/lng_examples/ErrorProcessingExample_9.zip'>
app PeaceKeeper
{
    on Init =>
    {
        try
        {
            'Begin' >> @>log;
            error {: see(I, #a) :};
            'End' >> @>log;        
        }
        else
        {
            'else' >> @>log;
        }
        ensure
        {
            'ensure' >> @>log;
        }

        'End of `Init`' >> @>log;
    }
}
</code>
 
<console>
Begin
ensure
End of `Init`
</console>

<h2 class='center-h' data-href='RepeatStatement'>
"repeat" statement
</h2>

<LinkToContent/>

<complete_me/>

<h2 class='center-h' data-href='WhileStatement'>
"while" statement
</h2>

<LinkToContent/>

<complete_me/>

<h2 class='center-h' data-href='ReturnStatement'>
"return" statement
</h2>

<LinkToContent/>

<complete_me/>

<h2 class='center-h' data-href='IfElifElseStatement'>
"if-elif-else" statement
</h2>

<LinkToContent/>

<complete_me/>

<h2 class='center-h' data-href='ContinueLoopStatement'>
"continue" loop statement
</h2>

<LinkToContent/>

<complete_me/>

<h2 class='center-h' data-href='BreakLoopStatement'>
"break" loop statement
</h2>

<LinkToContent/>

<complete_me/>
