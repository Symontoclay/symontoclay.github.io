<h1 class='center-h'>Code examples</h1>

<ContentsPlace/>

<h2 class='center-h' data-href="Hello_world">
Hello world!
</h2>

<LinkToContent/>

<code data-lng='soc' example-href='/docs/lng_examples/HelloWorld_Example1.zip'>
app PeaceKeeper
{
    on Init => 
	{
	     "Begin" >> @>log;

	      "End" >> @>log;
	}
}
</code>

<p>
<a href='/docs/spec.html#Init_Lifecycle_trigger_chapter'>Init life cycle trigger</a> is executed. <a href='/docs/spec.html#String_literal_chapter'>Strings</a> are wrritten into <a href='/docs/spec.html#Log_system_channel_chapter'>log channel</a>.
</p>

<console>
Begin
End
</console>

<h2 class='center-h' data-href="Comments">
Comments
</h2>

<LinkToContent/>

<h3 class='center-h' data-href='Single_line_comment'>
Single line comment
</h3>

<LinkToContent/>

<p>
Read more about Single line comment <a href='/docs/spec.html#Comments_chapter'>here</a>.
</p>

<code data-lng='soc' example-href='/docs/lng_examples/SingleLineComment.zip'>
app PeaceKeeper
{
    on Init => 
	{
	     "Begin" >> @>log;

		 //@r = @b = 1;
		 @bx >> @>log;

		 "End" >> @>log;
	}
}
</code>

<console>
Begin
NULL
End
</console>

<h3 class='center-h' data-href='Multi_line_comment'>
Multi line comment
</h3>

<LinkToContent/>

<p>
Read more about Multi line comment <a href='/docs/spec.html#Comments_chapter'>here</a>.
</p>

<code data-lng='soc' example-href='/docs/lng_examples/MultiLineComment.zip'>
app PeaceKeeper
{
    on Init => 
	{
	     "Begin" >> @>log;

		 /*@r = @b = 1;
		 @bx >> @>log;*/

		 "End" >> @>log;
	}
}
</code>

<console>
Begin
End
</console>

<h2 class='center-h' data-href="Variables">
Variables
</h2>

<LinkToContent/>

<p>
Read more about Variables <a href='/docs/spec.html#Variable_chapter'>here</a>.
</p>

<h3 class='center-h' data-href='Variables_Example_1'>
Example 1
</h3>

<LinkToContent/>

<p>
Here 1 is alternately assigned to variables <b>@r</b> and <b>@b</b>.
So the variable <b>@b</b> will contain 1.
</p>

<code data-lng='soc' example-href='/docs/lng_examples/Variables_Example1.zip'>
app PeaceKeeper
{
    on Init => 
	{
	     "Begin" >> @>log;

		 @r = @b = 1;
		 @b >> @>log;

		 "End" >> @>log;
	}
}
</code>

<console>
Begin
1
End
</console>

<h3 class='center-h' data-href='Variables_Example_2'>
Example 2
</h3>

<LinkToContent/>

<p>
A variable <b>@bx</b> has never been being assigned. So It contains default value <b>NULL</b>.
</p>

<code data-lng='soc' example-href='/docs/lng_examples/Variables_Example2.zip'>
app PeaceKeeper
{
    on Init => 
	{
	     "Begin" >> @>log;

		 @r = @b = 1;
		 @bx >> @>log;

		 "End" >> @>log;
	}
}
</code>

<console>
Begin
NULL
End
</console>

<h2 class='center-h' data-href="Inheritance">
Inheritance
</h2>

<LinkToContent/>

<p>
Here It is example of changin relationship run time using operator <a href='/docs/spec.html#IsOp_chapter'>"is"</a> and statement <a href='/docs/spec.html#UseIsStatement_chapter'>"use is"</a>.
</p>

<p>
Read more <a href='/docs/spec.html#Inheritance_chapter'>here</a> about inheritance in SymOntoClay DSL.
</p>

<code data-lng='soc' example-href='/docs/lng_examples/InheritanceExample1.zip'>
app PeaceKeeper is [0.5] exampleClass
{
    on Init => 
	{
	     "Begin" >> @>log;

		 exampleClass is human >> @>log;

		 exampleClass is not human >> @>log;

		 use exampleClass is [0.5] human;

		 exampleClass is human >> @>log;

		 exampleClass is not human >> @>log;

		 use exampleClass is not human;

		 exampleClass is human >> @>log;

		 exampleClass is not human >> @>log;

		 use @@self is linux;

		 @@self is linux >> @>log;

		 "End" >> @>log;
	}
}
</code>

<console>
Begin
0
1
0,5
0,5
0
1
1
End
</console>

<h2 class='center-h' data-href="Calling_host_method">
Calling host method
</h2>

<LinkToContent/>

<p>
Read more <a href='/docs/engine_concepts/index.html#Common_concepts_Host'>host</a> about <b>Host</b>.
</p>

<p>
Read more <a href='/docs/spec.html#CallOp_chapter'>here</a> about calling methods.
</p>

<h3 class='center-h' data-href='Calling_host_method_Synchronous'>
Synchronous
</h3>

<LinkToContent/>

<code data-lng='soc' example-href='/docs/lng_examples/CallingHostMethodSynchronousExample1.zip'>
app PeaceKeeper is [0.5] exampleClass
{
    on Init => 
	{
	    "Begin" >> @>log;

        @@host.`go`(to: #@[25, 30]);

	    "End" >> @>log;
	}
}
</code>

<console>
Begin
End
</console>

<h3 class='center-h' data-href='Calling_host_method_Asynchronous'>
Asynchronous
</h3>

<LinkToContent/>

<code data-lng='soc' example-href='/docs/lng_examples/CallingHostMethodAsynchronousExample1.zip'>
app PeaceKeeper is [0.5] exampleClass
{
    on Init => 
	{
	     "Begin" >> @>log;

           @@host.`go`~(to: #@[25, 30]);

	        "End" >> @>log;
	}
}
</code>

<console>
Begin
End
</console>

<h2 class='center-h' data-href="Logic_queries">
Logic queries
</h2>

<LinkToContent/>

<h3 class='center-h' data-href='Logic_queries_Example_1'>
Example 1
</h3>

<LinkToContent/>

<p>
Read more about operator "select" <a href='/docs/spec.html#SelectOp_chapter'>here</a>.
</p>

<p>
Read more about facts <a href='/docs/spec.html#Fact_chapter'>here</a>.
</p>

<p>
Read more about logic rule <a href='/docs/spec.html#Logic_rule_chapter'>here</a>.
</p>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample_1_a.zip'>
class exampleClass is human, [0.1] animal
{
	{: male(#Tom) :}
	{: parent(#Piter, #Tom) :}
	{: {son($x, $y)} -> { male($x) & parent($y, $x)} :}
	{: { love($x, $y) } -> { help($x, $y) } :}
}

app PeaceKeeper is [0.5] exampleClass
{
    on Init => 
	{
	     "Begin" >> @>log;

		 select {: son(?x, ?y) :} >> @>log;

		 "End" >> @>log;
	}
}
</code>

<p>
The result of this query:
</p>

<console>
Begin
&lt;yes&gt;
?y = #piter; ?x = #tom

End
</console>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample_1_b.zip'>
app PeaceKeeper is [0.5] exampleClass
{
    on Init => 
	{
	     "Begin" >> @>log;

		 ? {: son(?x, ?y) :} >> @>log;

		 "End" >> @>log;
	}
}
</code>

<p>
The result of this query:
</p>

<console>
Begin
&lt;yes&gt;
?y = #piter; ?x = #tom

End
</console>

<h3 class='center-h' data-href='Logic_queries_Example_2'>
Example 2
</h3>

<LinkToContent/>

<p>
Read more about operator "select" <a href='/docs/spec.html#SelectOp_chapter'>here</a>.
</p>

<p>
Read more about facts <a href='/docs/spec.html#Fact_chapter'>here</a>.
</p>

<p>
Read more about logic rule <a href='/docs/spec.html#Logic_rule_chapter'>here</a>.
</p>

<p>
Using inheritance in logic searching.
</p>

<p>
Read more <a href='/docs/spec.html#Inheritance_chapter'>here</a> about inheritance in SymOntoClay DSL.
</p>

<p>
For set of facts:
</p>

<code data-lng='soc'>
{: can(bird, fly) :}
{: bird(#Alisa_12) :}
</code>

<p>
The query:
</p>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample_2_a.zip'>
{: can(#Alisa_12, ?x) :}
</code>

<p>
returns:
</p>

<console>
&lt;yes&gt;
?x = fly
</console>

<p>
The query:
</p>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample_2_b.zip'>
{: can(#Alisa_12, fly) :}
</code>

<p>
returns:
</p>

<console>
&lt;yes&gt;
</console>

<p>
The query:
</p>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample_2_c.zip'>
{: ?z(#Alisa_12, ?x) :}
</code>

<p>
returns:
</p>

<console>
&lt;yes&gt;
?z = can(bird,fly); ?x = fly
</console>

<p>
The relationship beween concepts '<b>#Alisa_12</b>' and '<b>fly</b>' is set by inheritance, not by direct fact or rule.
</p>

<h3 class='center-h' data-href='Logic_queries_Example_3'>
Example 3
</h3>

<LinkToContent/>

<p>
Inserts fact <b>{: >: { bird (#1234) } :}</p> into main storage of current <a href='/docs/engine_concepts/index.html#Common_concepts_NPC'>NPC</a> and returns inserted fact into expression's stack.
The fact is not displayed here.
</p>

<p>
Read more about operator "insert" <a href='/docs/spec.html#InsertOp_chapter'>here</a>.
</p>

<p>
Read more about facts <a href='/docs/spec.html#Fact_chapter'>here</a>.
</p>

<p>
Read more about logic rule <a href='/docs/spec.html#Logic_rule_chapter'>here</a>.
</p>

<code data-lng='soc' example-href='/docs/lng_examples/LogicQueriesExample_3.zip'>
app PeaceKeeper is [0.5] exampleClass
{
    on Init => 
	{
	     "Begin" >> @>log;		 

		 insert {: >: { bird (#1234) } :};

		 "End" >> @>log;
	}
}
</code>

<console>
Begin
End
</console>

<h2 class='center-h' data-href='Logic_сonditional_triggers'>
Logic сonditional triggers
</h2>

<LinkToContent/>

<complete_me/>
