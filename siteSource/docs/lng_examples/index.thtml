<h1 class='center-h'>Code examples</h1>

<ContentsPlace/>

<h2 class='center-h' data-href="Hello_world">
Hello world!
</h2>

<LinkToContent/>

<complete_me/>

<code example_name='HelloWorld_Example1'>
app PeaceKeeper
{
    on Enter => 
	{
	     "Begin" >> @>log;

	      "End" >> @>log;
	}
}
</code>

<p>
<a href='/docs/spec.html#Enter_Lifecycle_trigger_chapter'>Enter life cycle trigger</a> is executed. <a href='/docs/spec.html#String_literal_chapter'>Strings</a> are wrritten into <a href='/docs/spec.html#Log_system_channel_chapter'>log channel</a>.
</p>

<console example_name='HelloWorld_Example1'>
</console>

<h2 class='center-h' data-href="Comments">
Comments
</h2>

<LinkToContent/>

<h3 class='center-h' data-href='Single_line_comment'>
Single line comment
</h3>

<LinkToContent/>

<p>
Read more about Single line comment <a href='/docs/spec.html#Comments_chapter'>here</a>.
</p>

<code example_name='SingleLineComment'>
app PeaceKeeper
{
    on Enter => 
	{
	     "Begin" >> @>log;

		 //@r = @b = 1;
		 @bx >> @>log;

		 "End" >> @>log;
	}
}
</code>

<console example_name='SingleLineComment'>
</console>

<h3 class='center-h' data-href='Multi_line_comment'>
Multi line comment
</h3>

<LinkToContent/>

<p>
Read more about Multi line comment <a href='/docs/spec.html#Comments_chapter'>here</a>.
</p>

<code example_name='MultiLineComment'>
app PeaceKeeper
{
    on Enter => 
	{
	     "Begin" >> @>log;

		 /*@r = @b = 1;
		 @bx >> @>log;*/

		 "End" >> @>log;
	}
}
</code>

<console example_name='MultiLineComment'>
</console>

<h2 class='center-h' data-href='NULL'>
NULL
</h2>

<p>
Read more about <b>NULL</b> <a href='/docs/spec.html#NULL_literal_chapter'>here</a>.
</p>

<code example_name='NullExample'>
app Example
{
    on Enter =>
    {
	    'Begin' >> @>log;
		@x = NULL;
		@x >> @>log;
		'End' >> @>log;
    }
}
</code>

<console example_name='NullExample'>
</console>

<h2 class='center-h' data-href="Variables">
Variables
</h2>

<LinkToContent/>

<p>
Read more about Variables <a href='/docs/spec.html#Variable_chapter'>here</a>.
</p>

<h3 class='center-h' data-href='Variables_Example_1'>
Example 1
</h3>

<LinkToContent/>

<p>
Here 1 is alternately assigned to variables <b>@r</b> and <b>@b</b>.
So the variable <b>@b</b> will contain 1.
</p>

<code example_name='Variables_Example1'>
app PeaceKeeper
{
    on Enter => 
	{
	    "Begin" >> @>log;

		@r = @b = 1;
		@b >> @>log;

		"End" >> @>log;
	}
}
</code>

<console example_name='Variables_Example1'>
</console>

<h3 class='center-h' data-href='Variables_Example_2'>
Example 2
</h3>

<LinkToContent/>

<p>
A variable <b>@bx</b> has never been being assigned. So It contains default value <b>NULL</b>.
</p>

<code example_name='Variables_Example2'>
app PeaceKeeper
{
    on Enter => 
	{
	     "Begin" >> @>log;

		 @r = @b = 1;
		 @bx >> @>log;

		 "End" >> @>log;
	}
}
</code>

<console example_name='Variables_Example2'>
</console>

<h3 class='center-h' data-href='Variables_Example3'>
Example 3
</h3>

<code example_name='Variables_Example3'>
app PeaceKeeper
{
    on Enter =>
    {
        'Begin' >> @>log;
        var @a: number = 2;
        @a >> @>log;
        var @b: number;
        @b >> @>log;
        var @c;
        @c >> @>log;
        'End' >> @>log;
    }
}
</code>

<console example_name='Variables_Example3'>
</console>

<h2 class='center-h' data-href='Linguistic_variable'>
Linguistic variable
</h2>

<LinkToContent/>

<p>
Read more about Linguistic variable <a href='/docs/spec.html#Linguistic_variable_chapter'>here</a>.
</p>

<h3 class='center-h' data-href='Linguistic_variable_Full_declaration'>
Full declaration
</h3>

<LinkToContent/>

<code example_name='LinguisticVariableFullDeclaration1'>
linvar age for range (0, 150]
{
    constraints:
	    for inheritance;
	    for relation age;

    terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<code example_name='LinguisticVariableFullDeclaration2'>
linvar logic for range [0, 1]
{
    constraints:
	    for inheritance;

	terms:
		minimal = L(0, 0.1);
		low = Trapezoid(0, 0.05, 0.3, 0.45);
		middle = Trapezoid(0.3, 0.4, 0.6, 0.7);
		high = Trapezoid(0.55, 0.7, 0.95, 1);
		maximal = S(0.9, 1);
}
</code>

<h3 class='center-h' data-href='Linguistic_variable_Minimal_declaration'>
Minimal declaration
</h3>

<LinkToContent/>

<code example_name='LinguisticVariableMinimalDeclaration1'>
linvar age
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<code example_name='LinguisticVariableMinimalDeclaration2'>
linvar age
{
    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<h3 class='center-h' data-href='Linguistic_variable_With_Ranges'>
With ranges
</h3>

<LinkToContent/>

<code example_name='LinguisticVariableWithRange1'>
linvar age for range (-∞, +∞)
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<p>
This range is also from negative infinity to positive infinity:
</p>

<code example_name='LinguisticVariableWithRange2'>
linvar age for range (*, *)
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<p>
This range is open.
</p>

<code example_name='LinguisticVariableWithRange3'>
linvar age for range (0, 150)
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<p>
This range is closed.
</p>

<code example_name='LinguisticVariableWithRange4'>
linvar age for range [0, 150]
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<p>
This range is left-open and right-closed.
</p>

<code example_name='LinguisticVariableWithRange5'>
linvar age for range (0, 150]
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<p>
This range is left-closed and right-open.
</p>

<code example_name='LinguisticVariableWithRange6'>
linvar age for range [0, 150)
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<h3 class='center-h' data-href='Linguistic_variable_With_constraints'>
With constraints
</h3>

<LinkToContent/>

<code example_name='LinguisticVariableWithConstraints1'>
linvar age
{
    constraints:
	    for inheritance;
	    for relation age;

    terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<code example_name='LinguisticVariableWithConstraints2'>
linvar age
{
    constraints:
        for inh;
        for rel age;

    terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<code example_name='LinguisticVariableWithConstraints3'>
linvar age for range (0, 150]
{
    constraints:
	    for relation age;

	terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<code example_name='LinguisticVariableWithConstraints4'>
linvar age for range (0, 150]
{
    constraints:
        for rel age;

    terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<code example_name='LinguisticVariableWithConstraints5'>
linvar age for range (0, 150]
{
    constraints:
	    for inheritance;

	terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<code example_name='LinguisticVariableWithConstraints6'>
linvar age for range (0, 150]
{
    constraints:
        for inh;

    terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<h3 class='center-h' data-href='Linguistic_variable_Predefined_membership_functions'>
Predefined membership functions
</h3>

<LinkToContent/>

<h4 class='center-h' data-href='Linguistic_variable_Predefined_membership_function_L_Function'>
L Function
</h4>

<LinkToContent/>

<code example_name='LinguisticVariablePredefinedMembershipFunctionLFunction1'>
linvar age for range (0, 150]
{
	`teenager` = L(5, 10);
}
</code>

<h4 class='center-h' data-href='Linguistic_variable_Predefined_membership_function_Trapezoid_Function'>
Trapezoid Function
</h4>

<LinkToContent/>

<code example_name='LinguisticVariablePredefinedMembershipFunctionTrapezoidFunction1'>
linvar age for range (0, 150]
{
    `teenager` = Trapezoid(10, 12, 17, 20);
}
</code>

<h4 class='center-h' data-href='Linguistic_variable_Predefined_membership_function_S_Function'>
S Function
</h4>

<LinkToContent/>

<code example_name='LinguisticVariablePredefinedMembershipFunctionSFunction1'>
linvar age for range (0, 150]
{
    `teenager` = S(12, 17, 22);
}
</code>

<code example_name='LinguisticVariablePredefinedMembershipFunctionSFunction2'>
linvar age for range (0, 150]
{
    `teenager` = S(12, 22);
}
</code>

<h2 class='center-h' data-href="Inheritance">
Inheritance
</h2>

<LinkToContent/>

<p>
Here It is example of changin relationship run time using operator <a href='/docs/spec.html#IsOp_chapter'>"is"</a> and statement <a href='/docs/spec.html#SetIsStatement_chapter'>"set is"</a>.
</p>

<p>
Read more <a href='/docs/spec.html#Inheritance_chapter'>here</a> about inheritance in SymOntoClay DSL.
</p>

<code example_name='InheritanceExample1'>
app PeaceKeeper is [0.5] exampleClass
{
    on Enter => 
	{
	     "Begin" >> @>log;

		 exampleClass is human >> @>log;

		 exampleClass is not human >> @>log;

		 set exampleClass is [0.5] human;

		 exampleClass is human >> @>log;

		 exampleClass is not human >> @>log;

		 set exampleClass is not human;

		 exampleClass is human >> @>log;

		 exampleClass is not human >> @>log;

		 set @@self is linux;

		 @@self is linux >> @>log;

		 "End" >> @>log;
	}
}
</code>

<console example_name='InheritanceExample1'>
</console>

<p>
Using non-numeric fuzzy value:
</p>

<code example_name='InheritanceExample2'>
linvar logic for range [0, 1]
{
    constraints:
	    for inheritance;

	terms:
		minimal = L(0, 0.1);
		low = Trapezoid(0, 0.05, 0.3, 0.45);
		middle = Trapezoid(0.3, 0.4, 0.6, 0.7);
		high = Trapezoid(0.55, 0.7, 0.95, 1);
		maximal = S(0.9, 1);
}

app PeaceKeeper is [middle] exampleClass
{
    on Enter =>
    {
        'Begin' >> @>log;
        exampleClass is human >> @>log;
        exampleClass is not human >> @>log;
        set exampleClass is [middle] human;
        exampleClass is human >> @>log;
        exampleClass is not human >> @>log;
        set exampleClass is not human;
        exampleClass is human >> @>log;
        exampleClass is not human >> @>log;
        set @@self is linux;
        @@self is linux >> @>log;
        'End' >> @>log;
    }
}
</code>

<console example_name='InheritanceExample2'>
</console>

<code example_name='InheritanceExample3'>
linvar logic for range [0, 1]
{
    constraints:
	    for inheritance;

	terms:
		minimal = L(0, 0.1);
		low = Trapezoid(0, 0.05, 0.3, 0.45);
		middle = Trapezoid(0.3, 0.4, 0.6, 0.7);
		high = Trapezoid(0.55, 0.7, 0.95, 1);
		maximal = S(0.9, 1);
}

app PeaceKeeper is [very middle] exampleClass
{
    on Enter =>
    {
        'Begin' >> @>log;
        exampleClass is human >> @>log;
        exampleClass is not human >> @>log;
        set exampleClass is [very middle] human;
        exampleClass is human >> @>log;
        exampleClass is not human >> @>log;
        set exampleClass is not human;
        exampleClass is human >> @>log;
        exampleClass is not human >> @>log;
        set @@self is linux;
        @@self is linux >> @>log;
        'End' >> @>log;
    }
}
</code>

<console example_name='InheritanceExample3'>
</console>

<h2 class='center-h' data-href='MemberAccessModifiers'>
Member access modifiers
</h2>

<LinkToContent/>

<p>
Read more about Member access modifiers <a href='/docs/spec.html#MemberAccessModifiers_chapter'>here</a>.
</p>

<code example_name='MemberAccessModifiers_Example1'>
class Cls1
{
protected:
    fun a() => 
    {
        '`a` has been called!' >> @>log;
    }
}

app PeaceKeeper is Cls1
{
private:
    on Enter =>
    {
        'Begin' >> @>log;
        a();
        'End' >> @>log;
    }
}
</code>

<console example_name='MemberAccessModifiers_Example1'>
</console>

<code example_name='MemberAccessModifiers_Example2'>
class Cls1
{
private:
	{: male(#Tom) :}
	{: parent(#Piter, #Tom) :}
	{: {son($x, $y)} -> { male($x) & parent($y, $x)} :}
}

app PeaceKeeper is Cls1
{
private:
    on Enter =>
    {
        'Begin' >> @>log;
        select {: son($x, $y) :} >> @>log;
        'End' >> @>log;
    }
}
</code>

<console example_name='MemberAccessModifiers_Example2'>
</console>

<code example_name='MemberAccessModifiers_Example3'>
class Cls1
{
protected:
	{: male(#Tom) :}
	{: parent(#Piter, #Tom) :}
	{: {son($x, $y)} -> { male($x) & parent($y, $x)} :}
}

app PeaceKeeper is Cls1
{
private:
    on Enter =>
    {
        'Begin' >> @>log;
        select {: son($x, $y) :} >> @>log;
        'End' >> @>log;
    }
}
</code>

<console example_name='MemberAccessModifiers_Example3'>
</console>

<h2 class='center-h' data-href='Field'>
Field
</h2>

<LinkToContent/>

<p>
Read more about Field <a href='/docs/spec.html#Field_chapter'>here</a>.
</p>

<code example_name='Field_Example1'>
app PeaceKeeper
{
    @b;

    on Enter =>
    {
        'Begin' >> @>log;
        @b >> @>log;
        'End' >> @>log;
    }
}
</code>

<console example_name='Field_Example1'>
</console>

<code example_name='Field_Example2'>
app PeaceKeeper
{
    var @b: number = 2;

    on Enter =>
    {
        'Begin' >> @>log;
        @b >> @>log;
        'End' >> @>log;
    }
}
</code>

<console example_name='Field_Example2'>
</console>

<h2 class='center-h' data-href='Function'>
Function and Method
</h2>

<LinkToContent/>

<p>
Read more about Function <a href='/docs/spec.html#Function_chapter'>here</a>.
</p>

<p>
Read more about Method <a href='/docs/spec.html#Method_chapter'>here</a>.
</p>

<code example_name='FuncExample_1'>
app PeaceKeeper
{
    fun a() => 
    {
        '`a` has been called!' >> @>log;
    }

    on Enter =>
    {
        'Begin' >> @>log;
        a();
        'End' >> @>log;
    }
}
</code>

<console example_name='FuncExample_1'>
</console>

<code example_name='FuncExample_1_a'>
app PeaceKeeper
{
    fun a()
    {
        '`a` has been called!' >> @>log;
    }

    on Enter =>
    {
        'Begin' >> @>log;
        a();
        'End' >> @>log;
    }
}
</code>

<console example_name='FuncExample_1_a'>
</console>

<code example_name='FuncExample_2'>
app PeaceKeeper
{
    fun a(@param_1)
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;
    }

    on Enter =>
    {
        'Begin' >> @>log;
        a(1);
        'End' >> @>log;
    }
}
</code>

<console example_name='FuncExample_2'>
</console>

<code example_name='FuncExample_2_a'>
fun a(@param_1)
{
    '`a` (any) has been called!' >> @>log;
    @param_1 >> @>log;
}

app PeaceKeeper
{
    on Enter =>
    {
        'Begin' >> @>log;
        a(param_1: 1);
        'End' >> @>log;
    }
}
</code>

<console example_name='FuncExample_2_a'>
</console>

<code example_name='FuncExample_3'>
app PeaceKeeper
{
    fun a(@param_1)
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;
    }

    on Enter =>
    {
        'Begin' >> @>log;
        a(@param_1: 1);
        'End' >> @>log;
    }
}
</code>

<console example_name='FuncExample_3'>
</console>

<code example_name='FuncExample_4'>
app PeaceKeeper
{
    fun a(@param_1)
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;
    }

    on Enter =>
    {
        'Begin' >> @>log;
        a(param_1: 1);
        'End' >> @>log;
    }
}
</code>

<console example_name='FuncExample_4'>
</console>

<code example_name='FuncExample_5'>
app PeaceKeeper
{
    fun a(@param_1)
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;
    }

    on Enter =>
    {
        'Begin' >> @>log;
        @param_1 = 12;

        a(@param_1);
        'End' >> @>log;
    }
}
</code>

<console example_name='FuncExample_5'>
</console>

<code example_name='FuncExample_6'>
app PeaceKeeper
{
    fun a(@param_1)
    {
        '`a` (1) has been called!' >> @>log;
        @param_1 >> @>log;
    }

    fun a(@param_1, @param_2)
    {
        '`a` (2) has been called!' >> @>log;
        @param_1 >> @>log;
        @param_2 >> @>log;
    }

    on Enter =>
    {
        'Begin' >> @>log;
        @param_1 = 12;

        a(@param_1);
        'End' >> @>log;
    }
}
</code>

<console example_name='FuncExample_6'>
</console>

<code example_name='FuncExample_7'>
app PeaceKeeper
{
    fun a(@param_1)
    {
        '`a` (1) has been called!' >> @>log;
        @param_1 >> @>log;
    }

    fun a(@param_1, @param_2)
    {
        '`a` (2) has been called!' >> @>log;
        @param_1 >> @>log;
        @param_2 >> @>log;
    }

    on Enter =>
    {
        'Begin' >> @>log;
        @param_1 = 12;

        a(@param_1);
        a(3, 'Hi');
        'End' >> @>log;
    }
}
</code>

<console example_name='FuncExample_7'>
</console>

<code example_name='FuncExample_8'>
app PeaceKeeper
{
    fun a(@param_1, @param_2 = 15)
    {
        '`a` (2) has been called!' >> @>log;
        @param_1 >> @>log;
        @param_2 >> @>log;
    }

    on Enter =>
    {
        'Begin' >> @>log;
        @param_1 = 12;

        a(@param_1);
        'End' >> @>log;
    }
}
</code>

<console example_name='FuncExample_8'>
</console>

<code example_name='FuncExample_9'>
app PeaceKeeper
{
    fun a(@param_1)
    {
        '`a` (any) has been called!' >> @>log;
    }

    fun a(@param_1: string)
    {
        '`a` (string) has been called!' >> @>log;
    }

    fun a(@param_1: number)
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;
    }

    on Enter =>
    {
        'Begin' >> @>log;
        a(param_1: 1);
        'End' >> @>log;
    }
}
</code>

<console example_name='FuncExample_9'>
</console>

<code example_name='FuncExample_10_a'>
app PeaceKeeper
{
    fun a(@param_1)
    {
        '`a` (any) has been called!' >> @>log;
        @param_1 >> @>log;
    }

    fun a(@param_1: (number | string))
    {
        '`a` (number | string) has been called!' >> @>log;
        @param_1 >> @>log;
    }

    on Enter =>
    {
        'Begin' >> @>log;
        a(param_1: 1);
        a(param_1: 'Hi');
        'End' >> @>log;
    }
}
</code>

<console example_name='FuncExample_10_a'>
</console>

<code example_name='FuncExample_10_b'>
app PeaceKeeper
{
    fun a(@param_1)
    {
        '`a` (any) has been called!' >> @>log;
        @param_1 >> @>log;
    }

    fun a(@param_1: number | string)
    {
        '`a` (number | string) has been called!' >> @>log;
        @param_1 >> @>log;
    }

    on Enter =>
    {
        'Begin' >> @>log;
        a(param_1: 1);
        a(param_1: 'Hi');
        'End' >> @>log;
    }
}
</code>

<console example_name='FuncExample_10_b'>
</console>

<h2 class='center-h' data-href='Action'>
Action
</h2>

<LinkToContent/>

<p>
Read more <a href='/docs/spec.html#Action_chapter'>here</a> about Action.
</p>

<p>
Read more <a href='/docs/spec.html#Function_call_overloading_chapter'>here</a> about Function call overloading.
</p>

<p>
Read more <a href='/docs/spec.html#CompleteActionStatement_chapter'>here</a> about "complete action" statement.
</p>

<p>
Read more <a href='/docs/spec.html#BreakActionStatement_chapter'>here</a> about "break action" statement.
</p>

<code example_name='ActionExample_1'>
app PeaceKeeper
{
    on Enter =>
    {
        'Begin' >> @>log;
 
        Go();

        'End' >> @>log;
    }
}

action Go 
{
    on Enter =>
    {
        'Enter Go' >> @>log;
    }

    op () => 
    {
        'Begin Go' >> @>log;
        'End Go' >> @>log;
    }

    on {: see(I, $x) :} ($x >> @x) => 
    {
        'on Fired' >> @>log;
        @x >> @>log;
        complete action;
    }
}
</code>

<console example_name='ActionExample_1'>
</console>

<h2 class='center-h' data-href='State'>
State
</h2>

<LinkToContent/>

<p>
Read more <a href='/docs/spec.html#State_chapter'>here</a> about State.
</p>

<code example_name='States_Example1'>
app PeaceKeeper
{
    set Idling as default state;

    on Enter =>
    {
        'Begin' >> @>log;        
        'End' >> @>log;
    }
}

states { Idling, Attacking }

state Idling
{
    on Enter
    {
        'Begin Idling Enter' >> @>log;
        'End Idling Enter' >> @>log;
    }
}

state Attacking
{
    enter on:
        {: see(I, enemy) :}

    leave on:
        {: see(I, barrel) :}

    on Enter
    {
        'Begin Attacking Enter' >> @>log;

        'End Attacking Enter' >> @>log;
    }
}
</code>

<console example_name='States_Example1'>
</console>

<code example_name='States_Example2'>
app PeaceKeeper
{
    set Idling as state;

    on Enter =>
    {
        'Begin' >> @>log;        
        'End' >> @>log;
    }
}

state Idling
{
    on Enter
    {
        'Begin Enter' >> @>log;
        'End Enter' >> @>log;
    }
}
</code>

<console example_name='States_Example2'>
</console>

<code example_name='States_Example3'>
app PeaceKeeper
{
    set Idling as default state;
    set Patrolling as state;

    on Enter =>
    {
        'Begin' >> @>log;        
        'End' >> @>log;
    }
}

state Idling
{
    on Enter
    {
        'Begin Idling Enter' >> @>log;
        'End Idling Enter' >> @>log;
    }
}

state Patrolling
{
    on Enter
    {
        'Begin Patrolling Enter' >> @>log;

        set Idling as state;

        'End Patrolling Enter' >> @>log;
    }
}
</code>

<console example_name='States_Example3'>
</console>

<code example_name='States_Example4'>
app PeaceKeeper
{ 
    set Patrolling as state;
}

state Idling
{
    on Enter
    {
        'Begin Idling Enter' >> @>log;
        'End Idling Enter' >> @>log;
    }
}

state Patrolling
{
    on Enter
    {
        'Begin Patrolling Enter' >> @>log;

        set Idling as default state;
        complete state;

        'End Patrolling Enter' >> @>log;
    }
}
</code>

<console example_name='States_Example4'>
</console>

<code example_name='States_Example5'>
app PeaceKeeper
{
    set Idling as default state;
    set Patrolling as state;

    on Enter =>
    {
        'Begin' >> @>log;        
        'End' >> @>log;
    }

    on {: attack(I, enemy) :}
    {
        'D' >> @>log;
    }
}

state Idling
{
    on Enter
    {
        'Begin Idling Enter' >> @>log;
        'End Idling Enter' >> @>log;
    }
}

state Patrolling
{
    on Enter
    {
        'Begin Patrolling Enter' >> @>log;

        break state {: attack(I, enemy) :};

        'End Patrolling Enter' >> @>log;
    }
}
</code>

<console example_name='States_Example5'>
</console>

<code example_name='States_Example6'>
app PeaceKeeper
{
    set Idling as default state;
    set Patrolling as state;

    on Enter =>
    {
        'Begin' >> @>log;        
        'End' >> @>log;
    }

    on {: attack(I, enemy) :}
    {
        'D' >> @>log;
    }
}

state Idling
{
    on Enter
    {
        'Begin Idling Enter' >> @>log;
        'End Idling Enter' >> @>log;
    }
}

state Patrolling
{
    on Enter
    {
        'Begin Patrolling Enter' >> @>log;

        break state;

        'End Patrolling Enter' >> @>log;
    }
}
</code>

<console example_name='States_Example6'>
</console>

<code example_name='States_Example7'>
app PeaceKeeper
{
    set Idling as default state;

    {: male(#Tom) :}
	{: parent(#Piter, #Tom) :}
	{: {son($x, $y)} -> { male($x) & parent($y, $x)} :}
}

state Idling
{
    on Enter
    {
        'Begin Idling Enter' >> @>log;
        
        select {: son($x, $y) :} >> @>log;

        'End Idling Enter' >> @>log;
    }
}
</code>

<console example_name='States_Example7'>
</console>

<code example_name='States_Example8'>
app PeaceKeeper
{
    set Idling as default state;

    on Enter =>
    {
        'Begin' >> @>log;
        
        select {: son($x, $y) :} >> @>log;

        'End' >> @>log;
    }
}

state Idling
{
    {: male(#Tom) :}
	{: parent(#Piter, #Tom) :}
	{: {son($x, $y)} -> { male($x) & parent($y, $x)} :}

    on Enter
    {
        'Begin Idling Enter' >> @>log;
        
        'End Idling Enter' >> @>log;
    }
}
</code>

<console example_name='States_Example8'>
</console>

<code example_name='States_Example9'>
app PeaceKeeper
{
    set Idling as default state;
}

state Idling
{
    on Enter
    {
        'Begin Idling Enter' >> @>log;
        ? {: bird ($x) :} >> @>log;
        insert {: >: { bird (#1234) } :};
        ? {: bird ($x) :} >> @>log;
        'End Idling Enter' >> @>log;
    }
}
</code>

<console example_name='States_Example9'>
</console>

<h2 class='center-h' data-href="Calling_host_method">
Calling host method
</h2>

<LinkToContent/>

<p>
Read more <a href='/docs/engine_concepts/index.html#Common_concepts_Host'>host</a> about <b>Host</b>.
</p>

<p>
Read more <a href='/docs/spec.html#CallOp_chapter'>here</a> about calling methods.
</p>

<h3 class='center-h' data-href='Calling_host_method_Synchronous'>
Synchronous
</h3>

<LinkToContent/>

<code example_name='CallingHostMethodSynchronousExample1'>
app PeaceKeeper is [0.5] exampleClass
{
    on Enter => 
	{
	    "Begin" >> @>log;

        @@host.`go`(to: #@[25, 30]);

	    "End" >> @>log;
	}
}
</code>

<console example_name='CallingHostMethodSynchronousExample1'>
</console>

<h3 class='center-h' data-href='Calling_host_method_Asynchronous'>
Asynchronous
</h3>

<LinkToContent/>

<code example_name='CallingHostMethodAsynchronousExample1'>
app PeaceKeeper is [0.5] exampleClass
{
    on Enter => 
	{
	    "Begin" >> @>log;

        @@host.`go`~(to: #@[25, 30]);

	    "End" >> @>log;
	}
}
</code>

<console example_name='CallingHostMethodAsynchronousExample1'>
</console>

<h2 class='center-h' data-href="Logic_queries">
Logic queries
</h2>

<LinkToContent/>

<h3 class='center-h' data-href='Logic_queries_Example_1'>
Example 1
</h3>

<LinkToContent/>

<p>
Read more about operator "select" <a href='/docs/spec.html#SelectOp_chapter'>here</a>.
</p>

<p>
Read more about facts <a href='/docs/spec.html#Fact_chapter'>here</a>.
</p>

<p>
Read more about logic rule <a href='/docs/spec.html#Logic_rule_chapter'>here</a>.
</p>

<code example_name='LogicQueriesExample_1_a'>
class exampleClass is human, [0.1] animal
{
	{: male(#Tom) :}
	{: parent(#Piter, #Tom) :}
	{: {son($x, $y)} -> { male($x) & parent($y, $x)} :}
	{: { love($x, $y) } -> { help($x, $y) } :}
}

app PeaceKeeper is [0.5] exampleClass
{
    on Enter => 
	{
	     "Begin" >> @>log;

		 select {: son($x, $y) :} >> @>log;

		 "End" >> @>log;
	}
}
</code>

<p>
The result of this query:
</p>

<console example_name='LogicQueriesExample_1_a'>
</console>

<code example_name='LogicQueriesExample_1_b'>
class exampleClass is human, [0.1] animal
{
	{: male(#Tom) :}
	{: parent(#Piter, #Tom) :}
	{: {son($x, $y)} -> { male($x) & parent($y, $x)} :}
	{: { love($x, $y) } -> { help($x, $y) } :}
}

app PeaceKeeper is [0.5] exampleClass
{
    on Enter => 
	{
	     "Begin" >> @>log;

		 ? {: son($x, $y) :} >> @>log;

		 "End" >> @>log;
	}
}
</code>

<p>
The result of this query:
</p>

<console example_name='LogicQueriesExample_1_b'>
</console>

<h3 class='center-h' data-href='Logic_queries_Example_2'>
Example 2
</h3>

<LinkToContent/>

<p>
Read more about operator "select" <a href='/docs/spec.html#SelectOp_chapter'>here</a>.
</p>

<p>
Read more about facts <a href='/docs/spec.html#Fact_chapter'>here</a>.
</p>

<p>
Read more about logic rule <a href='/docs/spec.html#Logic_rule_chapter'>here</a>.
</p>

<p>
Using inheritance in logic searching.
</p>

<p>
Read more <a href='/docs/spec.html#Inheritance_chapter'>here</a> about inheritance in SymOntoClay DSL.
</p>

<p>
For set of facts:
</p>

<code data-lng='soc'>
{: can(bird, fly) :}
{: bird(#Alisa_12) :}
</code>

<code example_name='LogicQueriesExample_2_a'>
app PeaceKeeper
{
    {: can(bird, fly) :}
    {: bird(#Alisa_12) :}

    on Enter =>
    {
	    ? {: can(#Alisa_12, $x) :} >> @>log;
    }
}
</code>

<p>
The query:
</p>

<code data-lng='soc'>
{: can(#Alisa_12, $x) :}
</code>

<p>
returns:
</p>

<console example_name='LogicQueriesExample_2_a'>
</console>

<p>
The query:
</p>

<code data-lng='soc'>
{: can(#Alisa_12, fly) :}
</code>

<code example_name='LogicQueriesExample_2_b'>
app PeaceKeeper
{
    {: can(bird, fly) :}
    {: bird(#Alisa_12) :}

    on Enter =>
    {
	     ? {: can(#Alisa_12, fly) :} >> @>log;
    }
}
</code>

<p>
returns:
</p>

<console example_name='LogicQueriesExample_2_b'>
</console>

<p>
The query:
</p>

<code data-lng='soc'>
{: $z(#Alisa_12, $x) :}
</code>

<code example_name='LogicQueriesExample_2_c'>
app PeaceKeeper
{
    {: can(bird, fly) :}
    {: bird(#Alisa_12) :}

    on Enter =>
    {
	     ? {: $z(#Alisa_12, $x) :} >> @>log;
    }
}
</code>

<p>
returns:
</p>

<console example_name='LogicQueriesExample_2_c'>
</console>

<p>
The relationship beween concepts '<b>#Alisa_12</b>' and '<b>fly</b>' is set by inheritance, not by direct fact or rule.
</p>

<h3 class='center-h' data-href='Logic_queries_Example_3'>
Example 3
</h3>

<LinkToContent/>

<p>
Inserts fact <b>{: >: { bird (#1234) } :}</p> into main storage of current <a href='/docs/engine_concepts/index.html#Common_concepts_NPC'>NPC</a> and returns inserted fact into expression's stack.
The fact is not displayed here.
</p>

<p>
Read more about operator "insert" <a href='/docs/spec.html#InsertOp_chapter'>here</a>.
</p>

<p>
Read more about facts <a href='/docs/spec.html#Fact_chapter'>here</a>.
</p>

<p>
Read more about logic rule <a href='/docs/spec.html#Logic_rule_chapter'>here</a>.
</p>

<code example_name='LogicQueriesExample_3'>
app PeaceKeeper is [0.5] exampleClass
{
    on Enter => 
	{
	     "Begin" >> @>log;		 

		 insert {: >: { bird (#1234) } :};

		 "End" >> @>log;
	}
}
</code>

<console example_name='LogicQueriesExample_3'>
</console>

<h3 class='center-h' data-href='Logic_queries_Example_4'>
Example 4
</h3>

<LinkToContent/>

<code example_name='LogicQueriesExample4_a'>
app PeaceKeeper
{
    {: animal(cat) :}

    on Enter =>
    {
        select {: { cat is animal } :} >> @>log;
    }
}
</code>

<console example_name='LogicQueriesExample4_a'>
</console>

<code example_name='LogicQueriesExample4_b'>
app PeaceKeeper
{
    {: >: { animal(cat) } :}

    on Enter =>
    {
        select {: cat is animal :} >> @>log;
    }
}
</code>

<console example_name='LogicQueriesExample4_b'>
</console>

<code example_name='LogicQueriesExample4_c'>
app PeaceKeeper
{
    {: animal(cat) :}

    on Enter =>
    {
        select {: >: { cat is animal } :} >> @>log;
    }
}
</code>

<console example_name='LogicQueriesExample4_c'>
</console>

<h3 class='center-h' data-href='Logic_queries_Example_5'>
Example 5
</h3>

<LinkToContent/>

<code example_name='LogicQueriesExample5_a'>
linvar age for range (0, 150]
{
	constraints:
		for relation age;

	terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}

app PeaceKeeper
{
    {: age(#Tom, 15) :}

    on Enter =>
    {
        select {: age(#Tom, `teenager`) :} >> @>log;
    }
}
</code>

<console example_name='LogicQueriesExample5_a'>
</console>

<code example_name='LogicQueriesExample5_b'>
linvar age for range (0, 150]
{
	constraints:
		for relation age;

	terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}

app PeaceKeeper
{
    {: age(#Tom, 12) :}

    on Enter =>
    {
        select {: age(#Tom, very `teenager`) :} >> @>log;
    }
}
</code>

<console example_name='LogicQueriesExample5_b'>
</console>

<code example_name='LogicQueriesExample5_c'>
linvar age for range (0, 150]
{
	constraints:
		for relation age;

	terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}

app PeaceKeeper
{
    {: age(#Tom, 12) :}

    on Enter =>
    {
        select {: age(#Tom, very teenager) :} >> @>log;
    }
}
</code>

<console example_name='LogicQueriesExample5_c'>
</console>

<code example_name='LogicQueriesExample5_d'>
linvar age for range (0, 150]
{
	constraints:
		for relation age;

	terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}

app PeaceKeeper
{
    {: age(#Tom, 12) :}

    on Enter =>
    {
        select {: age(#Tom, `very` `teenager`) :} >> @>log;
    }
}
</code>

<console example_name='LogicQueriesExample5_d'>
</console>

<code example_name='LogicQueriesExample5_e'>
linvar age for range (0, 150]
{
	constraints:
		for relation age;

	terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}

app PeaceKeeper
{
    {: age(#Tom, very `teenager`) :}

    on Enter =>
    {
        select {: age(#Tom, 12) :} >> @>log;
    }
}
</code>

<console example_name='LogicQueriesExample5_e'>
</console>

<code example_name='LogicQueriesExample5_f'>
linvar age for range (0, 150]
{
	constraints:
		for relation age;

	terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}

app PeaceKeeper
{
    {: age(#Tom, `teenager`) :}

    on Enter =>
    {
        select {: age(#Tom, 12) :} >> @>log;
    }
}
</code>

<console example_name='LogicQueriesExample5_f'>
</console>

<h3 class='center-h' data-href='Logic_queries_Example_6'>
Example 6
</h3>

<LinkToContent/>

<code example_name='LogicQueriesExample6'>
app PeaceKeeper
{
    {: >: {distance($x, $y)} -> { distance(I, $x, $y) } :}
    {: age(#Tom, 50) :}
    {: distance(I, #Tom, 12) :}

    on Enter =>
    {
        select {: age(#Tom, $x) & distance(#Tom, $y) & $x is not $y :} >> @>log;
    }
}
</code>

<console example_name='LogicQueriesExample6'>
</console>

<h3 class='center-h' data-href='Logic_queries_Example_7'>
Example 7
</h3>

<LinkToContent/>

<code example_name='LogicQueriesExample7'>
app PeaceKeeper
{
    {: >: {distance($x, $y)} -> { distance(I, $x, $y) } :}
    {: distance(I, #Tom, 12) :}

    on Enter =>
    {
        select {: distance(#Tom, $x) & $x is 12 :} >> @>log;
    }
}
</code>

<console example_name='LogicQueriesExample7'>
</console>

<h3 class='center-h' data-href='Logic_queries_Example_8'>
Example 8
</h3>

<LinkToContent/>

<code example_name='LogicQueriesExample8_a'>
app PeaceKeeper
{
    {: >: {distance($x, $y)} -> { distance(I, $x, $y) } :}
    {: distance(I, #Tom, 50) :}

    on Enter =>
    {
        select {: distance(#Tom, $x) & $x > 5 :} >> @>log;
    }
}
</code>

<console example_name='LogicQueriesExample8_a'>
</console>

<code example_name='LogicQueriesExample8_b'>
linvar age for range (0, 150]
{
	constraints:
		for relation age;

	terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}

app PeaceKeeper
{
    {: age(#Tom, 50) :}

    on Enter =>
    {
        select {: age(#Tom, $x) & $x > `teenager` :} >> @>log;
    }
}
</code>

<console example_name='LogicQueriesExample8_b'>
</console>

<code example_name='LogicQueriesExample8_c'>
linvar age for range (0, 150]
{
	constraints:
		for relation age;

	terms:
        `teenager` = Trapezoid(10, 12, 17, 20);
}

app PeaceKeeper
{
    {: age(#Tom, 50) :}

    on Enter =>
    {
        select {: age(#Tom, $x) & $x > very `teenager` :} >> @>log;
    }
}
</code>

<console example_name='LogicQueriesExample8_c'>
</console>

<h3 class='center-h' data-href='Logic_queries_Example_9'>
Example 9
</h3>

<LinkToContent/>

<code example_name='LogicQueriesExample9'>
app PeaceKeeper
{
    {: >: {distance($x, $y)} -> { distance(I, $x, $y) } :}
    {: distance(I, #Tom, 50) :}

    on Enter =>
    {
        select {: distance(#Tom, $x) & $x >= 5 :} >> @>log;
    }
}
</code>

<console example_name='LogicQueriesExample9'>
</console>

<h3 class='center-h' data-href='Logic_queries_Example_10'>
Example 10
</h3>

<LinkToContent/>

<code example_name='LogicQueriesExample10'>
app PeaceKeeper
{
    {: >: {distance($x, $y)} -> { distance(I, $x, $y) } :}
    {: distance(I, #Tom, 4) :}

    on Enter =>
    {
        select {: distance(#Tom, $x) & $x < 5 :} >> @>log;
    }
}
</code>

<console example_name='LogicQueriesExample10'>
</console>

<h3 class='center-h' data-href='Logic_queries_Example_11'>
Example 11
</h3>

<LinkToContent/>

<code example_name='LogicQueriesExample11'>
app PeaceKeeper
{
    {: >: {distance($x, $y)} -> { distance(I, $x, $y) } :}
    {: distance(I, #Tom, 5) :}

    on Enter =>
    {
        select {: distance(#Tom, $x) & $x <= 5 :} >> @>log;
    }
}
</code>

<console example_name='LogicQueriesExample11'>
</console>

<h3 class='center-h' data-href='Logic_queries_Example_12'>
Example 12
</h3>

<LinkToContent/>

<code example_name='LogicQueriesExample12'>
app PeaceKeeper
{
    {: barrel(#a) :}
    {: see(I, #a) :}

    on Enter =>
    {
        select {: see(I, $x) & barrel($x) & !focus(I, friend) :} >> @>log;
    }
}
</code>

<console example_name='LogicQueriesExample12'>
</console>

<h2 class='center-h' data-href='ImperativeLogicOperators'>
Imperative logic operators
</h2>

<LinkToContent/>

<p>
Read more about Imperative logic operators <a href='/docs/spec.html#Relational_operators_chapter'>here</a> and <a href='/docs/spec.html#LogicOp_chapter'>here</a>.
</p>

<code example_name='ImperativeLogicOperators_Example1'>
app PeaceKeeper
{
    on Enter =>
    {
        'Begin' >> @>log;
        
        @a = 3;

        if(@a <= 0 | @a is 3 | @a > 5)
        {
            'Yes!' >> @>log;
        } else {
            'Else Yes!' >> @>log;
        }

        'End' >> @>log;
    }
}
</code>

<console example_name='ImperativeLogicOperators_Example1'>
</console>

<code example_name='ImperativeLogicOperators_Example2'>
linvar age for range (0, 150]
{
    terms:
	    `teenager` = Trapezoid(10, 12, 17, 20);
}

app PeaceKeeper
{
    on Enter =>
    {
        'Begin' >> @>log;
        
        @a = 16;

        if(@a <= teenager)
        {
            'Yes!' >> @>log;
        } else {
            'Else Yes!' >> @>log;
        }

        'End' >> @>log;
    }
}
</code>

<console example_name='ImperativeLogicOperators_Example2'>
</console>

<h2 class='center-h' data-href='ArithmeticOperators'>
Arithmetic operators
</h2>

<LinkToContent/>

<p>
Read more about Arithmetic operators <a href='/docs/spec.html#ArithmeticOperators_chapter'>here</a>.
</p>

<code example_name='ArithmeticOperators_Example1'>
app PeaceKeeper
{
private:
    on Enter =>
    {
        'Begin' >> @>log;
        1 + 1 >> @>log;
        'End' >> @>log;
    }
}
</code>

<console example_name='ArithmeticOperators_Example1'>
</console>

<code example_name='ArithmeticOperators_Example2'>
app PeaceKeeper
{
private:
    @a = 2;

    on Enter =>
    {
        @b = 3;

        'Begin' >> @>log;
        @a + @b >> @>log;
        'End' >> @>log;
    }
}
</code>

<console example_name='ArithmeticOperators_Example2'>
</console>

<code example_name='ArithmeticOperators_Example3'>
app PeaceKeeper
{
private:
    on Enter =>
    {
        'Begin' >> @>log;
        1 + NULL >> @>log;
        'End' >> @>log;
    }
}
</code>

<console example_name='ArithmeticOperators_Example3'>
</console>

<code example_name='ArithmeticOperators_Example4'>
app PeaceKeeper
{
private:
    on Enter =>
    {
        'Begin' >> @>log;
        1 + 'Hi' >> @>log;
        'End' >> @>log;
    }
}
</code>

<console example_name='ArithmeticOperators_Example4'>
</console>

<code example_name='ArithmeticOperators_Example5'>
app PeaceKeeper
{
private:
    on Enter =>
    {
        'Begin' >> @>log;
        3 - 1 >> @>log;
        'End' >> @>log;
    }
}
</code>

<console example_name='ArithmeticOperators_Example5'>
</console>

<code example_name='ArithmeticOperators_Example6'>
app PeaceKeeper
{
private:
    on Enter =>
    {
        'Begin' >> @>log;
        3 * 4 >> @>log;
        'End' >> @>log;
    }
}
</code>

<console example_name='ArithmeticOperators_Example6'>
</console>

<code example_name='ArithmeticOperators_Example7'>
app PeaceKeeper
{
private:
    on Enter =>
    {
        'Begin' >> @>log;
        12 / 4 >> @>log;
        'End' >> @>log;
    }
}
</code>

<console example_name='ArithmeticOperators_Example7'>
</console>

<code example_name='ArithmeticOperators_Example8'>
app PeaceKeeper
{
private:
    on Enter =>
    {
        'Begin' >> @>log;
        12 / 0 >> @>log;
        'End' >> @>log;
    }
}
</code>

<console example_name='ArithmeticOperators_Example8'>
</console>

<code example_name='ArithmeticOperators_Example9'>
app PeaceKeeper
{
    on Enter =>
    {
        'Begin' >> @>log;
        
        (3 + 5) * 2 >> @>log;

        'End' >> @>log;
    }
}
</code>

<console example_name='ArithmeticOperators_Example9'>
</console>

<code example_name='ArithmeticOperators_Example10'>
app PeaceKeeper
{
private:
    on Enter =>
    {
        'Begin' >> @>log;
        @a = 2;
        2 * -@a >> @>log;
        'End' >> @>log;
    }
}
</code>

<console example_name='ArithmeticOperators_Example10'>
</console>

<code example_name='ArithmeticOperators_Example11'>
app PeaceKeeper
{
private:
    on Enter =>
    {
        'Begin' >> @>log;
        @a = -2;
        2 * -@a >> @>log;
        'End' >> @>log;
    }
}
</code>

<console example_name='ArithmeticOperators_Example11'>
</console>

<code example_name='ArithmeticOperators_Example12'>
app PeaceKeeper
{
private:
    on Enter =>
    {
        'Begin' >> @>log;
        @a = -2;
        2 * +@a >> @>log;
        'End' >> @>log;
    }
}
</code>

<console example_name='ArithmeticOperators_Example12'>
</console>

<code example_name='ArithmeticOperators_Example13'>
app PeaceKeeper
{
private:
    on Enter =>
    {
        'Begin' >> @>log;
        @a = 2;
        2 * +@a >> @>log;
        'End' >> @>log;
    }
}
</code>

<console example_name='ArithmeticOperators_Example13'>
</console>

<h2 class='center-h' data-href='Logic_сonditional_triggers'>
Logic сonditional triggers
</h2>

<LinkToContent/>

<p>
In this example trigger fires and writes "Logic condition fired!!!!" after insert fact.
</p>

<p>
In Unity scene facts are provided by perception channels.
</p>

<p>
Read more about Logic сonditional triggers <a href='/docs/spec.html#Logic_conditional_triggers_chapter'>here</a>.
</p>

<code example_name='LogicConditional_Trigger_Example_1'>
app MyNPC
{
    {: barrel(#`Barel 1`) :}

    on Enter =>
    {
	    "Begin" >> @>log;
		
		insert {: see(I, #`Barel 1`) :};
		
	    "End" >> @>log;
    }
	
	on {: see(I, barrel) :} => 
	{
	    "Logic condition fired!!!!" >> @>log;
	}
}
</code>

<console example_name='LogicConditional_Trigger_Example_1'>
</console>

<code example_name='LogicConditional_Trigger_Example3'>
app PeaceKeeper
{
    @a = #`gun 1`;

    on Enter =>
    {
        'Begin' >> @>log;
        insert {: see(I, @a) :};
    }

    on {: see(I, @a) :} => 
    {
	    'D' >> @>log;
	}
}
</code>

<console example_name='LogicConditional_Trigger_Example3'>
</console>

<p>
This trigger binds captured in logic variable value with imperative variable.
</p>

<p>
Read more about binding variables <a href='/docs/spec.html#Logic_сonditional_triggers_Binding_variables_chapter'>here</a>.
</p>

<code example_name='LogicConditional_Trigger_Example_2'>
app PeaceKeeper
{
    {: barrel(#a) :}
    {: see(I, #a) :}

    on {: see(I, $x) & barrel($x) & !focus(I, friend) :} ($x >> @x) => 
    {
	    @x >> @>log;
    }
}
</code>

<console example_name='LogicConditional_Trigger_Example_2'>
</console>

<h2 class='center-h' data-href='Error_handling'>
Error handling
</h2>

<LinkToContent/>

<p>
Read more about error handling <a href='/docs/spec.html#Error_handling_chapter'>here</a>.
</p>

<code example_name='ErrorProcessingExample_1'>
app PeaceKeeper
{
    fun a(@param_1) =>
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;

        error {: see(I, #a) :};

        'End of `a`' >> @>log;
    }

    on Enter =>
    {
        try
        {
            'Begin' >> @>log;
            a(param_1: 1);
            'End' >> @>log;        
        }
        catch
        {
            'catch' >> @>log;
        }
        catch(@e)
        {
            'catch(@e)' >> @>log;
            @e >> @>log;
        }
        catch(@e) where {: hit(enemy, I) :}
        {
            'catch(@e) where {: hit(enemy, I) :}' >> @>log;
        }
        catch(@e) where {: see(I, $x) :}
        {
            'catch(@e) where {: see(I, $x) :}' >> @>log;
            @e >> @>log;
        }
        else
        {
            'else' >> @>log;
        }
        ensure
        {
            'ensure' >> @>log;
        }

        'End of `Enter`' >> @>log;
    }
}
</code>

<console example_name='ErrorProcessingExample_1'>
</console>

<code example_name='ErrorProcessingExample_2'>
app PeaceKeeper
{
    fun a(@param_1) =>
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;

        error {: see(I, #a) :};

        'End of `a`' >> @>log;
    }

    on Enter =>
    {
        try
        {
            'Begin' >> @>log;
            a(param_1: 1);
            'End' >> @>log;        
        }
        catch
        {
            'catch' >> @>log;
        }
        catch(@e)
        {
            'catch(@e)' >> @>log;
            @e >> @>log;
        }
        catch(@e) where {: hit(enemy, I) :}
        {
            'catch(@e) where {: hit(enemy, I) :}' >> @>log;
        }
        catch(@e) where {: see(I, $x) :}
        {
            'catch(@e) where {: see(I, $x) :}' >> @>log;
            @e >> @>log;
        }
        else
        {
            'else' >> @>log;
        }
        ensure
        {
            'ensure' >> @>log;
        }

        'End of `Enter`' >> @>log;
    }

    on {: see(I, $x) :} ($x >> @x) => 
    {
        'on Fired' >> @>log;
        @x >> @>log;
    }
}
</code>

<console example_name='ErrorProcessingExample_2'>
</console>

<code example_name='ErrorProcessingExample_3'>
app PeaceKeeper
{
    fun a(@param_1) =>
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;

        error {: see(I, #a) :};

        'End of `a`' >> @>log;
    }

    on Enter =>
    {
        try
        {
            'Begin' >> @>log;
            a(param_1: 1);
            'End' >> @>log;        
        }
        catch
        {
            'catch' >> @>log;
        }

        'End of `Enter`' >> @>log;
    }
}
</code>

<console example_name='ErrorProcessingExample_3'>
</console>

<code example_name='ErrorProcessingExample_4'>
app PeaceKeeper
{
    fun a(@param_1) =>
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;

        error {: see(I, #a) :};

        'End of `a`' >> @>log;
    }

    on Enter =>
    {
        try
        {
            'Begin' >> @>log;
            a(param_1: 1);
            'End' >> @>log;        
        }
        catch
        {
            'catch' >> @>log;
        }
        else
        {
            'else' >> @>log;
        }

        'End of `Enter`' >> @>log;
    }
}
</code>

<console example_name='ErrorProcessingExample_4'>
</console>

<code example_name='ErrorProcessingExample_5'>
app PeaceKeeper
{
    fun a(@param_1) =>
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;

        error {: see(I, #a) :};

        'End of `a`' >> @>log;
    }

    on Enter =>
    {
        try
        {
            'Begin' >> @>log;
            a(param_1: 1);
            'End' >> @>log;        
        }
        catch
        {
            'catch' >> @>log;
        }
        else
        {
            'else' >> @>log;
        }
        ensure
        {
            'ensure' >> @>log;
        }

        'End of `Enter`' >> @>log;
    }
}
</code>

<console example_name='ErrorProcessingExample_5'>
</console>

<code example_name='ErrorProcessingExample_6'>
app PeaceKeeper
{
    fun a(@param_1) =>
    {
        '`a` has been called!' >> @>log;
        @param_1 >> @>log;

        error {: see(I, #a) :};

        'End of `a`' >> @>log;
    }

    on Enter =>
    {
        try
        {
            'Begin' >> @>log;
            a(param_1: 1);
            'End' >> @>log;        
        }

        'End of `Enter`' >> @>log;
    }
}
</code>

<console example_name='ErrorProcessingExample_6'>
</console>

<code example_name='ErrorProcessingExample_7'>
app PeaceKeeper
{
    on Enter =>
    {
        try
        {
            'Begin' >> @>log;
            error {: see(I, #a) :};
            'End' >> @>log;        
        }
        else
        {
            'else' >> @>log;
        }

        'End of `Enter`' >> @>log;
    }
}
</code>

<console example_name='ErrorProcessingExample_7'>
</console>

<code example_name='ErrorProcessingExample_8'>
app PeaceKeeper
{
    on Enter =>
    {
        try
        {
            'Begin' >> @>log;
            error {: see(I, #a) :};
            'End' >> @>log;        
        }
        ensure
        {
            'ensure' >> @>log;
        }

        'End of `Enter`' >> @>log;
    }
}
</code>

<console example_name='ErrorProcessingExample_8'>
</console>

<code example_name='ErrorProcessingExample_9'>
app PeaceKeeper
{
    on Enter =>
    {
        try
        {
            'Begin' >> @>log;
            error {: see(I, #a) :};
            'End' >> @>log;        
        }
        else
        {
            'else' >> @>log;
        }
        ensure
        {
            'ensure' >> @>log;
        }

        'End of `Enter`' >> @>log;
    }
}
</code>

<console example_name='ErrorProcessingExample_9'>
</console>

<h2 class='center-h' data-href='RepeatStatement'>
"repeat" statement
</h2>

<LinkToContent/>

<p>
Read more about "repeat" statement <a href='/docs/spec.html#RepeatStatement_chapter'>here</a>.
</p>

<code example_name='RepeatStatement_Example1'>
app PeaceKeeper
{
    on Enter =>
    {
        'Begin' >> @>log;
        
        @a = 10;

        repeat
        {
            @a >> @>log;
            @a = @a - 1;

            if(@a > 5)
            {
                continue;
            }

            'End of while iteration' >> @>log;

            break;
        }

        'End' >> @>log;
    }
}
</code>

<console example_name='RepeatStatement_Example1'>
</console>

<h2 class='center-h' data-href='WhileStatement'>
"while" statement
</h2>

<LinkToContent/>

<p>
Read more about "while" statement <a href='/docs/spec.html#WhileStatement_chapter'>here</a>.
</p>

<code example_name='WhileStatement_Example1'>
app PeaceKeeper
{
    on Enter =>
    {
        'Begin' >> @>log;
        
        @a = 10;

        while (@a > 0)
        {
            @a >> @>log;
            @a = @a - 1;
        }

        'End' >> @>log;
    }
}
</code>

<console example_name='WhileStatement_Example1'>
</console>

<h2 class='center-h' data-href='ReturnStatement'>
"return" statement
</h2>

<LinkToContent/>

<p>
Read more about "return" statement <a href='/docs/spec.html#ReturnStatement_chapter'>here</a>.
</p>

<code example_name='ReturnStatement_Example1'>
app PeaceKeeper
{
    fun a() => 
    {
        '`a` has been called!' >> @>log;
        return;
        '`a` has been ended!' >> @>log;
    }

    on Enter =>
    {
        'Begin' >> @>log;
        a();
        'End' >> @>log;
    }
}
</code>

<console example_name='ReturnStatement_Example1'>
</console>

<code example_name='ReturnStatement_Example2'>
app PeaceKeeper
{
    fun a() => 
    {
        '`a` has been called!' >> @>log;
        return;
        '`a` has been ended!' >> @>log;
    }

    on Enter =>
    {
        'Begin' >> @>log;
        a() >> @>log;
        'End' >> @>log;
    }
}
</code>

<console example_name='ReturnStatement_Example2'>
</console>

<code example_name='ReturnStatement_Example3'>
app PeaceKeeper
{
    fun a() => 
    {
        '`a` has been called!' >> @>log;
        return 1;
        '`a` has been ended!' >> @>log;
    }

    on Enter =>
    {
        'Begin' >> @>log;
        a() >> @>log;
        'End' >> @>log;
    }
}
</code>

<console example_name='ReturnStatement_Example3'>
</console>

<h2 class='center-h' data-href='IfElifElseStatement'>
"if-elif-else" statement
</h2>

<LinkToContent/>

<p>
Read more about "if-elif-else" statement <a href='/docs/spec.html#IfElifElseStatement_chapter'>here</a>.
</p>

<code example_name='IfElifElseStatement_Example1'>
app PeaceKeeper
{
    on Enter =>
    {
        'Begin' >> @>log;
        
        @a = 1;

        if(@a)
        {
            'Yes!' >> @>log;
        }

        'End' >> @>log;
    }
}
</code>

<console example_name='IfElifElseStatement_Example1'>
</console>

<code example_name='IfElifElseStatement_Example2'>
app PeaceKeeper
{
    {: >: { see(I, #`Barel 1`) } :}

    on Enter =>
    {
        'Begin' >> @>log;
        
        if({: >: { see(I, #`Barel 1`) } :})
        {
            'Yes!' >> @>log;
        }

        'End' >> @>log;
    }
}
</code>

<console example_name='IfElifElseStatement_Example2'>
</console>

<code example_name='IfElifElseStatement_Example3'>
app PeaceKeeper
{
    {: >: { see(I, #`Barel 1`) } :}

    on Enter =>
    {
        'Begin' >> @>log;
        
        if({: >: { see(I, #`Barel 1`) } :})
        {
            'Yes!' >> @>log;
        } else {
            'Else Yes!' >> @>log;
        }

        'End' >> @>log;
    }
}
</code>

<console example_name='IfElifElseStatement_Example3'>
</console>

<code example_name='IfElifElseStatement_Example4'>
app PeaceKeeper
{
    {: >: { see(I, #`Barel 0`) } :}

    on Enter =>
    {
        'Begin' >> @>log;
        
        if({: >: { see(I, #`Barel 0`) } :})
        {
            'Yes!' >> @>log;
        } elif ({: >: { see(I, #`Barel 1`) } :}) {
            'Elif 1 Yes!' >> @>log;
        }

        'End' >> @>log;
    }
}
</code>

<console example_name='IfElifElseStatement_Example4'>
</console>

<code example_name='IfElifElseStatement_Example5'>
app PeaceKeeper
{
    {: >: { see(I, #`Barel 3`) } :}

    on Enter =>
    {
        'Begin' >> @>log;
        
        if({: >: { see(I, #`Barel 0`) } :})
        {
            'Yes!' >> @>log;
        } elif ({: >: { see(I, #`Barel 1`) } :}) {
            'Elif 1 Yes!' >> @>log;
        }elif ({: >: { see(I, #`Barel 2`) } :}) {
            'Elif 2 Yes!' >> @>log;
        }else{
            'Else Yes!' >> @>log;
        }

        'End' >> @>log;
    }
}
</code>

<console example_name='IfElifElseStatement_Example5'>
</console>

<h2 class='center-h' data-href='ContinueLoopStatement'>
"continue" loop statement
</h2>

<LinkToContent/>

<p>
Read more about "continue" loop statement <a href='/docs/spec.html#ContinueLoopStatement_chapter'>here</a>.
</p>

<code example_name='ContinueLoopStatement_Example1'>
app PeaceKeeper
{
    on Enter =>
    {
        'Begin' >> @>log;
        
        @a = 10;

        repeat
        {
            @a >> @>log;
            @a = @a - 1;

            if(@a > 5)
            {
                continue;
            }

            'End of while iteration' >> @>log;

            break;
        }

        'End' >> @>log;
    }
}
</code>

<console example_name='ContinueLoopStatement_Example1'>
</console>

<h2 class='center-h' data-href='BreakLoopStatement'>
"break" loop statement
</h2>

<LinkToContent/>

<p>
Read more about "break" loop statement <a href='/docs/spec.html#BreakLoopStatement_chapter'>here</a>.
</p>

<code example_name='BreakLoopStatement_Example1'>
app PeaceKeeper
{
    on Enter =>
    {
        'Begin' >> @>log;
        
        @a = 10;

        while (@a > 0)
        {
            @a >> @>log;
            @a = @a - 1;

            if(@a > 5)
            {
                break;
            }
        }

        'End' >> @>log;
    }
}
</code>

<console example_name='BreakLoopStatement_Example1'>
</console>
